// Generated by jextract

package de.skymatic.fusepanama.macfuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class fuse_h_constants_4 extends fuse_h_constants_3 {

    /* package-private */ fuse_h_constants_4() {}
    static final MemoryLayout fuse_operations$statfs$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$statfs$LAYOUT() { return fuse_operations$statfs$LAYOUT_; }

    static final VarHandle fuse_operations$statfs$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("statfs")));
    static final java.lang.invoke.VarHandle fuse_operations$statfs$VH() { return fuse_operations$statfs$VH_; }

    static final FunctionDescriptor flush$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor flush$FUNC() { return flush$FUNC_; }

    static final MemoryLayout fuse_operations$flush$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$flush$LAYOUT() { return fuse_operations$flush$LAYOUT_; }

    static final VarHandle fuse_operations$flush$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("flush")));
    static final java.lang.invoke.VarHandle fuse_operations$flush$VH() { return fuse_operations$flush$VH_; }

    static final FunctionDescriptor release$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor release$FUNC() { return release$FUNC_; }

    static final MemoryLayout fuse_operations$release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$release$LAYOUT() { return fuse_operations$release$LAYOUT_; }

    static final VarHandle fuse_operations$release$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("release")));
    static final java.lang.invoke.VarHandle fuse_operations$release$VH() { return fuse_operations$release$VH_; }

    static final FunctionDescriptor fsync$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fsync$FUNC() { return fsync$FUNC_; }

    static final MemoryLayout fuse_operations$fsync$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$fsync$LAYOUT() { return fuse_operations$fsync$LAYOUT_; }

    static final VarHandle fuse_operations$fsync$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fsync")));
    static final java.lang.invoke.VarHandle fuse_operations$fsync$VH() { return fuse_operations$fsync$VH_; }

    static final FunctionDescriptor setxattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor setxattr$FUNC() { return setxattr$FUNC_; }

    static final MemoryLayout fuse_operations$setxattr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$setxattr$LAYOUT() { return fuse_operations$setxattr$LAYOUT_; }

    static final VarHandle fuse_operations$setxattr$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("setxattr")));
    static final java.lang.invoke.VarHandle fuse_operations$setxattr$VH() { return fuse_operations$setxattr$VH_; }

    static final FunctionDescriptor getxattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor getxattr$FUNC() { return getxattr$FUNC_; }

    static final MemoryLayout fuse_operations$getxattr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$getxattr$LAYOUT() { return fuse_operations$getxattr$LAYOUT_; }

    static final VarHandle fuse_operations$getxattr$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("getxattr")));
    static final java.lang.invoke.VarHandle fuse_operations$getxattr$VH() { return fuse_operations$getxattr$VH_; }

    static final FunctionDescriptor listxattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor listxattr$FUNC() { return listxattr$FUNC_; }

    static final MemoryLayout fuse_operations$listxattr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$listxattr$LAYOUT() { return fuse_operations$listxattr$LAYOUT_; }

    static final VarHandle fuse_operations$listxattr$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("listxattr")));
    static final java.lang.invoke.VarHandle fuse_operations$listxattr$VH() { return fuse_operations$listxattr$VH_; }

    static final FunctionDescriptor removexattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor removexattr$FUNC() { return removexattr$FUNC_; }

    static final MemoryLayout fuse_operations$removexattr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$removexattr$LAYOUT() { return fuse_operations$removexattr$LAYOUT_; }

    static final VarHandle fuse_operations$removexattr$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("removexattr")));
    static final java.lang.invoke.VarHandle fuse_operations$removexattr$VH() { return fuse_operations$removexattr$VH_; }

    static final FunctionDescriptor opendir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor opendir$FUNC() { return opendir$FUNC_; }

    static final MemoryLayout fuse_operations$opendir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$opendir$LAYOUT() { return fuse_operations$opendir$LAYOUT_; }

    static final VarHandle fuse_operations$opendir$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("opendir")));
    static final java.lang.invoke.VarHandle fuse_operations$opendir$VH() { return fuse_operations$opendir$VH_; }

    static final FunctionDescriptor readdir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor readdir$FUNC() { return readdir$FUNC_; }

    static final MemoryLayout fuse_operations$readdir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$readdir$LAYOUT() { return fuse_operations$readdir$LAYOUT_; }

    static final VarHandle fuse_operations$readdir$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("readdir")));
    static final java.lang.invoke.VarHandle fuse_operations$readdir$VH() { return fuse_operations$readdir$VH_; }

    static final FunctionDescriptor releasedir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor releasedir$FUNC() { return releasedir$FUNC_; }

    static final MemoryLayout fuse_operations$releasedir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$releasedir$LAYOUT() { return fuse_operations$releasedir$LAYOUT_; }

    static final VarHandle fuse_operations$releasedir$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("releasedir")));
    static final java.lang.invoke.VarHandle fuse_operations$releasedir$VH() { return fuse_operations$releasedir$VH_; }

    static final FunctionDescriptor fsyncdir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fsyncdir$FUNC() { return fsyncdir$FUNC_; }

    static final MemoryLayout fuse_operations$fsyncdir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$fsyncdir$LAYOUT() { return fuse_operations$fsyncdir$LAYOUT_; }

    static final VarHandle fuse_operations$fsyncdir$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fsyncdir")));
    static final java.lang.invoke.VarHandle fuse_operations$fsyncdir$VH() { return fuse_operations$fsyncdir$VH_; }

    static final FunctionDescriptor init$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor init$FUNC() { return init$FUNC_; }

    static final MemoryLayout fuse_operations$init$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$init$LAYOUT() { return fuse_operations$init$LAYOUT_; }

    static final VarHandle fuse_operations$init$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("init")));
    static final java.lang.invoke.VarHandle fuse_operations$init$VH() { return fuse_operations$init$VH_; }

    static final FunctionDescriptor destroy$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor destroy$FUNC() { return destroy$FUNC_; }

    static final MemoryLayout fuse_operations$destroy$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$destroy$LAYOUT() { return fuse_operations$destroy$LAYOUT_; }

    static final VarHandle fuse_operations$destroy$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("destroy")));
    static final java.lang.invoke.VarHandle fuse_operations$destroy$VH() { return fuse_operations$destroy$VH_; }

    static final FunctionDescriptor access$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor access$FUNC() { return access$FUNC_; }

    static final MemoryLayout fuse_operations$access$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$access$LAYOUT() { return fuse_operations$access$LAYOUT_; }

    static final VarHandle fuse_operations$access$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("access")));
    static final java.lang.invoke.VarHandle fuse_operations$access$VH() { return fuse_operations$access$VH_; }

    static final FunctionDescriptor create$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor create$FUNC() { return create$FUNC_; }

    static final MemoryLayout fuse_operations$create$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$create$LAYOUT() { return fuse_operations$create$LAYOUT_; }

    static final VarHandle fuse_operations$create$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("create")));
    static final java.lang.invoke.VarHandle fuse_operations$create$VH() { return fuse_operations$create$VH_; }

    static final FunctionDescriptor ftruncate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ftruncate$FUNC() { return ftruncate$FUNC_; }

    static final MemoryLayout fuse_operations$ftruncate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$ftruncate$LAYOUT() { return fuse_operations$ftruncate$LAYOUT_; }

    static final VarHandle fuse_operations$ftruncate$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ftruncate")));
    static final java.lang.invoke.VarHandle fuse_operations$ftruncate$VH() { return fuse_operations$ftruncate$VH_; }

    static final FunctionDescriptor fgetattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fgetattr$FUNC() { return fgetattr$FUNC_; }

    static final MemoryLayout fuse_operations$fgetattr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$fgetattr$LAYOUT() { return fuse_operations$fgetattr$LAYOUT_; }

    static final VarHandle fuse_operations$fgetattr$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fgetattr")));
    static final java.lang.invoke.VarHandle fuse_operations$fgetattr$VH() { return fuse_operations$fgetattr$VH_; }

    static final FunctionDescriptor lock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor lock$FUNC() { return lock$FUNC_; }

    static final MemoryLayout fuse_operations$lock$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$lock$LAYOUT() { return fuse_operations$lock$LAYOUT_; }

    static final VarHandle fuse_operations$lock$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lock")));
    static final java.lang.invoke.VarHandle fuse_operations$lock$VH() { return fuse_operations$lock$VH_; }

    static final FunctionDescriptor utimens$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor utimens$FUNC() { return utimens$FUNC_; }

    static final MemoryLayout fuse_operations$utimens$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$utimens$LAYOUT() { return fuse_operations$utimens$LAYOUT_; }

    static final VarHandle fuse_operations$utimens$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("utimens")));
    static final java.lang.invoke.VarHandle fuse_operations$utimens$VH() { return fuse_operations$utimens$VH_; }

    static final FunctionDescriptor bmap$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor bmap$FUNC() { return bmap$FUNC_; }

    static final MemoryLayout fuse_operations$bmap$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$bmap$LAYOUT() { return fuse_operations$bmap$LAYOUT_; }

    static final VarHandle fuse_operations$bmap$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("bmap")));
    static final java.lang.invoke.VarHandle fuse_operations$bmap$VH() { return fuse_operations$bmap$VH_; }

    static final FunctionDescriptor ioctl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ioctl$FUNC() { return ioctl$FUNC_; }

    static final MemoryLayout fuse_operations$ioctl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$ioctl$LAYOUT() { return fuse_operations$ioctl$LAYOUT_; }

    static final VarHandle fuse_operations$ioctl$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ioctl")));
    static final java.lang.invoke.VarHandle fuse_operations$ioctl$VH() { return fuse_operations$ioctl$VH_; }

    static final FunctionDescriptor poll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor poll$FUNC() { return poll$FUNC_; }

    static final MemoryLayout fuse_operations$poll$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$poll$LAYOUT() { return fuse_operations$poll$LAYOUT_; }

    static final VarHandle fuse_operations$poll$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("poll")));
    static final java.lang.invoke.VarHandle fuse_operations$poll$VH() { return fuse_operations$poll$VH_; }

    static final FunctionDescriptor write_buf$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor write_buf$FUNC() { return write_buf$FUNC_; }

    static final MemoryLayout fuse_operations$write_buf$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$write_buf$LAYOUT() { return fuse_operations$write_buf$LAYOUT_; }

    static final VarHandle fuse_operations$write_buf$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("write_buf")));
    static final java.lang.invoke.VarHandle fuse_operations$write_buf$VH() { return fuse_operations$write_buf$VH_; }

    static final FunctionDescriptor read_buf$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor read_buf$FUNC() { return read_buf$FUNC_; }

    static final MemoryLayout fuse_operations$read_buf$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$read_buf$LAYOUT() { return fuse_operations$read_buf$LAYOUT_; }

    static final VarHandle fuse_operations$read_buf$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("read_buf")));
    static final java.lang.invoke.VarHandle fuse_operations$read_buf$VH() { return fuse_operations$read_buf$VH_; }

    static final FunctionDescriptor flock$1$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor flock$1$FUNC() { return flock$1$FUNC_; }

    static final MemoryLayout fuse_operations$flock$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$flock$LAYOUT() { return fuse_operations$flock$LAYOUT_; }

    static final VarHandle fuse_operations$flock$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("flock")));
    static final java.lang.invoke.VarHandle fuse_operations$flock$VH() { return fuse_operations$flock$VH_; }

    static final FunctionDescriptor fallocate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONG_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fallocate$FUNC() { return fallocate$FUNC_; }

    static final MemoryLayout fuse_operations$fallocate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$fallocate$LAYOUT() { return fuse_operations$fallocate$LAYOUT_; }

    static final VarHandle fuse_operations$fallocate$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fallocate")));
    static final java.lang.invoke.VarHandle fuse_operations$fallocate$VH() { return fuse_operations$fallocate$VH_; }

    static final FunctionDescriptor reserved00$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor reserved00$FUNC() { return reserved00$FUNC_; }

    static final MemoryLayout fuse_operations$reserved00$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$reserved00$LAYOUT() { return fuse_operations$reserved00$LAYOUT_; }

    static final VarHandle fuse_operations$reserved00$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("reserved00")));
    static final java.lang.invoke.VarHandle fuse_operations$reserved00$VH() { return fuse_operations$reserved00$VH_; }

    static final FunctionDescriptor reserved01$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor reserved01$FUNC() { return reserved01$FUNC_; }

    static final MemoryLayout fuse_operations$reserved01$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$reserved01$LAYOUT() { return fuse_operations$reserved01$LAYOUT_; }

    static final VarHandle fuse_operations$reserved01$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("reserved01")));
    static final java.lang.invoke.VarHandle fuse_operations$reserved01$VH() { return fuse_operations$reserved01$VH_; }

    static final FunctionDescriptor renamex$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor renamex$FUNC() { return renamex$FUNC_; }

    static final MemoryLayout fuse_operations$renamex$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$renamex$LAYOUT() { return fuse_operations$renamex$LAYOUT_; }

    static final VarHandle fuse_operations$renamex$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("renamex")));
    static final java.lang.invoke.VarHandle fuse_operations$renamex$VH() { return fuse_operations$renamex$VH_; }

    static final FunctionDescriptor statfs_x$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor statfs_x$FUNC() { return statfs_x$FUNC_; }

    static final MemoryLayout fuse_operations$statfs_x$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$statfs_x$LAYOUT() { return fuse_operations$statfs_x$LAYOUT_; }

    static final VarHandle fuse_operations$statfs_x$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("statfs_x")));
    static final java.lang.invoke.VarHandle fuse_operations$statfs_x$VH() { return fuse_operations$statfs_x$VH_; }

    static final FunctionDescriptor setvolname$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor setvolname$FUNC() { return setvolname$FUNC_; }

    static final MemoryLayout fuse_operations$setvolname$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$setvolname$LAYOUT() { return fuse_operations$setvolname$LAYOUT_; }

    static final VarHandle fuse_operations$setvolname$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("setvolname")));
    static final java.lang.invoke.VarHandle fuse_operations$setvolname$VH() { return fuse_operations$setvolname$VH_; }

    static final FunctionDescriptor exchange$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor exchange$FUNC() { return exchange$FUNC_; }

    static final MemoryLayout fuse_operations$exchange$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$exchange$LAYOUT() { return fuse_operations$exchange$LAYOUT_; }

    static final VarHandle fuse_operations$exchange$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("exchange")));
    static final java.lang.invoke.VarHandle fuse_operations$exchange$VH() { return fuse_operations$exchange$VH_; }

    static final FunctionDescriptor getxtimes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor getxtimes$FUNC() { return getxtimes$FUNC_; }

    static final MemoryLayout fuse_operations$getxtimes$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$getxtimes$LAYOUT() { return fuse_operations$getxtimes$LAYOUT_; }

    static final VarHandle fuse_operations$getxtimes$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("getxtimes")));
    static final java.lang.invoke.VarHandle fuse_operations$getxtimes$VH() { return fuse_operations$getxtimes$VH_; }

    static final FunctionDescriptor setbkuptime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor setbkuptime$FUNC() { return setbkuptime$FUNC_; }

    static final MemoryLayout fuse_operations$setbkuptime$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$setbkuptime$LAYOUT() { return fuse_operations$setbkuptime$LAYOUT_; }

    static final VarHandle fuse_operations$setbkuptime$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("setbkuptime")));
    static final java.lang.invoke.VarHandle fuse_operations$setbkuptime$VH() { return fuse_operations$setbkuptime$VH_; }

    static final FunctionDescriptor setchgtime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor setchgtime$FUNC() { return setchgtime$FUNC_; }

    static final MemoryLayout fuse_operations$setchgtime$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$setchgtime$LAYOUT() { return fuse_operations$setchgtime$LAYOUT_; }

    static final VarHandle fuse_operations$setchgtime$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("setchgtime")));
    static final java.lang.invoke.VarHandle fuse_operations$setchgtime$VH() { return fuse_operations$setchgtime$VH_; }

    static final FunctionDescriptor setcrtime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor setcrtime$FUNC() { return setcrtime$FUNC_; }

    static final MemoryLayout fuse_operations$setcrtime$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$setcrtime$LAYOUT() { return fuse_operations$setcrtime$LAYOUT_; }

    static final VarHandle fuse_operations$setcrtime$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("setcrtime")));
    static final java.lang.invoke.VarHandle fuse_operations$setcrtime$VH() { return fuse_operations$setcrtime$VH_; }

    static final MemoryLayout fuse_operations$chflags$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$chflags$LAYOUT() { return fuse_operations$chflags$LAYOUT_; }

    static final VarHandle fuse_operations$chflags$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("chflags")));
    static final java.lang.invoke.VarHandle fuse_operations$chflags$VH() { return fuse_operations$chflags$VH_; }

    static final FunctionDescriptor setattr_x$2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor setattr_x$2$FUNC() { return setattr_x$2$FUNC_; }

    static final MemoryLayout fuse_operations$setattr_x$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$setattr_x$LAYOUT() { return fuse_operations$setattr_x$LAYOUT_; }

    static final VarHandle fuse_operations$setattr_x$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("setattr_x")));
    static final java.lang.invoke.VarHandle fuse_operations$setattr_x$VH() { return fuse_operations$setattr_x$VH_; }

    static final FunctionDescriptor fsetattr_x$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fsetattr_x$FUNC() { return fsetattr_x$FUNC_; }

    static final MemoryLayout fuse_operations$fsetattr_x$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$fsetattr_x$LAYOUT() { return fuse_operations$fsetattr_x$LAYOUT_; }

    static final VarHandle fuse_operations$fsetattr_x$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fsetattr_x")));
    static final java.lang.invoke.VarHandle fuse_operations$fsetattr_x$VH() { return fuse_operations$fsetattr_x$VH_; }

    static final MemoryLayout fuse_context$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("fuse"),
        C_INT.withName("uid"),
        C_INT.withName("gid"),
        C_INT.withName("pid"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("private_data"),
        C_SHORT.withName("umask"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("fuse_context");
    static final jdk.incubator.foreign.MemoryLayout fuse_context$struct$LAYOUT() { return fuse_context$struct$LAYOUT_; }

    static final MemoryLayout fuse_context$fuse$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_context$fuse$LAYOUT() { return fuse_context$fuse$LAYOUT_; }

    static final VarHandle fuse_context$fuse$VH_ = MemoryHandles.asAddressVarHandle(fuse_context$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fuse")));
    static final java.lang.invoke.VarHandle fuse_context$fuse$VH() { return fuse_context$fuse$VH_; }

    static final MemoryLayout fuse_context$uid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_context$uid$LAYOUT() { return fuse_context$uid$LAYOUT_; }

    static final VarHandle fuse_context$uid$VH_ = fuse_context$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("uid"));
    static final java.lang.invoke.VarHandle fuse_context$uid$VH() { return fuse_context$uid$VH_; }

    static final MemoryLayout fuse_context$gid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_context$gid$LAYOUT() { return fuse_context$gid$LAYOUT_; }

    static final VarHandle fuse_context$gid$VH_ = fuse_context$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("gid"));
    static final java.lang.invoke.VarHandle fuse_context$gid$VH() { return fuse_context$gid$VH_; }

    static final MemoryLayout fuse_context$pid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_context$pid$LAYOUT() { return fuse_context$pid$LAYOUT_; }

    static final VarHandle fuse_context$pid$VH_ = fuse_context$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pid"));
    static final java.lang.invoke.VarHandle fuse_context$pid$VH() { return fuse_context$pid$VH_; }

    static final MemoryLayout fuse_context$private_data$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_context$private_data$LAYOUT() { return fuse_context$private_data$LAYOUT_; }

    static final VarHandle fuse_context$private_data$VH_ = MemoryHandles.asAddressVarHandle(fuse_context$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("private_data")));
    static final java.lang.invoke.VarHandle fuse_context$private_data$VH() { return fuse_context$private_data$VH_; }

    static final MemoryLayout fuse_context$umask$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout fuse_context$umask$LAYOUT() { return fuse_context$umask$LAYOUT_; }

    static final VarHandle fuse_context$umask$VH_ = fuse_context$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("umask"));
    static final java.lang.invoke.VarHandle fuse_context$umask$VH() { return fuse_context$umask$VH_; }

    static final FunctionDescriptor fuse_new$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_new$FUNC() { return fuse_new$FUNC_; }

    static final MethodHandle fuse_new$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_new",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        fuse_new$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_new$MH() { return fuse_new$MH_; }

    static final FunctionDescriptor fuse_destroy$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_destroy$FUNC() { return fuse_destroy$FUNC_; }

    static final MethodHandle fuse_destroy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_destroy",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_destroy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_destroy$MH() { return fuse_destroy$MH_; }

    static final FunctionDescriptor fuse_loop$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_loop$FUNC() { return fuse_loop$FUNC_; }

    static final MethodHandle fuse_loop$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_loop",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_loop$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_loop$MH() { return fuse_loop$MH_; }

    static final FunctionDescriptor fuse_exit$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_exit$FUNC() { return fuse_exit$FUNC_; }

    static final MethodHandle fuse_exit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_exit",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_exit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_exit$MH() { return fuse_exit$MH_; }

    static final FunctionDescriptor fuse_loop_mt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_loop_mt$FUNC() { return fuse_loop_mt$FUNC_; }

    static final MethodHandle fuse_loop_mt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_loop_mt",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_loop_mt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_loop_mt$MH() { return fuse_loop_mt$MH_; }

    static final FunctionDescriptor fuse_get_context$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor fuse_get_context$FUNC() { return fuse_get_context$FUNC_; }

    static final MethodHandle fuse_get_context$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_get_context",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        fuse_get_context$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_get_context$MH() { return fuse_get_context$MH_; }

    static final FunctionDescriptor fuse_getgroups$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_getgroups$FUNC() { return fuse_getgroups$FUNC_; }

    static final MethodHandle fuse_getgroups$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_getgroups",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        fuse_getgroups$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_getgroups$MH() { return fuse_getgroups$MH_; }

    static final FunctionDescriptor fuse_interrupted$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor fuse_interrupted$FUNC() { return fuse_interrupted$FUNC_; }

    static final MethodHandle fuse_interrupted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_interrupted",
        "()I",
        fuse_interrupted$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_interrupted$MH() { return fuse_interrupted$MH_; }

    static final FunctionDescriptor fuse_invalidate_path$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_invalidate_path$FUNC() { return fuse_invalidate_path$FUNC_; }

    static final MethodHandle fuse_invalidate_path$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_invalidate_path",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_invalidate_path$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_invalidate_path$MH() { return fuse_invalidate_path$MH_; }

    static final FunctionDescriptor fuse_invalidate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_invalidate$FUNC() { return fuse_invalidate$FUNC_; }

    static final MethodHandle fuse_invalidate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_invalidate",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_invalidate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_invalidate$MH() { return fuse_invalidate$MH_; }

    static final FunctionDescriptor fuse_is_lib_option$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_is_lib_option$FUNC() { return fuse_is_lib_option$FUNC_; }

    static final MethodHandle fuse_is_lib_option$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_is_lib_option",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_is_lib_option$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_is_lib_option$MH() { return fuse_is_lib_option$MH_; }

    static final FunctionDescriptor fuse_main_real$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_main_real$FUNC() { return fuse_main_real$FUNC_; }

    static final MethodHandle fuse_main_real$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_main_real",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        fuse_main_real$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_main_real$MH() { return fuse_main_real$MH_; }

    static final FunctionDescriptor fuse_start_cleanup_thread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_start_cleanup_thread$FUNC() { return fuse_start_cleanup_thread$FUNC_; }

    static final MethodHandle fuse_start_cleanup_thread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_start_cleanup_thread",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_start_cleanup_thread$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_start_cleanup_thread$MH() { return fuse_start_cleanup_thread$MH_; }

    static final FunctionDescriptor fuse_stop_cleanup_thread$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_stop_cleanup_thread$FUNC() { return fuse_stop_cleanup_thread$FUNC_; }

    static final MethodHandle fuse_stop_cleanup_thread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_stop_cleanup_thread",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_stop_cleanup_thread$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_stop_cleanup_thread$MH() { return fuse_stop_cleanup_thread$MH_; }

    static final FunctionDescriptor fuse_clean_cache$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_clean_cache$FUNC() { return fuse_clean_cache$FUNC_; }

    static final MethodHandle fuse_clean_cache$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_clean_cache",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_clean_cache$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_clean_cache$MH() { return fuse_clean_cache$MH_; }

    static final FunctionDescriptor fuse_fs_setattr_x$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_setattr_x$FUNC() { return fuse_fs_setattr_x$FUNC_; }

    static final MethodHandle fuse_fs_setattr_x$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_setattr_x",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_setattr_x$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_setattr_x$MH() { return fuse_fs_setattr_x$MH_; }

    static final FunctionDescriptor fuse_fs_fsetattr_x$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_fsetattr_x$FUNC() { return fuse_fs_fsetattr_x$FUNC_; }

    static final MethodHandle fuse_fs_fsetattr_x$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_fsetattr_x",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_fsetattr_x$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_fsetattr_x$MH() { return fuse_fs_fsetattr_x$MH_; }

    static final FunctionDescriptor fuse_fs_getattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_getattr$FUNC() { return fuse_fs_getattr$FUNC_; }

    static final MethodHandle fuse_fs_getattr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_getattr",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_getattr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_getattr$MH() { return fuse_fs_getattr$MH_; }

    static final FunctionDescriptor fuse_fs_fgetattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_fgetattr$FUNC() { return fuse_fs_fgetattr$FUNC_; }

    static final MethodHandle fuse_fs_fgetattr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_fgetattr",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_fgetattr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_fgetattr$MH() { return fuse_fs_fgetattr$MH_; }

    static final FunctionDescriptor fuse_fs_rename$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_rename$FUNC() { return fuse_fs_rename$FUNC_; }

    static final MethodHandle fuse_fs_rename$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_rename",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_rename$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_rename$MH() { return fuse_fs_rename$MH_; }

    static final FunctionDescriptor fuse_fs_renamex$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_renamex$FUNC() { return fuse_fs_renamex$FUNC_; }

    static final MethodHandle fuse_fs_renamex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_renamex",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        fuse_fs_renamex$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_renamex$MH() { return fuse_fs_renamex$MH_; }

    static final FunctionDescriptor fuse_fs_setvolname$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_setvolname$FUNC() { return fuse_fs_setvolname$FUNC_; }

    static final MethodHandle fuse_fs_setvolname$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_setvolname",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_setvolname$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_setvolname$MH() { return fuse_fs_setvolname$MH_; }

    static final FunctionDescriptor fuse_fs_exchange$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_exchange$FUNC() { return fuse_fs_exchange$FUNC_; }

    static final MethodHandle fuse_fs_exchange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_exchange",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        fuse_fs_exchange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_exchange$MH() { return fuse_fs_exchange$MH_; }

    static final FunctionDescriptor fuse_fs_unlink$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_unlink$FUNC() { return fuse_fs_unlink$FUNC_; }

    static final MethodHandle fuse_fs_unlink$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_unlink",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_unlink$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_unlink$MH() { return fuse_fs_unlink$MH_; }

    static final FunctionDescriptor fuse_fs_rmdir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_rmdir$FUNC() { return fuse_fs_rmdir$FUNC_; }

    static final MethodHandle fuse_fs_rmdir$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_rmdir",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_rmdir$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_rmdir$MH() { return fuse_fs_rmdir$MH_; }

    static final FunctionDescriptor fuse_fs_symlink$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_symlink$FUNC() { return fuse_fs_symlink$FUNC_; }

    static final MethodHandle fuse_fs_symlink$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_symlink",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_symlink$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_symlink$MH() { return fuse_fs_symlink$MH_; }

    static final FunctionDescriptor fuse_fs_link$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_link$FUNC() { return fuse_fs_link$FUNC_; }

    static final MethodHandle fuse_fs_link$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_link",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_link$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_link$MH() { return fuse_fs_link$MH_; }

    static final FunctionDescriptor fuse_fs_release$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_release$FUNC() { return fuse_fs_release$FUNC_; }

    static final MethodHandle fuse_fs_release$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_release",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_release$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_release$MH() { return fuse_fs_release$MH_; }

    static final FunctionDescriptor fuse_fs_open$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_open$FUNC() { return fuse_fs_open$FUNC_; }

    static final MethodHandle fuse_fs_open$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_open",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_open$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_open$MH() { return fuse_fs_open$MH_; }

    static final FunctionDescriptor fuse_fs_read$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_read$FUNC() { return fuse_fs_read$FUNC_; }

    static final MethodHandle fuse_fs_read$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_read",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_read$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_read$MH() { return fuse_fs_read$MH_; }

    static final FunctionDescriptor fuse_fs_read_buf$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_read_buf$FUNC() { return fuse_fs_read_buf$FUNC_; }

    static final MethodHandle fuse_fs_read_buf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_read_buf",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_read_buf$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_read_buf$MH() { return fuse_fs_read_buf$MH_; }

    static final FunctionDescriptor fuse_fs_write$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_write$FUNC() { return fuse_fs_write$FUNC_; }

    static final MethodHandle fuse_fs_write$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_write",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_write$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_write$MH() { return fuse_fs_write$MH_; }

    static final FunctionDescriptor fuse_fs_write_buf$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_write_buf$FUNC() { return fuse_fs_write_buf$FUNC_; }

    static final MethodHandle fuse_fs_write_buf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_write_buf",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_write_buf$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_write_buf$MH() { return fuse_fs_write_buf$MH_; }

    static final FunctionDescriptor fuse_fs_fsync$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_fsync$FUNC() { return fuse_fs_fsync$FUNC_; }

    static final MethodHandle fuse_fs_fsync$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_fsync",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_fsync$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_fsync$MH() { return fuse_fs_fsync$MH_; }

    static final FunctionDescriptor fuse_fs_flush$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_flush$FUNC() { return fuse_fs_flush$FUNC_; }

    static final MethodHandle fuse_fs_flush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_flush",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_flush$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_flush$MH() { return fuse_fs_flush$MH_; }

    static final FunctionDescriptor fuse_fs_statfs$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_statfs$FUNC() { return fuse_fs_statfs$FUNC_; }

    static final MethodHandle fuse_fs_statfs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_statfs",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_statfs$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_statfs$MH() { return fuse_fs_statfs$MH_; }

    static final FunctionDescriptor fuse_fs_statfs_x$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_statfs_x$FUNC() { return fuse_fs_statfs_x$FUNC_; }

    static final MethodHandle fuse_fs_statfs_x$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_statfs_x",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_statfs_x$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_statfs_x$MH() { return fuse_fs_statfs_x$MH_; }

    static final FunctionDescriptor fuse_fs_opendir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_opendir$FUNC() { return fuse_fs_opendir$FUNC_; }

    static final MethodHandle fuse_fs_opendir$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_opendir",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_opendir$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_opendir$MH() { return fuse_fs_opendir$MH_; }

    static final FunctionDescriptor fuse_fs_readdir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_readdir$FUNC() { return fuse_fs_readdir$FUNC_; }

    static final MethodHandle fuse_fs_readdir$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_readdir",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_readdir$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_readdir$MH() { return fuse_fs_readdir$MH_; }

    static final FunctionDescriptor fuse_fs_readdir$filler$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_readdir$filler$FUNC() { return fuse_fs_readdir$filler$FUNC_; }

    static final FunctionDescriptor fuse_fs_fsyncdir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_fsyncdir$FUNC() { return fuse_fs_fsyncdir$FUNC_; }

    static final MethodHandle fuse_fs_fsyncdir$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_fsyncdir",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_fsyncdir$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_fsyncdir$MH() { return fuse_fs_fsyncdir$MH_; }

    static final FunctionDescriptor fuse_fs_releasedir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_releasedir$FUNC() { return fuse_fs_releasedir$FUNC_; }

    static final MethodHandle fuse_fs_releasedir$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_releasedir",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_releasedir$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_releasedir$MH() { return fuse_fs_releasedir$MH_; }

    static final FunctionDescriptor fuse_fs_create$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_create$FUNC() { return fuse_fs_create$FUNC_; }

    static final MethodHandle fuse_fs_create$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_create",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_create$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_create$MH() { return fuse_fs_create$MH_; }

    static final FunctionDescriptor fuse_fs_lock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_lock$FUNC() { return fuse_fs_lock$FUNC_; }

    static final MethodHandle fuse_fs_lock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_lock",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_lock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_lock$MH() { return fuse_fs_lock$MH_; }

    static final FunctionDescriptor fuse_fs_flock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_flock$FUNC() { return fuse_fs_flock$FUNC_; }

    static final MethodHandle fuse_fs_flock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_flock",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        fuse_fs_flock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_flock$MH() { return fuse_fs_flock$MH_; }

    static final FunctionDescriptor fuse_fs_chflags$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_chflags$FUNC() { return fuse_fs_chflags$FUNC_; }

    static final MethodHandle fuse_fs_chflags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_chflags",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        fuse_fs_chflags$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_chflags$MH() { return fuse_fs_chflags$MH_; }

    static final FunctionDescriptor fuse_fs_getxtimes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_getxtimes$FUNC() { return fuse_fs_getxtimes$FUNC_; }

    static final MethodHandle fuse_fs_getxtimes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_getxtimes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_getxtimes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_getxtimes$MH() { return fuse_fs_getxtimes$MH_; }

    static final FunctionDescriptor fuse_fs_setbkuptime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_setbkuptime$FUNC() { return fuse_fs_setbkuptime$FUNC_; }

    static final MethodHandle fuse_fs_setbkuptime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_setbkuptime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_setbkuptime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_setbkuptime$MH() { return fuse_fs_setbkuptime$MH_; }

    static final FunctionDescriptor fuse_fs_setchgtime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_setchgtime$FUNC() { return fuse_fs_setchgtime$FUNC_; }

    static final MethodHandle fuse_fs_setchgtime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_setchgtime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_setchgtime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_setchgtime$MH() { return fuse_fs_setchgtime$MH_; }

    static final FunctionDescriptor fuse_fs_setcrtime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_setcrtime$FUNC() { return fuse_fs_setcrtime$FUNC_; }

    static final MethodHandle fuse_fs_setcrtime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_setcrtime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_setcrtime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_setcrtime$MH() { return fuse_fs_setcrtime$MH_; }

    static final FunctionDescriptor fuse_fs_chmod$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_chmod$FUNC() { return fuse_fs_chmod$FUNC_; }

    static final MethodHandle fuse_fs_chmod$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_chmod",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;S)I",
        fuse_fs_chmod$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_chmod$MH() { return fuse_fs_chmod$MH_; }

    static final FunctionDescriptor fuse_fs_chown$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_chown$FUNC() { return fuse_fs_chown$FUNC_; }

    static final MethodHandle fuse_fs_chown$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_chown",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        fuse_fs_chown$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_chown$MH() { return fuse_fs_chown$MH_; }

    static final FunctionDescriptor fuse_fs_truncate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_truncate$FUNC() { return fuse_fs_truncate$FUNC_; }

    static final MethodHandle fuse_fs_truncate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_truncate",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        fuse_fs_truncate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_truncate$MH() { return fuse_fs_truncate$MH_; }

    static final FunctionDescriptor fuse_fs_ftruncate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_ftruncate$FUNC() { return fuse_fs_ftruncate$FUNC_; }

    static final MethodHandle fuse_fs_ftruncate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_ftruncate",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_ftruncate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_ftruncate$MH() { return fuse_fs_ftruncate$MH_; }

    static final FunctionDescriptor fuse_fs_utimens$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_utimens$FUNC() { return fuse_fs_utimens$FUNC_; }

    static final MethodHandle fuse_fs_utimens$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_utimens",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_utimens$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_utimens$MH() { return fuse_fs_utimens$MH_; }

    static final FunctionDescriptor fuse_fs_access$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_access$FUNC() { return fuse_fs_access$FUNC_; }

    static final MethodHandle fuse_fs_access$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_access",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        fuse_fs_access$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_access$MH() { return fuse_fs_access$MH_; }

    static final FunctionDescriptor fuse_fs_readlink$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_readlink$FUNC() { return fuse_fs_readlink$FUNC_; }

    static final MethodHandle fuse_fs_readlink$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_readlink",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        fuse_fs_readlink$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_readlink$MH() { return fuse_fs_readlink$MH_; }

    static final FunctionDescriptor fuse_fs_mknod$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_SHORT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_mknod$FUNC() { return fuse_fs_mknod$FUNC_; }

    static final MethodHandle fuse_fs_mknod$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_mknod",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;SI)I",
        fuse_fs_mknod$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_mknod$MH() { return fuse_fs_mknod$MH_; }

    static final FunctionDescriptor fuse_fs_mkdir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_mkdir$FUNC() { return fuse_fs_mkdir$FUNC_; }

    static final MethodHandle fuse_fs_mkdir$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_mkdir",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;S)I",
        fuse_fs_mkdir$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_mkdir$MH() { return fuse_fs_mkdir$MH_; }

    static final FunctionDescriptor fuse_fs_setxattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_setxattr$FUNC() { return fuse_fs_setxattr$FUNC_; }

    static final MethodHandle fuse_fs_setxattr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_setxattr",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JII)I",
        fuse_fs_setxattr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_setxattr$MH() { return fuse_fs_setxattr$MH_; }

    static final FunctionDescriptor fuse_fs_getxattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_getxattr$FUNC() { return fuse_fs_getxattr$FUNC_; }

    static final MethodHandle fuse_fs_getxattr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_getxattr",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        fuse_fs_getxattr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_getxattr$MH() { return fuse_fs_getxattr$MH_; }

    static final FunctionDescriptor fuse_fs_listxattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_listxattr$FUNC() { return fuse_fs_listxattr$FUNC_; }

    static final MethodHandle fuse_fs_listxattr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_listxattr",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        fuse_fs_listxattr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_listxattr$MH() { return fuse_fs_listxattr$MH_; }

    static final FunctionDescriptor fuse_fs_removexattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_removexattr$FUNC() { return fuse_fs_removexattr$FUNC_; }

    static final MethodHandle fuse_fs_removexattr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_removexattr",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_removexattr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_removexattr$MH() { return fuse_fs_removexattr$MH_; }

    static final FunctionDescriptor fuse_fs_bmap$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_bmap$FUNC() { return fuse_fs_bmap$FUNC_; }

    static final MethodHandle fuse_fs_bmap$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_bmap",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_bmap$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_bmap$MH() { return fuse_fs_bmap$MH_; }

    static final FunctionDescriptor fuse_fs_ioctl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_ioctl$FUNC() { return fuse_fs_ioctl$FUNC_; }

    static final MethodHandle fuse_fs_ioctl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_ioctl",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_ioctl$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_ioctl$MH() { return fuse_fs_ioctl$MH_; }

    static final FunctionDescriptor fuse_fs_poll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_poll$FUNC() { return fuse_fs_poll$FUNC_; }

    static final MethodHandle fuse_fs_poll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_poll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_poll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_poll$MH() { return fuse_fs_poll$MH_; }

    static final FunctionDescriptor fuse_fs_fallocate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_fallocate$FUNC() { return fuse_fs_fallocate$FUNC_; }

    static final MethodHandle fuse_fs_fallocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_fallocate",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJJLjdk/incubator/foreign/MemoryAddress;)I",
        fuse_fs_fallocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_fallocate$MH() { return fuse_fs_fallocate$MH_; }

    static final FunctionDescriptor fuse_fs_init$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_init$FUNC() { return fuse_fs_init$FUNC_; }

    static final MethodHandle fuse_fs_init$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_init",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_fs_init$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_init$MH() { return fuse_fs_init$MH_; }

    static final FunctionDescriptor fuse_fs_destroy$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_destroy$FUNC() { return fuse_fs_destroy$FUNC_; }

    static final MethodHandle fuse_fs_destroy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_destroy",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_fs_destroy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_destroy$MH() { return fuse_fs_destroy$MH_; }

    static final FunctionDescriptor fuse_notify_poll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_notify_poll$FUNC() { return fuse_notify_poll$FUNC_; }

    static final MethodHandle fuse_notify_poll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_notify_poll",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_notify_poll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_notify_poll$MH() { return fuse_notify_poll$MH_; }

    static final FunctionDescriptor fuse_fs_new$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_fs_new$FUNC() { return fuse_fs_new$FUNC_; }

    static final MethodHandle fuse_fs_new$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_fs_new",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        fuse_fs_new$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_fs_new$MH() { return fuse_fs_new$MH_; }

    static final MemoryLayout fuse_module$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("name"),
        C_POINTER.withName("factory"),
        C_POINTER.withName("next"),
        C_POINTER.withName("so"),
        C_INT.withName("ctr"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("fuse_module");
    static final jdk.incubator.foreign.MemoryLayout fuse_module$struct$LAYOUT() { return fuse_module$struct$LAYOUT_; }

    static final MemoryLayout fuse_module$name$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_module$name$LAYOUT() { return fuse_module$name$LAYOUT_; }

    static final VarHandle fuse_module$name$VH_ = MemoryHandles.asAddressVarHandle(fuse_module$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("name")));
    static final java.lang.invoke.VarHandle fuse_module$name$VH() { return fuse_module$name$VH_; }

    static final FunctionDescriptor factory$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor factory$FUNC() { return factory$FUNC_; }

    static final MemoryLayout fuse_module$factory$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_module$factory$LAYOUT() { return fuse_module$factory$LAYOUT_; }

    static final VarHandle fuse_module$factory$VH_ = MemoryHandles.asAddressVarHandle(fuse_module$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("factory")));
    static final java.lang.invoke.VarHandle fuse_module$factory$VH() { return fuse_module$factory$VH_; }

    static final MemoryLayout fuse_module$next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_module$next$LAYOUT() { return fuse_module$next$LAYOUT_; }

    static final VarHandle fuse_module$next$VH_ = MemoryHandles.asAddressVarHandle(fuse_module$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("next")));
    static final java.lang.invoke.VarHandle fuse_module$next$VH() { return fuse_module$next$VH_; }

    static final MemoryLayout fuse_module$so$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_module$so$LAYOUT() { return fuse_module$so$LAYOUT_; }

    static final VarHandle fuse_module$so$VH_ = MemoryHandles.asAddressVarHandle(fuse_module$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("so")));
    static final java.lang.invoke.VarHandle fuse_module$so$VH() { return fuse_module$so$VH_; }

    static final MemoryLayout fuse_module$ctr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_module$ctr$LAYOUT() { return fuse_module$ctr$LAYOUT_; }

    static final VarHandle fuse_module$ctr$VH_ = fuse_module$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ctr"));
    static final java.lang.invoke.VarHandle fuse_module$ctr$VH() { return fuse_module$ctr$VH_; }

    static final FunctionDescriptor fuse_register_module$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_register_module$FUNC() { return fuse_register_module$FUNC_; }

    static final MethodHandle fuse_register_module$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_register_module",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_register_module$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_register_module$MH() { return fuse_register_module$MH_; }

    static final FunctionDescriptor fuse_setup$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_setup$FUNC() { return fuse_setup$FUNC_; }

    static final MethodHandle fuse_setup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_setup",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        fuse_setup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_setup$MH() { return fuse_setup$MH_; }

    static final FunctionDescriptor fuse_teardown$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_teardown$FUNC() { return fuse_teardown$FUNC_; }

    static final MethodHandle fuse_teardown$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_teardown",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_teardown$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_teardown$MH() { return fuse_teardown$MH_; }

    static final FunctionDescriptor fuse_read_cmd$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_read_cmd$FUNC() { return fuse_read_cmd$FUNC_; }

    static final MethodHandle fuse_read_cmd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_read_cmd",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        fuse_read_cmd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_read_cmd$MH() { return fuse_read_cmd$MH_; }

    static final FunctionDescriptor fuse_process_cmd$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_process_cmd$FUNC() { return fuse_process_cmd$FUNC_; }

    static final MethodHandle fuse_process_cmd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_process_cmd",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_process_cmd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_process_cmd$MH() { return fuse_process_cmd$MH_; }

    static final FunctionDescriptor fuse_loop_mt_proc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_loop_mt_proc$FUNC() { return fuse_loop_mt_proc$FUNC_; }

    static final MethodHandle fuse_loop_mt_proc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_loop_mt_proc",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_loop_mt_proc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_loop_mt_proc$MH() { return fuse_loop_mt_proc$MH_; }

    static final FunctionDescriptor fuse_loop_mt_proc$proc$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_loop_mt_proc$proc$FUNC() { return fuse_loop_mt_proc$proc$FUNC_; }

    static final FunctionDescriptor fuse_exited$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_exited$FUNC() { return fuse_exited$FUNC_; }

    static final MethodHandle fuse_exited$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_exited",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_exited$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_exited$MH() { return fuse_exited$MH_; }

    static final FunctionDescriptor fuse_set_getcontext_func$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_set_getcontext_func$FUNC() { return fuse_set_getcontext_func$FUNC_; }

    static final MethodHandle fuse_set_getcontext_func$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_set_getcontext_func",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_set_getcontext_func$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_set_getcontext_func$MH() { return fuse_set_getcontext_func$MH_; }

    static final FunctionDescriptor fuse_set_getcontext_func$func$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor fuse_set_getcontext_func$func$FUNC() { return fuse_set_getcontext_func$func$FUNC_; }

    static final FunctionDescriptor fuse_get_session$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_get_session$FUNC() { return fuse_get_session$FUNC_; }

    static final MethodHandle fuse_get_session$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_get_session",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        fuse_get_session$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_get_session$MH() { return fuse_get_session$MH_; }

    static final int FUSE_OPT_KEY_OPT() { return (int)-1L; }

    static final int FUSE_OPT_KEY_NONOPT() { return (int)-2L; }

    static final int FUSE_OPT_KEY_KEEP() { return (int)-3L; }

    static final int FUSE_OPT_KEY_DISCARD() { return (int)-4L; }

    static final MemorySegment __DARWIN_SUF_64_BIT_INO_T$SEGMENT_CONSTANT_ = CLinker.toCString("$INODE64");
    static final jdk.incubator.foreign.MemorySegment __DARWIN_SUF_64_BIT_INO_T() { return __DARWIN_SUF_64_BIT_INO_T$SEGMENT_CONSTANT_; }

    static final MemorySegment __DARWIN_SUF_1050$SEGMENT_CONSTANT_ = CLinker.toCString("$1050");
    static final jdk.incubator.foreign.MemorySegment __DARWIN_SUF_1050() { return __DARWIN_SUF_1050$SEGMENT_CONSTANT_; }

    static final MemorySegment __DARWIN_SUF_EXTSN$SEGMENT_CONSTANT_ = CLinker.toCString("$DARWIN_EXTSN");
    static final jdk.incubator.foreign.MemorySegment __DARWIN_SUF_EXTSN() { return __DARWIN_SUF_EXTSN$SEGMENT_CONSTANT_; }

    static final long __DARWIN_C_ANSI() { return 4096L; }

    static final long __DARWIN_C_FULL() { return 900000L; }

    static final long __DARWIN_C_LEVEL() { return 900000L; }

    static final MemoryAddress __DARWIN_NULL$ADDR_CONSTANT_ = MemoryAddress.ofLong(0L);
    static final jdk.incubator.foreign.MemoryAddress __DARWIN_NULL() { return __DARWIN_NULL$ADDR_CONSTANT_; }

    static final long USER_ADDR_NULL() { return 0L; }

    static final long INT64_MAX() { return 9223372036854775807L; }

    static final int INT8_MIN() { return (int)-128L; }

    static final int INT16_MIN() { return (int)-32768L; }

    static final int INT32_MIN() { return (int)-2147483648L; }

    static final long INT64_MIN() { return -9223372036854775808L; }

    static final int UINT32_MAX() { return (int)4294967295L; }

    static final long UINT64_MAX() { return -1L; }

    static final int INT_LEAST8_MIN() { return (int)-128L; }

    static final int INT_LEAST16_MIN() { return (int)-32768L; }

    static final int INT_LEAST32_MIN() { return (int)-2147483648L; }

    static final long INT_LEAST64_MIN() { return -9223372036854775808L; }

    static final int INT_LEAST8_MAX() { return (int)127L; }

    static final int INT_LEAST16_MAX() { return (int)32767L; }

    static final int INT_LEAST32_MAX() { return (int)2147483647L; }

    static final long INT_LEAST64_MAX() { return 9223372036854775807L; }

    static final int UINT_LEAST8_MAX() { return (int)255L; }

    static final int UINT_LEAST16_MAX() { return (int)65535L; }

    static final int UINT_LEAST32_MAX() { return (int)4294967295L; }

    static final long UINT_LEAST64_MAX() { return -1L; }

    static final int INT_FAST8_MIN() { return (int)-128L; }

    static final int INT_FAST16_MIN() { return (int)-32768L; }

    static final int INT_FAST32_MIN() { return (int)-2147483648L; }

    static final long INT_FAST64_MIN() { return -9223372036854775808L; }

    static final int INT_FAST8_MAX() { return (int)127L; }

    static final int INT_FAST16_MAX() { return (int)32767L; }

    static final int INT_FAST32_MAX() { return (int)2147483647L; }

    static final long INT_FAST64_MAX() { return 9223372036854775807L; }

    static final int UINT_FAST8_MAX() { return (int)255L; }

    static final int UINT_FAST16_MAX() { return (int)65535L; }

    static final int UINT_FAST32_MAX() { return (int)4294967295L; }

    static final long UINT_FAST64_MAX() { return -1L; }

    static final long INTPTR_MAX() { return 9223372036854775807L; }

    static final long INTPTR_MIN() { return -9223372036854775808L; }

    static final long UINTPTR_MAX() { return -1L; }

    static final long INTMAX_MAX() { return 9223372036854775807L; }

    static final long UINTMAX_MAX() { return -1L; }

    static final long INTMAX_MIN() { return -9223372036854775808L; }

    static final long PTRDIFF_MIN() { return -9223372036854775808L; }

    static final long PTRDIFF_MAX() { return 9223372036854775807L; }

    static final long SIZE_MAX() { return -1L; }

    static final long RSIZE_MAX() { return 9223372036854775807L; }

    static final int WCHAR_MAX() { return (int)2147483647L; }

    static final int WCHAR_MIN() { return (int)-2147483648L; }

    static final int WINT_MIN() { return (int)-2147483648L; }

    static final int WINT_MAX() { return (int)2147483647L; }

    static final int SIG_ATOMIC_MIN() { return (int)-2147483648L; }

    static final int SIG_ATOMIC_MAX() { return (int)2147483647L; }

    static final int __DARWIN_BYTE_ORDER() { return (int)1234L; }

    static final int LITTLE_ENDIAN() { return (int)1234L; }

    static final int BIG_ENDIAN() { return (int)4321L; }

    static final int PDP_ENDIAN() { return (int)3412L; }

    static final int BYTE_ORDER() { return (int)1234L; }

    static final int __MAC_OS_X_VERSION_MIN_REQUIRED() { return (int)101500L; }

    static final int __MAC_OS_X_VERSION_MAX_ALLOWED() { return (int)110100L; }

    static final long __DARWIN_NFDBITS() { return 32L; }

    static final int NBBY() { return (int)8L; }

    static final long NFDBITS() { return 32L; }

    static final int FD_SETSIZE() { return (int)1024L; }

    static final int FUSE_VERSION() { return (int)29L; }

    static final int S_ISTXT() { return (int)512L; }

    static final int S_IREAD() { return (int)256L; }

    static final int S_IWRITE() { return (int)128L; }

    static final int S_IEXEC() { return (int)64L; }

    static final int ACCESSPERMS() { return (int)511L; }

    static final int ALLPERMS() { return (int)4095L; }

    static final int DEFFILEMODE() { return (int)438L; }

    static final int SF_SYNTHETIC() { return (int)3221225472L; }

    static final int UTIME_NOW() { return (int)-1L; }

    static final int UTIME_OMIT() { return (int)-2L; }

    static final int FUSE_CAP_ASYNC_READ() { return (int)1L; }

    static final int FUSE_CAP_POSIX_LOCKS() { return (int)2L; }

    static final int FUSE_CAP_ATOMIC_O_TRUNC() { return (int)8L; }

    static final int FUSE_CAP_EXPORT_SUPPORT() { return (int)16L; }

    static final int FUSE_CAP_BIG_WRITES() { return (int)32L; }

    static final int FUSE_CAP_DONT_MASK() { return (int)64L; }

    static final int FUSE_CAP_SPLICE_WRITE() { return (int)128L; }

    static final int FUSE_CAP_SPLICE_MOVE() { return (int)256L; }

    static final int FUSE_CAP_SPLICE_READ() { return (int)512L; }

    static final int FUSE_CAP_FLOCK_LOCKS() { return (int)1024L; }

    static final int FUSE_CAP_IOCTL_DIR() { return (int)2048L; }

    static final int FUSE_CAP_RENAME_SWAP() { return (int)33554432L; }

    static final int FUSE_CAP_RENAME_EXCL() { return (int)67108864L; }

    static final int FUSE_CAP_ALLOCATE() { return (int)134217728L; }

    static final int FUSE_CAP_EXCHANGE_DATA() { return (int)268435456L; }

    static final int FUSE_CAP_CASE_INSENSITIVE() { return (int)536870912L; }

    static final int FUSE_CAP_VOL_RENAME() { return (int)1073741824L; }

    static final int FUSE_CAP_XTIMES() { return (int)-2147483648L; }

    static final int FUSE_IOCTL_COMPAT() { return (int)1L; }

    static final int FUSE_IOCTL_UNRESTRICTED() { return (int)2L; }

    static final int FUSE_IOCTL_RETRY() { return (int)4L; }

    static final int FUSE_IOCTL_DIR() { return (int)16L; }

    static final int O_FSYNC() { return (int)128L; }

    static final int AT_FDCWD() { return (int)-2L; }

    static final int FAPPEND() { return (int)8L; }

    static final int FASYNC() { return (int)64L; }

    static final int FFSYNC() { return (int)128L; }

    static final int FFDSYNC() { return (int)4194304L; }

    static final int FNONBLOCK() { return (int)4L; }

    static final int FNDELAY() { return (int)4L; }

    static final int O_NDELAY() { return (int)4L; }

    static final int CPF_MASK() { return (int)3L; }

    static final int O_POPUP() { return (int)2147483648L; }

    static final int FILESEC_GUID() { return (int)3L; }

    static final MemoryAddress _FILESEC_UNSET_PROPERTY$ADDR_CONSTANT_ = MemoryAddress.ofLong(0L);
    static final jdk.incubator.foreign.MemoryAddress _FILESEC_UNSET_PROPERTY() { return _FILESEC_UNSET_PROPERTY$ADDR_CONSTANT_; }

    static final MemoryAddress _FILESEC_REMOVE_ACL$ADDR_CONSTANT_ = MemoryAddress.ofLong(1L);
    static final jdk.incubator.foreign.MemoryAddress _FILESEC_REMOVE_ACL() { return _FILESEC_REMOVE_ACL$ADDR_CONSTANT_; }

    static final int __DARWIN_WCHAR_MAX() { return (int)2147483647L; }

    static final int __DARWIN_WCHAR_MIN() { return (int)-2147483648L; }

    static final int __DARWIN_WEOF() { return (int)-1L; }

    static final MemoryAddress NULL$ADDR_CONSTANT_ = MemoryAddress.ofLong(0L);
    static final jdk.incubator.foreign.MemoryAddress NULL() { return NULL$ADDR_CONSTANT_; }

    static final int CLOCK_REALTIME() { return (int)0L; }

    static final int CLOCK_MONOTONIC() { return (int)6L; }

    static final int CLOCK_MONOTONIC_RAW() { return (int)4L; }

    static final int CLOCK_MONOTONIC_RAW_APPROX() { return (int)5L; }

    static final int CLOCK_UPTIME_RAW() { return (int)8L; }

    static final int CLOCK_UPTIME_RAW_APPROX() { return (int)9L; }

    static final int CLOCK_PROCESS_CPUTIME_ID() { return (int)12L; }

    static final int CLOCK_THREAD_CPUTIME_ID() { return (int)16L; }

    static final int ARG_MAX() { return (int)1048576L; }

    static final int GID_MAX() { return (int)2147483647L; }

    static final int UID_MAX() { return (int)2147483647L; }

    static final int MAXUPRC() { return (int)266L; }

    static final int NCARGS() { return (int)1048576L; }

    static final int NGROUPS() { return (int)16L; }

    static final long __DARWIN_ALIGNBYTES() { return 7L; }

    static final long __DARWIN_ALIGNBYTES32() { return 3L; }

    static final long ALIGNBYTES() { return 7L; }

    static final int PGOFSET() { return (int)4095L; }

    static final int MAXPHYS() { return (int)131072L; }

    static final int MSIZE() { return (int)256L; }

    static final int MCLBYTES() { return (int)2048L; }

    static final int MBIGCLBYTES() { return (int)4096L; }

    static final int M16KCLBYTES() { return (int)16384L; }

    static final int MCLOFSET() { return (int)2047L; }

    static final int NMBCLUSTERS() { return (int)512L; }

    static final int CLK_TCK() { return (int)100L; }

    static final int SCHAR_MIN() { return (int)-128L; }

    static final int CHAR_MIN() { return (int)-128L; }

    static final int SHRT_MIN() { return (int)-32768L; }

    static final int UINT_MAX() { return (int)4294967295L; }

    static final int INT_MIN() { return (int)-2147483648L; }

    static final long ULONG_MAX() { return -1L; }

    static final long LONG_MAX() { return 9223372036854775807L; }

    static final long LONG_MIN() { return -9223372036854775808L; }

    static final long ULLONG_MAX() { return -1L; }

    static final long LLONG_MAX() { return 9223372036854775807L; }

    static final long LLONG_MIN() { return -9223372036854775808L; }

    static final long SSIZE_MAX() { return 9223372036854775807L; }

    static final long SIZE_T_MAX() { return -1L; }

    static final long UQUAD_MAX() { return -1L; }

    static final long QUAD_MAX() { return 9223372036854775807L; }

    static final long QUAD_MIN() { return -9223372036854775808L; }

    static final int _POSIX_RE_DUP_MAX() { return (int)255L; }

    static final long OFF_MIN() { return -9223372036854775808L; }

    static final long OFF_MAX() { return 9223372036854775807L; }

    static final int NSIG() { return (int)32L; }

    static final int SIGIOT() { return (int)6L; }

    static final MemoryAddress SIG_DFL$ADDR_CONSTANT_ = MemoryAddress.ofLong(0L);
    static final jdk.incubator.foreign.MemoryAddress SIG_DFL() { return SIG_DFL$ADDR_CONSTANT_; }

    static final MemoryAddress SIG_IGN$ADDR_CONSTANT_ = MemoryAddress.ofLong(1L);
    static final jdk.incubator.foreign.MemoryAddress SIG_IGN() { return SIG_IGN$ADDR_CONSTANT_; }

    static final MemoryAddress SIG_HOLD$ADDR_CONSTANT_ = MemoryAddress.ofLong(5L);
    static final jdk.incubator.foreign.MemoryAddress SIG_HOLD() { return SIG_HOLD$ADDR_CONSTANT_; }

    static final MemoryAddress SIG_ERR$ADDR_CONSTANT_ = MemoryAddress.ofLong(-1L);
    static final jdk.incubator.foreign.MemoryAddress SIG_ERR() { return SIG_ERR$ADDR_CONSTANT_; }

    static final int _X86_INSTRUCTION_STATE_MAX_INSN_BYTES() { return (int)2380L; }

    static final int SA_USERSPACE_MASK() { return (int)127L; }

    static final int SV_ONSTACK() { return (int)1L; }

    static final int SV_INTERRUPT() { return (int)2L; }

    static final int SV_RESETHAND() { return (int)4L; }

    static final int SV_NODEFER() { return (int)16L; }

    static final int SV_NOCLDSTOP() { return (int)8L; }

    static final int SV_SIGINFO() { return (int)64L; }

    static final MemoryAddress BADSIG$ADDR_CONSTANT_ = MemoryAddress.ofLong(-1L);
    static final jdk.incubator.foreign.MemoryAddress BADSIG() { return BADSIG$ADDR_CONSTANT_; }

    static final long NBPW() { return 4L; }

    static final int NODEV() { return (int)-1L; }

    static final int CLBYTES() { return (int)4096L; }

    static final int CLOFSET() { return (int)4095L; }

    static final int CLOFF() { return (int)4095L; }

    static final int CLSHIFT() { return (int)12L; }

    static final int CBQSIZE() { return (int)8L; }

    static final long CBSIZE() { return 48L; }

    static final int CROUND() { return (int)63L; }

    static final int MAXBSIZE() { return (int)1048576L; }

    static final int MAXPHYSIO() { return (int)131072L; }

    static final int MAXPHYSIO_WIRED() { return (int)16777216L; }

    static final int MAXPATHLEN() { return (int)1024L; }

    static final int FSCALE() { return (int)2048L; }

    static final int AUDIT_RECORD_MAGIC() { return (int)2190085915L; }

    static final int MAXAUDITDATA() { return (int)32767L; }

    static final int MAX_AUDIT_RECORD_SIZE() { return (int)32767L; }

    static final int MIN_AUDIT_FILE_SIZE() { return (int)524288L; }

    static final MemorySegment AUDITDEV_FILENAME$SEGMENT_CONSTANT_ = CLinker.toCString("audit");
    static final jdk.incubator.foreign.MemorySegment AUDITDEV_FILENAME() { return AUDITDEV_FILENAME$SEGMENT_CONSTANT_; }

    static final int AU_DEFAUDITID() { return (int)4294967295L; }

    static final int AU_ASSIGN_ASID() { return (int)-1L; }

    static final byte AT_IPC_MSG() { return (byte)1L; }

    static final byte AT_IPC_SEM() { return (byte)2L; }

    static final byte AT_IPC_SHM() { return (byte)3L; }

    static final int AUC_DISABLED() { return (int)-1L; }

    static final int AQ_BUFSZ() { return (int)32767L; }

    static final byte AUDIT_CTLMODE_NORMAL() { return (byte)1L; }

    static final byte AUDIT_CTLMODE_EXTERNAL() { return (byte)2L; }

    static final byte AUDIT_EXPIRE_OP_AND() { return (byte)0L; }

    static final byte AUDIT_EXPIRE_OP_OR() { return (byte)1L; }

    static final int MACH_PORT_DEAD() { return (int)4294967295L; }

    static final int MACH_PORT_RIGHT_SEND() { return (int)0L; }

    static final int MACH_PORT_RIGHT_RECEIVE() { return (int)1L; }

    static final int MACH_PORT_RIGHT_SEND_ONCE() { return (int)2L; }

    static final int MACH_PORT_RIGHT_PORT_SET() { return (int)3L; }

    static final int MACH_PORT_RIGHT_DEAD_NAME() { return (int)4L; }

    static final int MACH_PORT_RIGHT_LABELH() { return (int)5L; }

    static final int MACH_PORT_RIGHT_NUMBER() { return (int)6L; }

    static final int MACH_PORT_TYPE_NONE() { return (int)0L; }

    static final int MACH_PORT_TYPE_SEND() { return (int)65536L; }

    static final int MACH_PORT_TYPE_RECEIVE() { return (int)131072L; }

    static final int MACH_PORT_TYPE_SEND_ONCE() { return (int)262144L; }

    static final int MACH_PORT_TYPE_PORT_SET() { return (int)524288L; }

    static final int MACH_PORT_TYPE_DEAD_NAME() { return (int)1048576L; }

    static final int MACH_PORT_TYPE_LABELH() { return (int)2097152L; }

    static final int MACH_PORT_TYPE_SEND_RECEIVE() { return (int)196608L; }

    static final int MACH_PORT_TYPE_SEND_RIGHTS() { return (int)327680L; }

    static final int MACH_PORT_TYPE_PORT_RIGHTS() { return (int)458752L; }

    static final int MACH_PORT_TYPE_PORT_OR_DEAD() { return (int)1507328L; }

    static final int MACH_PORT_TYPE_ALL_RIGHTS() { return (int)2031616L; }

    static final int MACH_PORT_TYPE_DNREQUEST() { return (int)2147483648L; }

    static final int MACH_PORT_QLIMIT_ZERO() { return (int)0L; }

    static final int MACH_PORT_QLIMIT_BASIC() { return (int)5L; }

    static final int MACH_PORT_QLIMIT_SMALL() { return (int)16L; }

    static final int MACH_PORT_QLIMIT_LARGE() { return (int)1024L; }

    static final int MACH_PORT_QLIMIT_KERNEL() { return (int)65534L; }

    static final int MACH_PORT_QLIMIT_MIN() { return (int)0L; }

    static final int MACH_PORT_QLIMIT_DEFAULT() { return (int)5L; }

    static final int MACH_PORT_QLIMIT_MAX() { return (int)1024L; }

    static final int MACH_PORT_LIMITS_INFO_COUNT() { return (int)1L; }

    static final int MACH_PORT_RECEIVE_STATUS_COUNT() { return (int)10L; }

    static final int MACH_PORT_INFO_EXT_COUNT() { return (int)17L; }

    static final int MAX_FATAL_kGUARD_EXC_CODE() { return (int)64L; }

    static final long MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP() { return 72057594037927936L; }

    static final long MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT() { return 144115188075855872L; }

    static final long MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER() { return 288230376151711744L; }

    static final long MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR() { return 576460752303423488L; }

    static final long MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA() { return 1152921504606846976L; }

    static final long MPG_FLAGS_STRICT_REPLY_MASK() { return -72057594037927936L; }

    static final MemoryAddress NOCRED$ADDR_CONSTANT_ = MemoryAddress.ofLong(0L);
    static final jdk.incubator.foreign.MemoryAddress NOCRED() { return NOCRED$ADDR_CONSTANT_; }

    static final MemoryAddress FSCRED$ADDR_CONSTANT_ = MemoryAddress.ofLong(-1L);
    static final jdk.incubator.foreign.MemoryAddress FSCRED() { return FSCRED$ADDR_CONSTANT_; }

    static final int ATTR_CMN_RETURNED_ATTRS() { return (int)2147483648L; }

    static final int ATTR_CMN_VALIDMASK() { return (int)4294967295L; }

    static final int ATTR_VOL_INFO() { return (int)2147483648L; }

    static final int ATTR_VOL_VALIDMASK() { return (int)4027056127L; }

    static final int ATTR_VOL_SETMASK() { return (int)2147491840L; }

    static final int ATTR_FORK_RESERVED() { return (int)4294967295L; }

    static final int ATTR_BULK_REQUIRED() { return (int)2147483649L; }

    static final int SRCHFS_NEGATEPARAMS() { return (int)2147483648L; }

    static final int SRCHFS_VALIDOPTIONSMASK() { return (int)2147483903L; }

    static final int FST_EOF() { return (int)-1L; }

    static final int MNAMELEN() { return (int)1024L; }

    static final int MNT_STRICTATIME() { return (int)2147483648L; }

    static final int MNT_UNKNOWNPERMISSIONS() { return (int)2097152L; }

    static final int MNT_VISFLAGMASK() { return (int)3622893567L; }

    static final int MNT_CMDFLAGS() { return (int)983040L; }

    static final int VFS_CTL_STATFS() { return (int)65547L; }

    static final int NFS_MAX_FH_SIZE() { return (int)128L; }

}

