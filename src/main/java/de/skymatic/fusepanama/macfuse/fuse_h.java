// Generated by jextract

package de.skymatic.fusepanama.macfuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
public final class fuse_h extends fuse_h_0 {

    /* package-private */ fuse_h() {}
    public static @C("int") int __WORDSIZE() {
        return fuse_h_constants_0.__WORDSIZE();
    }
    public static @C("int") int __DARWIN_ONLY_64_BIT_INO_T() {
        return fuse_h_constants_0.__DARWIN_ONLY_64_BIT_INO_T();
    }
    public static @C("int") int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return fuse_h_constants_0.__DARWIN_ONLY_UNIX_CONFORMANCE();
    }
    public static @C("int") int __DARWIN_ONLY_VERS_1050() {
        return fuse_h_constants_0.__DARWIN_ONLY_VERS_1050();
    }
    public static @C("int") int __DARWIN_UNIX03() {
        return fuse_h_constants_0.__DARWIN_UNIX03();
    }
    public static @C("int") int __DARWIN_64_BIT_INO_T() {
        return fuse_h_constants_0.__DARWIN_64_BIT_INO_T();
    }
    public static @C("int") int __DARWIN_VERS_1050() {
        return fuse_h_constants_0.__DARWIN_VERS_1050();
    }
    public static @C("int") int __DARWIN_NON_CANCELABLE() {
        return fuse_h_constants_0.__DARWIN_NON_CANCELABLE();
    }
    public static @C("int") int __STDC_WANT_LIB_EXT1__() {
        return fuse_h_constants_0.__STDC_WANT_LIB_EXT1__();
    }
    public static @C("int") int __DARWIN_NO_LONG_LONG() {
        return fuse_h_constants_0.__DARWIN_NO_LONG_LONG();
    }
    public static @C("int") int _DARWIN_FEATURE_64_BIT_INODE() {
        return fuse_h_constants_0._DARWIN_FEATURE_64_BIT_INODE();
    }
    public static @C("int") int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return fuse_h_constants_0._DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE();
    }
    public static @C("int") int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return fuse_h_constants_0._DARWIN_FEATURE_UNIX_CONFORMANCE();
    }
    public static @C("int") int __PTHREAD_SIZE__() {
        return fuse_h_constants_0.__PTHREAD_SIZE__();
    }
    public static @C("int") int __PTHREAD_ATTR_SIZE__() {
        return fuse_h_constants_0.__PTHREAD_ATTR_SIZE__();
    }
    public static @C("int") int __PTHREAD_MUTEXATTR_SIZE__() {
        return fuse_h_constants_0.__PTHREAD_MUTEXATTR_SIZE__();
    }
    public static @C("int") int __PTHREAD_MUTEX_SIZE__() {
        return fuse_h_constants_0.__PTHREAD_MUTEX_SIZE__();
    }
    public static @C("int") int __PTHREAD_CONDATTR_SIZE__() {
        return fuse_h_constants_0.__PTHREAD_CONDATTR_SIZE__();
    }
    public static @C("int") int __PTHREAD_COND_SIZE__() {
        return fuse_h_constants_0.__PTHREAD_COND_SIZE__();
    }
    public static @C("int") int __PTHREAD_ONCE_SIZE__() {
        return fuse_h_constants_0.__PTHREAD_ONCE_SIZE__();
    }
    public static @C("int") int __PTHREAD_RWLOCK_SIZE__() {
        return fuse_h_constants_0.__PTHREAD_RWLOCK_SIZE__();
    }
    public static @C("int") int __PTHREAD_RWLOCKATTR_SIZE__() {
        return fuse_h_constants_0.__PTHREAD_RWLOCKATTR_SIZE__();
    }
    public static @C("int") int INT8_MAX() {
        return fuse_h_constants_0.INT8_MAX();
    }
    public static @C("int") int INT16_MAX() {
        return fuse_h_constants_0.INT16_MAX();
    }
    public static @C("int") int INT32_MAX() {
        return fuse_h_constants_0.INT32_MAX();
    }
    public static @C("int") int UINT8_MAX() {
        return fuse_h_constants_0.UINT8_MAX();
    }
    public static @C("int") int UINT16_MAX() {
        return fuse_h_constants_0.UINT16_MAX();
    }
    public static @C("int") int _QUAD_HIGHWORD() {
        return fuse_h_constants_0._QUAD_HIGHWORD();
    }
    public static @C("int") int _QUAD_LOWWORD() {
        return fuse_h_constants_0._QUAD_LOWWORD();
    }
    public static @C("int") int __DARWIN_LITTLE_ENDIAN() {
        return fuse_h_constants_0.__DARWIN_LITTLE_ENDIAN();
    }
    public static @C("int") int __DARWIN_BIG_ENDIAN() {
        return fuse_h_constants_0.__DARWIN_BIG_ENDIAN();
    }
    public static @C("int") int __DARWIN_PDP_ENDIAN() {
        return fuse_h_constants_0.__DARWIN_PDP_ENDIAN();
    }
    public static @C("int") int __API_TO_BE_DEPRECATED() {
        return fuse_h_constants_0.__API_TO_BE_DEPRECATED();
    }
    public static @C("int") int __MAC_10_0() {
        return fuse_h_constants_0.__MAC_10_0();
    }
    public static @C("int") int __MAC_10_1() {
        return fuse_h_constants_0.__MAC_10_1();
    }
    public static @C("int") int __MAC_10_2() {
        return fuse_h_constants_0.__MAC_10_2();
    }
    public static @C("int") int __MAC_10_3() {
        return fuse_h_constants_0.__MAC_10_3();
    }
    public static @C("int") int __MAC_10_4() {
        return fuse_h_constants_0.__MAC_10_4();
    }
    public static @C("int") int __MAC_10_5() {
        return fuse_h_constants_0.__MAC_10_5();
    }
    public static @C("int") int __MAC_10_6() {
        return fuse_h_constants_0.__MAC_10_6();
    }
    public static @C("int") int __MAC_10_7() {
        return fuse_h_constants_0.__MAC_10_7();
    }
    public static @C("int") int __MAC_10_8() {
        return fuse_h_constants_0.__MAC_10_8();
    }
    public static @C("int") int __MAC_10_9() {
        return fuse_h_constants_0.__MAC_10_9();
    }
    public static @C("int") int __MAC_10_10() {
        return fuse_h_constants_0.__MAC_10_10();
    }
    public static @C("int") int __MAC_10_10_2() {
        return fuse_h_constants_0.__MAC_10_10_2();
    }
    public static @C("int") int __MAC_10_10_3() {
        return fuse_h_constants_0.__MAC_10_10_3();
    }
    public static @C("int") int __MAC_10_11() {
        return fuse_h_constants_0.__MAC_10_11();
    }
    public static @C("int") int __MAC_10_11_2() {
        return fuse_h_constants_0.__MAC_10_11_2();
    }
    public static @C("int") int __MAC_10_11_3() {
        return fuse_h_constants_0.__MAC_10_11_3();
    }
    public static @C("int") int __MAC_10_11_4() {
        return fuse_h_constants_0.__MAC_10_11_4();
    }
    public static @C("int") int __MAC_10_12() {
        return fuse_h_constants_0.__MAC_10_12();
    }
    public static @C("int") int __MAC_10_12_1() {
        return fuse_h_constants_0.__MAC_10_12_1();
    }
    public static @C("int") int __MAC_10_12_2() {
        return fuse_h_constants_0.__MAC_10_12_2();
    }
    public static @C("int") int __MAC_10_12_4() {
        return fuse_h_constants_0.__MAC_10_12_4();
    }
    public static @C("int") int __MAC_10_13() {
        return fuse_h_constants_0.__MAC_10_13();
    }
    public static @C("int") int __MAC_10_13_1() {
        return fuse_h_constants_0.__MAC_10_13_1();
    }
    public static @C("int") int __MAC_10_13_2() {
        return fuse_h_constants_0.__MAC_10_13_2();
    }
    public static @C("int") int __MAC_10_13_4() {
        return fuse_h_constants_0.__MAC_10_13_4();
    }
    public static @C("int") int __MAC_10_14() {
        return fuse_h_constants_0.__MAC_10_14();
    }
    public static @C("int") int __MAC_10_14_1() {
        return fuse_h_constants_0.__MAC_10_14_1();
    }
    public static @C("int") int __MAC_10_14_4() {
        return fuse_h_constants_0.__MAC_10_14_4();
    }
    public static @C("int") int __MAC_10_14_6() {
        return fuse_h_constants_0.__MAC_10_14_6();
    }
    public static @C("int") int __MAC_10_15() {
        return fuse_h_constants_0.__MAC_10_15();
    }
    public static @C("int") int __MAC_10_15_1() {
        return fuse_h_constants_0.__MAC_10_15_1();
    }
    public static @C("int") int __MAC_10_15_4() {
        return fuse_h_constants_0.__MAC_10_15_4();
    }
    public static @C("int") int __MAC_10_16() {
        return fuse_h_constants_0.__MAC_10_16();
    }
    public static @C("int") int __MAC_11_0() {
        return fuse_h_constants_0.__MAC_11_0();
    }
    public static @C("int") int __MAC_11_1() {
        return fuse_h_constants_0.__MAC_11_1();
    }
    public static @C("int") int __IPHONE_2_0() {
        return fuse_h_constants_0.__IPHONE_2_0();
    }
    public static @C("int") int __IPHONE_2_1() {
        return fuse_h_constants_0.__IPHONE_2_1();
    }
    public static @C("int") int __IPHONE_2_2() {
        return fuse_h_constants_0.__IPHONE_2_2();
    }
    public static @C("int") int __IPHONE_3_0() {
        return fuse_h_constants_0.__IPHONE_3_0();
    }
    public static @C("int") int __IPHONE_3_1() {
        return fuse_h_constants_0.__IPHONE_3_1();
    }
    public static @C("int") int __IPHONE_3_2() {
        return fuse_h_constants_0.__IPHONE_3_2();
    }
    public static @C("int") int __IPHONE_4_0() {
        return fuse_h_constants_0.__IPHONE_4_0();
    }
    public static @C("int") int __IPHONE_4_1() {
        return fuse_h_constants_0.__IPHONE_4_1();
    }
    public static @C("int") int __IPHONE_4_2() {
        return fuse_h_constants_0.__IPHONE_4_2();
    }
    public static @C("int") int __IPHONE_4_3() {
        return fuse_h_constants_0.__IPHONE_4_3();
    }
    public static @C("int") int __IPHONE_5_0() {
        return fuse_h_constants_0.__IPHONE_5_0();
    }
    public static @C("int") int __IPHONE_5_1() {
        return fuse_h_constants_0.__IPHONE_5_1();
    }
    public static @C("int") int __IPHONE_6_0() {
        return fuse_h_constants_0.__IPHONE_6_0();
    }
    public static @C("int") int __IPHONE_6_1() {
        return fuse_h_constants_0.__IPHONE_6_1();
    }
    public static @C("int") int __IPHONE_7_0() {
        return fuse_h_constants_0.__IPHONE_7_0();
    }
    public static @C("int") int __IPHONE_7_1() {
        return fuse_h_constants_0.__IPHONE_7_1();
    }
    public static @C("int") int __IPHONE_8_0() {
        return fuse_h_constants_0.__IPHONE_8_0();
    }
    public static @C("int") int __IPHONE_8_1() {
        return fuse_h_constants_0.__IPHONE_8_1();
    }
    public static @C("int") int __IPHONE_8_2() {
        return fuse_h_constants_0.__IPHONE_8_2();
    }
    public static @C("int") int __IPHONE_8_3() {
        return fuse_h_constants_0.__IPHONE_8_3();
    }
    public static @C("int") int __IPHONE_8_4() {
        return fuse_h_constants_0.__IPHONE_8_4();
    }
    public static @C("int") int __IPHONE_9_0() {
        return fuse_h_constants_0.__IPHONE_9_0();
    }
    public static @C("int") int __IPHONE_9_1() {
        return fuse_h_constants_0.__IPHONE_9_1();
    }
    public static @C("int") int __IPHONE_9_2() {
        return fuse_h_constants_0.__IPHONE_9_2();
    }
    public static @C("int") int __IPHONE_9_3() {
        return fuse_h_constants_0.__IPHONE_9_3();
    }
    public static @C("int") int __IPHONE_10_0() {
        return fuse_h_constants_0.__IPHONE_10_0();
    }
    public static @C("int") int __IPHONE_10_1() {
        return fuse_h_constants_0.__IPHONE_10_1();
    }
    public static @C("int") int __IPHONE_10_2() {
        return fuse_h_constants_0.__IPHONE_10_2();
    }
    public static @C("int") int __IPHONE_10_3() {
        return fuse_h_constants_0.__IPHONE_10_3();
    }
    public static @C("int") int __IPHONE_11_0() {
        return fuse_h_constants_0.__IPHONE_11_0();
    }
    public static @C("int") int __IPHONE_11_1() {
        return fuse_h_constants_0.__IPHONE_11_1();
    }
    public static @C("int") int __IPHONE_11_2() {
        return fuse_h_constants_0.__IPHONE_11_2();
    }
    public static @C("int") int __IPHONE_11_3() {
        return fuse_h_constants_0.__IPHONE_11_3();
    }
    public static @C("int") int __IPHONE_11_4() {
        return fuse_h_constants_0.__IPHONE_11_4();
    }
    public static @C("int") int __IPHONE_12_0() {
        return fuse_h_constants_0.__IPHONE_12_0();
    }
    public static @C("int") int __IPHONE_12_1() {
        return fuse_h_constants_0.__IPHONE_12_1();
    }
    public static @C("int") int __IPHONE_12_2() {
        return fuse_h_constants_0.__IPHONE_12_2();
    }
    public static @C("int") int __IPHONE_12_3() {
        return fuse_h_constants_0.__IPHONE_12_3();
    }
    public static @C("int") int __IPHONE_12_4() {
        return fuse_h_constants_0.__IPHONE_12_4();
    }
    public static @C("int") int __IPHONE_13_0() {
        return fuse_h_constants_0.__IPHONE_13_0();
    }
    public static @C("int") int __IPHONE_13_1() {
        return fuse_h_constants_0.__IPHONE_13_1();
    }
    public static @C("int") int __IPHONE_13_2() {
        return fuse_h_constants_0.__IPHONE_13_2();
    }
    public static @C("int") int __IPHONE_13_3() {
        return fuse_h_constants_0.__IPHONE_13_3();
    }
    public static @C("int") int __IPHONE_13_4() {
        return fuse_h_constants_0.__IPHONE_13_4();
    }
    public static @C("int") int __IPHONE_13_5() {
        return fuse_h_constants_0.__IPHONE_13_5();
    }
    public static @C("int") int __IPHONE_13_6() {
        return fuse_h_constants_0.__IPHONE_13_6();
    }
    public static @C("int") int __IPHONE_13_7() {
        return fuse_h_constants_0.__IPHONE_13_7();
    }
    public static @C("int") int __IPHONE_14_0() {
        return fuse_h_constants_0.__IPHONE_14_0();
    }
    public static @C("int") int __IPHONE_14_1() {
        return fuse_h_constants_0.__IPHONE_14_1();
    }
    public static @C("int") int __IPHONE_14_2() {
        return fuse_h_constants_0.__IPHONE_14_2();
    }
    public static @C("int") int __IPHONE_14_3() {
        return fuse_h_constants_0.__IPHONE_14_3();
    }
    public static @C("int") int __TVOS_9_0() {
        return fuse_h_constants_0.__TVOS_9_0();
    }
    public static @C("int") int __TVOS_9_1() {
        return fuse_h_constants_0.__TVOS_9_1();
    }
    public static @C("int") int __TVOS_9_2() {
        return fuse_h_constants_0.__TVOS_9_2();
    }
    public static @C("int") int __TVOS_10_0() {
        return fuse_h_constants_0.__TVOS_10_0();
    }
    public static @C("int") int __TVOS_10_0_1() {
        return fuse_h_constants_0.__TVOS_10_0_1();
    }
    public static @C("int") int __TVOS_10_1() {
        return fuse_h_constants_0.__TVOS_10_1();
    }
    public static @C("int") int __TVOS_10_2() {
        return fuse_h_constants_0.__TVOS_10_2();
    }
    public static @C("int") int __TVOS_11_0() {
        return fuse_h_constants_0.__TVOS_11_0();
    }
    public static @C("int") int __TVOS_11_1() {
        return fuse_h_constants_0.__TVOS_11_1();
    }
    public static @C("int") int __TVOS_11_2() {
        return fuse_h_constants_0.__TVOS_11_2();
    }
    public static @C("int") int __TVOS_11_3() {
        return fuse_h_constants_0.__TVOS_11_3();
    }
    public static @C("int") int __TVOS_11_4() {
        return fuse_h_constants_0.__TVOS_11_4();
    }
    public static @C("int") int __TVOS_12_0() {
        return fuse_h_constants_0.__TVOS_12_0();
    }
    public static @C("int") int __TVOS_12_1() {
        return fuse_h_constants_0.__TVOS_12_1();
    }
    public static @C("int") int __TVOS_12_2() {
        return fuse_h_constants_0.__TVOS_12_2();
    }
    public static @C("int") int __TVOS_12_3() {
        return fuse_h_constants_0.__TVOS_12_3();
    }
    public static @C("int") int __TVOS_12_4() {
        return fuse_h_constants_0.__TVOS_12_4();
    }
    public static @C("int") int __TVOS_13_0() {
        return fuse_h_constants_0.__TVOS_13_0();
    }
    public static @C("int") int __TVOS_13_2() {
        return fuse_h_constants_0.__TVOS_13_2();
    }
    public static @C("int") int __TVOS_13_3() {
        return fuse_h_constants_0.__TVOS_13_3();
    }
    public static @C("int") int __TVOS_13_4() {
        return fuse_h_constants_0.__TVOS_13_4();
    }
    public static @C("int") int __TVOS_14_0() {
        return fuse_h_constants_0.__TVOS_14_0();
    }
    public static @C("int") int __TVOS_14_1() {
        return fuse_h_constants_0.__TVOS_14_1();
    }
    public static @C("int") int __TVOS_14_2() {
        return fuse_h_constants_0.__TVOS_14_2();
    }
    public static @C("int") int __TVOS_14_3() {
        return fuse_h_constants_0.__TVOS_14_3();
    }
    public static @C("int") int __WATCHOS_1_0() {
        return fuse_h_constants_0.__WATCHOS_1_0();
    }
    public static @C("int") int __WATCHOS_2_0() {
        return fuse_h_constants_0.__WATCHOS_2_0();
    }
    public static @C("int") int __WATCHOS_2_1() {
        return fuse_h_constants_0.__WATCHOS_2_1();
    }
    public static @C("int") int __WATCHOS_2_2() {
        return fuse_h_constants_0.__WATCHOS_2_2();
    }
    public static @C("int") int __WATCHOS_3_0() {
        return fuse_h_constants_0.__WATCHOS_3_0();
    }
    public static @C("int") int __WATCHOS_3_1() {
        return fuse_h_constants_0.__WATCHOS_3_1();
    }
    public static @C("int") int __WATCHOS_3_1_1() {
        return fuse_h_constants_0.__WATCHOS_3_1_1();
    }
    public static @C("int") int __WATCHOS_3_2() {
        return fuse_h_constants_0.__WATCHOS_3_2();
    }
    public static @C("int") int __WATCHOS_4_0() {
        return fuse_h_constants_0.__WATCHOS_4_0();
    }
    public static @C("int") int __WATCHOS_4_1() {
        return fuse_h_constants_0.__WATCHOS_4_1();
    }
    public static @C("int") int __WATCHOS_4_2() {
        return fuse_h_constants_0.__WATCHOS_4_2();
    }
    public static @C("int") int __WATCHOS_4_3() {
        return fuse_h_constants_0.__WATCHOS_4_3();
    }
    public static @C("int") int __WATCHOS_5_0() {
        return fuse_h_constants_0.__WATCHOS_5_0();
    }
    public static @C("int") int __WATCHOS_5_1() {
        return fuse_h_constants_0.__WATCHOS_5_1();
    }
    public static @C("int") int __WATCHOS_5_2() {
        return fuse_h_constants_0.__WATCHOS_5_2();
    }
    public static @C("int") int __WATCHOS_5_3() {
        return fuse_h_constants_0.__WATCHOS_5_3();
    }
    public static @C("int") int __WATCHOS_6_0() {
        return fuse_h_constants_0.__WATCHOS_6_0();
    }
    public static @C("int") int __WATCHOS_6_1() {
        return fuse_h_constants_0.__WATCHOS_6_1();
    }
    public static @C("int") int __WATCHOS_6_2() {
        return fuse_h_constants_0.__WATCHOS_6_2();
    }
    public static @C("int") int __WATCHOS_7_0() {
        return fuse_h_constants_0.__WATCHOS_7_0();
    }
    public static @C("int") int __WATCHOS_7_1() {
        return fuse_h_constants_0.__WATCHOS_7_1();
    }
    public static @C("int") int __WATCHOS_7_2() {
        return fuse_h_constants_0.__WATCHOS_7_2();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_0() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_0();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_1() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_1();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_2() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_2();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_3() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_3();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_4() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_4();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_5() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_5();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_6() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_6();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_7() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_7();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_8() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_8();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_9() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_9();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_10() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_10();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_10_2() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_10_2();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_10_3() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_10_3();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_11() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_11();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_11_2() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_11_2();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_11_3() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_11_3();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_11_4() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_11_4();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_12() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_12();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_12_1() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_12_1();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_12_2() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_12_2();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_12_4() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_12_4();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_13() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_13();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_13_1() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_13_1();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_13_2() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_13_2();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_13_4() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_13_4();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_14() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_14();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_14_1() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_14_1();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_14_4() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_14_4();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_14_6() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_14_6();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_15() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_15();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_15_1() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_15_1();
    }
    public static @C("int") int MAC_OS_X_VERSION_10_16() {
        return fuse_h_constants_0.MAC_OS_X_VERSION_10_16();
    }
    public static @C("int") int MAC_OS_VERSION_11_0() {
        return fuse_h_constants_0.MAC_OS_VERSION_11_0();
    }
    public static @C("int") int __DRIVERKIT_19_0() {
        return fuse_h_constants_0.__DRIVERKIT_19_0();
    }
    public static @C("int") int __DRIVERKIT_20_0() {
        return fuse_h_constants_0.__DRIVERKIT_20_0();
    }
    public static @C("int") int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return fuse_h_constants_0.__ENABLE_LEGACY_MAC_AVAILABILITY();
    }
    public static @C("int") int __DARWIN_FD_SETSIZE() {
        return fuse_h_constants_0.__DARWIN_FD_SETSIZE();
    }
    public static @C("int") int __DARWIN_NBBY() {
        return fuse_h_constants_0.__DARWIN_NBBY();
    }
    public static @C("int") int FUSE_MAJOR_VERSION() {
        return fuse_h_constants_0.FUSE_MAJOR_VERSION();
    }
    public static @C("int") int FUSE_MINOR_VERSION() {
        return fuse_h_constants_0.FUSE_MINOR_VERSION();
    }
    public static @C("int") int S_IFMT() {
        return fuse_h_constants_0.S_IFMT();
    }
    public static @C("int") int S_IFIFO() {
        return fuse_h_constants_0.S_IFIFO();
    }
    public static @C("int") int S_IFCHR() {
        return fuse_h_constants_0.S_IFCHR();
    }
    public static @C("int") int S_IFDIR() {
        return fuse_h_constants_0.S_IFDIR();
    }
    public static @C("int") int S_IFBLK() {
        return fuse_h_constants_0.S_IFBLK();
    }
    public static @C("int") int S_IFREG() {
        return fuse_h_constants_0.S_IFREG();
    }
    public static @C("int") int S_IFLNK() {
        return fuse_h_constants_0.S_IFLNK();
    }
    public static @C("int") int S_IFSOCK() {
        return fuse_h_constants_0.S_IFSOCK();
    }
    public static @C("int") int S_IFWHT() {
        return fuse_h_constants_0.S_IFWHT();
    }
    public static @C("int") int S_IRWXU() {
        return fuse_h_constants_0.S_IRWXU();
    }
    public static @C("int") int S_IRUSR() {
        return fuse_h_constants_0.S_IRUSR();
    }
    public static @C("int") int S_IWUSR() {
        return fuse_h_constants_0.S_IWUSR();
    }
    public static @C("int") int S_IXUSR() {
        return fuse_h_constants_0.S_IXUSR();
    }
    public static @C("int") int S_IRWXG() {
        return fuse_h_constants_0.S_IRWXG();
    }
    public static @C("int") int S_IRGRP() {
        return fuse_h_constants_0.S_IRGRP();
    }
    public static @C("int") int S_IWGRP() {
        return fuse_h_constants_0.S_IWGRP();
    }
    public static @C("int") int S_IXGRP() {
        return fuse_h_constants_0.S_IXGRP();
    }
    public static @C("int") int S_IRWXO() {
        return fuse_h_constants_0.S_IRWXO();
    }
    public static @C("int") int S_IROTH() {
        return fuse_h_constants_0.S_IROTH();
    }
    public static @C("int") int S_IWOTH() {
        return fuse_h_constants_0.S_IWOTH();
    }
    public static @C("int") int S_IXOTH() {
        return fuse_h_constants_0.S_IXOTH();
    }
    public static @C("int") int S_ISUID() {
        return fuse_h_constants_0.S_ISUID();
    }
    public static @C("int") int S_ISGID() {
        return fuse_h_constants_0.S_ISGID();
    }
    public static @C("int") int S_ISVTX() {
        return fuse_h_constants_0.S_ISVTX();
    }
    public static @C("int") int S_BLKSIZE() {
        return fuse_h_constants_0.S_BLKSIZE();
    }
    public static @C("int") int UF_SETTABLE() {
        return fuse_h_constants_0.UF_SETTABLE();
    }
    public static @C("int") int UF_NODUMP() {
        return fuse_h_constants_0.UF_NODUMP();
    }
    public static @C("int") int UF_IMMUTABLE() {
        return fuse_h_constants_0.UF_IMMUTABLE();
    }
    public static @C("int") int UF_APPEND() {
        return fuse_h_constants_0.UF_APPEND();
    }
    public static @C("int") int UF_OPAQUE() {
        return fuse_h_constants_0.UF_OPAQUE();
    }
    public static @C("int") int UF_COMPRESSED() {
        return fuse_h_constants_0.UF_COMPRESSED();
    }
    public static @C("int") int UF_TRACKED() {
        return fuse_h_constants_0.UF_TRACKED();
    }
    public static @C("int") int UF_DATAVAULT() {
        return fuse_h_constants_0.UF_DATAVAULT();
    }
    public static @C("int") int UF_HIDDEN() {
        return fuse_h_constants_0.UF_HIDDEN();
    }
    public static @C("int") int SF_SUPPORTED() {
        return fuse_h_constants_0.SF_SUPPORTED();
    }
    public static @C("int") int SF_SETTABLE() {
        return fuse_h_constants_0.SF_SETTABLE();
    }
    public static @C("int") int SF_ARCHIVED() {
        return fuse_h_constants_0.SF_ARCHIVED();
    }
    public static @C("int") int SF_IMMUTABLE() {
        return fuse_h_constants_0.SF_IMMUTABLE();
    }
    public static @C("int") int SF_APPEND() {
        return fuse_h_constants_0.SF_APPEND();
    }
    public static @C("int") int SF_RESTRICTED() {
        return fuse_h_constants_0.SF_RESTRICTED();
    }
    public static @C("int") int SF_NOUNLINK() {
        return fuse_h_constants_0.SF_NOUNLINK();
    }
    public static @C("int") int SF_FIRMLINK() {
        return fuse_h_constants_0.SF_FIRMLINK();
    }
    public static @C("int") int SF_DATALESS() {
        return fuse_h_constants_0.SF_DATALESS();
    }
    public static @C("int") int EF_MAY_SHARE_BLOCKS() {
        return fuse_h_constants_0.EF_MAY_SHARE_BLOCKS();
    }
    public static @C("int") int EF_NO_XATTRS() {
        return fuse_h_constants_0.EF_NO_XATTRS();
    }
    public static @C("int") int EF_IS_SYNC_ROOT() {
        return fuse_h_constants_0.EF_IS_SYNC_ROOT();
    }
    public static @C("int") int EF_IS_PURGEABLE() {
        return fuse_h_constants_0.EF_IS_PURGEABLE();
    }
    public static @C("int") int EF_IS_SPARSE() {
        return fuse_h_constants_0.EF_IS_SPARSE();
    }
    public static @C("int") int EF_IS_SYNTHETIC() {
        return fuse_h_constants_0.EF_IS_SYNTHETIC();
    }
    public static @C("int") int FUSE_IOCTL_MAX_IOV() {
        return fuse_h_constants_0.FUSE_IOCTL_MAX_IOV();
    }
    public static @C("int") int O_RDONLY() {
        return fuse_h_constants_0.O_RDONLY();
    }
    public static @C("int") int O_WRONLY() {
        return fuse_h_constants_0.O_WRONLY();
    }
    public static @C("int") int O_RDWR() {
        return fuse_h_constants_0.O_RDWR();
    }
    public static @C("int") int O_ACCMODE() {
        return fuse_h_constants_0.O_ACCMODE();
    }
    public static @C("int") int FREAD() {
        return fuse_h_constants_0.FREAD();
    }
    public static @C("int") int FWRITE() {
        return fuse_h_constants_0.FWRITE();
    }
    public static @C("int") int O_NONBLOCK() {
        return fuse_h_constants_0.O_NONBLOCK();
    }
    public static @C("int") int O_APPEND() {
        return fuse_h_constants_0.O_APPEND();
    }
    public static @C("int") int O_SYNC() {
        return fuse_h_constants_0.O_SYNC();
    }
    public static @C("int") int O_SHLOCK() {
        return fuse_h_constants_0.O_SHLOCK();
    }
    public static @C("int") int O_EXLOCK() {
        return fuse_h_constants_0.O_EXLOCK();
    }
    public static @C("int") int O_ASYNC() {
        return fuse_h_constants_0.O_ASYNC();
    }
    public static @C("int") int O_NOFOLLOW() {
        return fuse_h_constants_0.O_NOFOLLOW();
    }
    public static @C("int") int O_CREAT() {
        return fuse_h_constants_0.O_CREAT();
    }
    public static @C("int") int O_TRUNC() {
        return fuse_h_constants_0.O_TRUNC();
    }
    public static @C("int") int O_EXCL() {
        return fuse_h_constants_0.O_EXCL();
    }
    public static @C("int") int O_EVTONLY() {
        return fuse_h_constants_0.O_EVTONLY();
    }
    public static @C("int") int O_NOCTTY() {
        return fuse_h_constants_0.O_NOCTTY();
    }
    public static @C("int") int O_DIRECTORY() {
        return fuse_h_constants_0.O_DIRECTORY();
    }
    public static @C("int") int O_SYMLINK() {
        return fuse_h_constants_0.O_SYMLINK();
    }
    public static @C("int") int O_DSYNC() {
        return fuse_h_constants_0.O_DSYNC();
    }
    public static @C("int") int O_CLOEXEC() {
        return fuse_h_constants_0.O_CLOEXEC();
    }
    public static @C("int") int O_NOFOLLOW_ANY() {
        return fuse_h_constants_0.O_NOFOLLOW_ANY();
    }
    public static @C("int") int AT_EACCESS() {
        return fuse_h_constants_0.AT_EACCESS();
    }
    public static @C("int") int AT_SYMLINK_NOFOLLOW() {
        return fuse_h_constants_0.AT_SYMLINK_NOFOLLOW();
    }
    public static @C("int") int AT_SYMLINK_FOLLOW() {
        return fuse_h_constants_0.AT_SYMLINK_FOLLOW();
    }
    public static @C("int") int AT_REMOVEDIR() {
        return fuse_h_constants_0.AT_REMOVEDIR();
    }
    public static @C("int") int AT_REALDEV() {
        return fuse_h_constants_0.AT_REALDEV();
    }
    public static @C("int") int AT_FDONLY() {
        return fuse_h_constants_0.AT_FDONLY();
    }
    public static @C("int") int O_DP_GETRAWENCRYPTED() {
        return fuse_h_constants_0.O_DP_GETRAWENCRYPTED();
    }
    public static @C("int") int O_DP_GETRAWUNENCRYPTED() {
        return fuse_h_constants_0.O_DP_GETRAWUNENCRYPTED();
    }
    public static @C("int") int CPF_OVERWRITE() {
        return fuse_h_constants_0.CPF_OVERWRITE();
    }
    public static @C("int") int CPF_IGNORE_MODE() {
        return fuse_h_constants_0.CPF_IGNORE_MODE();
    }
    public static @C("int") int F_DUPFD() {
        return fuse_h_constants_0.F_DUPFD();
    }
    public static @C("int") int F_GETFD() {
        return fuse_h_constants_0.F_GETFD();
    }
    public static @C("int") int F_SETFD() {
        return fuse_h_constants_0.F_SETFD();
    }
    public static @C("int") int F_GETFL() {
        return fuse_h_constants_0.F_GETFL();
    }
    public static @C("int") int F_SETFL() {
        return fuse_h_constants_0.F_SETFL();
    }
    public static @C("int") int F_GETOWN() {
        return fuse_h_constants_0.F_GETOWN();
    }
    public static @C("int") int F_SETOWN() {
        return fuse_h_constants_0.F_SETOWN();
    }
    public static @C("int") int F_GETLK() {
        return fuse_h_constants_0.F_GETLK();
    }
    public static @C("int") int F_SETLK() {
        return fuse_h_constants_0.F_SETLK();
    }
    public static @C("int") int F_SETLKW() {
        return fuse_h_constants_0.F_SETLKW();
    }
    public static @C("int") int F_SETLKWTIMEOUT() {
        return fuse_h_constants_0.F_SETLKWTIMEOUT();
    }
    public static @C("int") int F_FLUSH_DATA() {
        return fuse_h_constants_0.F_FLUSH_DATA();
    }
    public static @C("int") int F_CHKCLEAN() {
        return fuse_h_constants_0.F_CHKCLEAN();
    }
    public static @C("int") int F_PREALLOCATE() {
        return fuse_h_constants_0.F_PREALLOCATE();
    }
    public static @C("int") int F_SETSIZE() {
        return fuse_h_constants_0.F_SETSIZE();
    }
    public static @C("int") int F_RDADVISE() {
        return fuse_h_constants_0.F_RDADVISE();
    }
    public static @C("int") int F_RDAHEAD() {
        return fuse_h_constants_0.F_RDAHEAD();
    }
    public static @C("int") int F_NOCACHE() {
        return fuse_h_constants_0.F_NOCACHE();
    }
    public static @C("int") int F_LOG2PHYS() {
        return fuse_h_constants_0.F_LOG2PHYS();
    }
    public static @C("int") int F_GETPATH() {
        return fuse_h_constants_0.F_GETPATH();
    }
    public static @C("int") int F_FULLFSYNC() {
        return fuse_h_constants_0.F_FULLFSYNC();
    }
    public static @C("int") int F_PATHPKG_CHECK() {
        return fuse_h_constants_0.F_PATHPKG_CHECK();
    }
    public static @C("int") int F_FREEZE_FS() {
        return fuse_h_constants_0.F_FREEZE_FS();
    }
    public static @C("int") int F_THAW_FS() {
        return fuse_h_constants_0.F_THAW_FS();
    }
    public static @C("int") int F_GLOBAL_NOCACHE() {
        return fuse_h_constants_0.F_GLOBAL_NOCACHE();
    }
    public static @C("int") int F_ADDSIGS() {
        return fuse_h_constants_0.F_ADDSIGS();
    }
    public static @C("int") int F_ADDFILESIGS() {
        return fuse_h_constants_0.F_ADDFILESIGS();
    }
    public static @C("int") int F_NODIRECT() {
        return fuse_h_constants_0.F_NODIRECT();
    }
    public static @C("int") int F_GETPROTECTIONCLASS() {
        return fuse_h_constants_0.F_GETPROTECTIONCLASS();
    }
    public static @C("int") int F_SETPROTECTIONCLASS() {
        return fuse_h_constants_0.F_SETPROTECTIONCLASS();
    }
    public static @C("int") int F_LOG2PHYS_EXT() {
        return fuse_h_constants_0.F_LOG2PHYS_EXT();
    }
    public static @C("int") int F_GETLKPID() {
        return fuse_h_constants_0.F_GETLKPID();
    }
    public static @C("int") int F_SETBACKINGSTORE() {
        return fuse_h_constants_0.F_SETBACKINGSTORE();
    }
    public static @C("int") int F_GETPATH_MTMINFO() {
        return fuse_h_constants_0.F_GETPATH_MTMINFO();
    }
    public static @C("int") int F_GETCODEDIR() {
        return fuse_h_constants_0.F_GETCODEDIR();
    }
    public static @C("int") int F_SETNOSIGPIPE() {
        return fuse_h_constants_0.F_SETNOSIGPIPE();
    }
    public static @C("int") int F_GETNOSIGPIPE() {
        return fuse_h_constants_0.F_GETNOSIGPIPE();
    }
    public static @C("int") int F_TRANSCODEKEY() {
        return fuse_h_constants_0.F_TRANSCODEKEY();
    }
    public static @C("int") int F_SINGLE_WRITER() {
        return fuse_h_constants_0.F_SINGLE_WRITER();
    }
    public static @C("int") int F_GETPROTECTIONLEVEL() {
        return fuse_h_constants_0.F_GETPROTECTIONLEVEL();
    }
    public static @C("int") int F_FINDSIGS() {
        return fuse_h_constants_0.F_FINDSIGS();
    }
    public static @C("int") int F_ADDFILESIGS_FOR_DYLD_SIM() {
        return fuse_h_constants_0.F_ADDFILESIGS_FOR_DYLD_SIM();
    }
    public static @C("int") int F_BARRIERFSYNC() {
        return fuse_h_constants_0.F_BARRIERFSYNC();
    }
    public static @C("int") int F_ADDFILESIGS_RETURN() {
        return fuse_h_constants_0.F_ADDFILESIGS_RETURN();
    }
    public static @C("int") int F_CHECK_LV() {
        return fuse_h_constants_0.F_CHECK_LV();
    }
    public static @C("int") int F_PUNCHHOLE() {
        return fuse_h_constants_0.F_PUNCHHOLE();
    }
    public static @C("int") int F_TRIM_ACTIVE_FILE() {
        return fuse_h_constants_0.F_TRIM_ACTIVE_FILE();
    }
    public static @C("int") int F_SPECULATIVE_READ() {
        return fuse_h_constants_0.F_SPECULATIVE_READ();
    }
    public static @C("int") int F_GETPATH_NOFIRMLINK() {
        return fuse_h_constants_0.F_GETPATH_NOFIRMLINK();
    }
    public static @C("int") int F_ADDFILESIGS_INFO() {
        return fuse_h_constants_0.F_ADDFILESIGS_INFO();
    }
    public static @C("int") int F_ADDFILESUPPL() {
        return fuse_h_constants_0.F_ADDFILESUPPL();
    }
    public static @C("int") int F_GETSIGSINFO() {
        return fuse_h_constants_0.F_GETSIGSINFO();
    }
    public static @C("int") int FCNTL_FS_SPECIFIC_BASE() {
        return fuse_h_constants_0.FCNTL_FS_SPECIFIC_BASE();
    }
    public static @C("int") int F_DUPFD_CLOEXEC() {
        return fuse_h_constants_0.F_DUPFD_CLOEXEC();
    }
    public static @C("int") int FD_CLOEXEC() {
        return fuse_h_constants_0.FD_CLOEXEC();
    }
    public static @C("int") int F_RDLCK() {
        return fuse_h_constants_0.F_RDLCK();
    }
    public static @C("int") int F_UNLCK() {
        return fuse_h_constants_0.F_UNLCK();
    }
    public static @C("int") int F_WRLCK() {
        return fuse_h_constants_0.F_WRLCK();
    }
    public static @C("int") int SEEK_SET() {
        return fuse_h_constants_0.SEEK_SET();
    }
    public static @C("int") int SEEK_CUR() {
        return fuse_h_constants_0.SEEK_CUR();
    }
    public static @C("int") int SEEK_END() {
        return fuse_h_constants_0.SEEK_END();
    }
    public static @C("int") int SEEK_HOLE() {
        return fuse_h_constants_0.SEEK_HOLE();
    }
    public static @C("int") int SEEK_DATA() {
        return fuse_h_constants_0.SEEK_DATA();
    }
    public static @C("int") int F_ALLOCATECONTIG() {
        return fuse_h_constants_0.F_ALLOCATECONTIG();
    }
    public static @C("int") int F_ALLOCATEALL() {
        return fuse_h_constants_0.F_ALLOCATEALL();
    }
    public static @C("int") int F_PEOFPOSMODE() {
        return fuse_h_constants_0.F_PEOFPOSMODE();
    }
    public static @C("int") int F_VOLPOSMODE() {
        return fuse_h_constants_0.F_VOLPOSMODE();
    }
    public static @C("int") int USER_FSIGNATURES_CDHASH_LEN() {
        return fuse_h_constants_0.USER_FSIGNATURES_CDHASH_LEN();
    }
    public static @C("int") int GETSIGSINFO_PLATFORM_BINARY() {
        return fuse_h_constants_0.GETSIGSINFO_PLATFORM_BINARY();
    }
    public static @C("int") int LOCK_SH() {
        return fuse_h_constants_0.LOCK_SH();
    }
    public static @C("int") int LOCK_EX() {
        return fuse_h_constants_0.LOCK_EX();
    }
    public static @C("int") int LOCK_NB() {
        return fuse_h_constants_0.LOCK_NB();
    }
    public static @C("int") int LOCK_UN() {
        return fuse_h_constants_0.LOCK_UN();
    }
    public static @C("int") int O_ALERT() {
        return fuse_h_constants_0.O_ALERT();
    }
    public static @C("int") int _FORTIFY_SOURCE() {
        return fuse_h_constants_0._FORTIFY_SOURCE();
    }
    public static @C("int") int CLOCKS_PER_SEC() {
        return fuse_h_constants_0.CLOCKS_PER_SEC();
    }
    public static @C("int") int TIME_UTC() {
        return fuse_h_constants_0.TIME_UTC();
    }
    public static @C("int") int ST_RDONLY() {
        return fuse_h_constants_0.ST_RDONLY();
    }
    public static @C("int") int ST_NOSUID() {
        return fuse_h_constants_0.ST_NOSUID();
    }
    public static @C("int") int BSD() {
        return fuse_h_constants_0.BSD();
    }
    public static @C("int") int BSD4_3() {
        return fuse_h_constants_0.BSD4_3();
    }
    public static @C("int") int BSD4_4() {
        return fuse_h_constants_0.BSD4_4();
    }
    public static @C("int") int NeXTBSD() {
        return fuse_h_constants_0.NeXTBSD();
    }
    public static @C("int") int NeXTBSD4_0() {
        return fuse_h_constants_0.NeXTBSD4_0();
    }
    public static @C("int") int CHILD_MAX() {
        return fuse_h_constants_0.CHILD_MAX();
    }
    public static @C("int") int LINK_MAX() {
        return fuse_h_constants_0.LINK_MAX();
    }
    public static @C("int") int MAX_CANON() {
        return fuse_h_constants_0.MAX_CANON();
    }
    public static @C("int") int MAX_INPUT() {
        return fuse_h_constants_0.MAX_INPUT();
    }
    public static @C("int") int NAME_MAX() {
        return fuse_h_constants_0.NAME_MAX();
    }
    public static @C("int") int NGROUPS_MAX() {
        return fuse_h_constants_0.NGROUPS_MAX();
    }
    public static @C("int") int OPEN_MAX() {
        return fuse_h_constants_0.OPEN_MAX();
    }
    public static @C("int") int PATH_MAX() {
        return fuse_h_constants_0.PATH_MAX();
    }
    public static @C("int") int PIPE_BUF() {
        return fuse_h_constants_0.PIPE_BUF();
    }
    public static @C("int") int BC_BASE_MAX() {
        return fuse_h_constants_0.BC_BASE_MAX();
    }
    public static @C("int") int BC_DIM_MAX() {
        return fuse_h_constants_0.BC_DIM_MAX();
    }
    public static @C("int") int BC_SCALE_MAX() {
        return fuse_h_constants_0.BC_SCALE_MAX();
    }
    public static @C("int") int BC_STRING_MAX() {
        return fuse_h_constants_0.BC_STRING_MAX();
    }
    public static @C("int") int CHARCLASS_NAME_MAX() {
        return fuse_h_constants_0.CHARCLASS_NAME_MAX();
    }
    public static @C("int") int COLL_WEIGHTS_MAX() {
        return fuse_h_constants_0.COLL_WEIGHTS_MAX();
    }
    public static @C("int") int EQUIV_CLASS_MAX() {
        return fuse_h_constants_0.EQUIV_CLASS_MAX();
    }
    public static @C("int") int EXPR_NEST_MAX() {
        return fuse_h_constants_0.EXPR_NEST_MAX();
    }
    public static @C("int") int LINE_MAX() {
        return fuse_h_constants_0.LINE_MAX();
    }
    public static @C("int") int RE_DUP_MAX() {
        return fuse_h_constants_0.RE_DUP_MAX();
    }
    public static @C("int") int NZERO() {
        return fuse_h_constants_0.NZERO();
    }
    public static @C("int") int MAXCOMLEN() {
        return fuse_h_constants_0.MAXCOMLEN();
    }
    public static @C("int") int MAXINTERP() {
        return fuse_h_constants_0.MAXINTERP();
    }
    public static @C("int") int MAXLOGNAME() {
        return fuse_h_constants_0.MAXLOGNAME();
    }
    public static @C("int") int NOFILE() {
        return fuse_h_constants_0.NOFILE();
    }
    public static @C("int") int NOGROUP() {
        return fuse_h_constants_0.NOGROUP();
    }
    public static @C("int") int MAXHOSTNAMELEN() {
        return fuse_h_constants_0.MAXHOSTNAMELEN();
    }
    public static @C("int") int MAXDOMNAMELEN() {
        return fuse_h_constants_0.MAXDOMNAMELEN();
    }
    public static @C("int") int NBPG() {
        return fuse_h_constants_0.NBPG();
    }
    public static @C("int") int PGSHIFT() {
        return fuse_h_constants_0.PGSHIFT();
    }
    public static @C("int") int DEV_BSIZE() {
        return fuse_h_constants_0.DEV_BSIZE();
    }
    public static @C("int") int DEV_BSHIFT() {
        return fuse_h_constants_0.DEV_BSHIFT();
    }
    public static @C("int") int BLKDEV_IOSIZE() {
        return fuse_h_constants_0.BLKDEV_IOSIZE();
    }
    public static @C("int") int CLSIZE() {
        return fuse_h_constants_0.CLSIZE();
    }
    public static @C("int") int CLSIZELOG2() {
        return fuse_h_constants_0.CLSIZELOG2();
    }
    public static @C("int") int MSIZESHIFT() {
        return fuse_h_constants_0.MSIZESHIFT();
    }
    public static @C("int") int MCLSHIFT() {
        return fuse_h_constants_0.MCLSHIFT();
    }
    public static @C("int") int MBIGCLSHIFT() {
        return fuse_h_constants_0.MBIGCLSHIFT();
    }
    public static @C("int") int M16KCLSHIFT() {
        return fuse_h_constants_0.M16KCLSHIFT();
    }
    public static @C("int") int __DARWIN_CLK_TCK() {
        return fuse_h_constants_0.__DARWIN_CLK_TCK();
    }
    public static @C("int") int CHAR_BIT() {
        return fuse_h_constants_0.CHAR_BIT();
    }
    public static @C("int") int MB_LEN_MAX() {
        return fuse_h_constants_0.MB_LEN_MAX();
    }
    public static @C("int") int SCHAR_MAX() {
        return fuse_h_constants_0.SCHAR_MAX();
    }
    public static @C("int") int UCHAR_MAX() {
        return fuse_h_constants_0.UCHAR_MAX();
    }
    public static @C("int") int CHAR_MAX() {
        return fuse_h_constants_0.CHAR_MAX();
    }
    public static @C("int") int USHRT_MAX() {
        return fuse_h_constants_0.USHRT_MAX();
    }
    public static @C("int") int SHRT_MAX() {
        return fuse_h_constants_0.SHRT_MAX();
    }
    public static @C("int") int INT_MAX() {
        return fuse_h_constants_0.INT_MAX();
    }
    public static @C("int") int LONG_BIT() {
        return fuse_h_constants_0.LONG_BIT();
    }
    public static @C("int") int WORD_BIT() {
        return fuse_h_constants_0.WORD_BIT();
    }
    public static @C("int") int _POSIX_ARG_MAX() {
        return fuse_h_constants_0._POSIX_ARG_MAX();
    }
    public static @C("int") int _POSIX_CHILD_MAX() {
        return fuse_h_constants_0._POSIX_CHILD_MAX();
    }
    public static @C("int") int _POSIX_LINK_MAX() {
        return fuse_h_constants_0._POSIX_LINK_MAX();
    }
    public static @C("int") int _POSIX_MAX_CANON() {
        return fuse_h_constants_0._POSIX_MAX_CANON();
    }
    public static @C("int") int _POSIX_MAX_INPUT() {
        return fuse_h_constants_0._POSIX_MAX_INPUT();
    }
    public static @C("int") int _POSIX_NAME_MAX() {
        return fuse_h_constants_0._POSIX_NAME_MAX();
    }
    public static @C("int") int _POSIX_NGROUPS_MAX() {
        return fuse_h_constants_0._POSIX_NGROUPS_MAX();
    }
    public static @C("int") int _POSIX_OPEN_MAX() {
        return fuse_h_constants_0._POSIX_OPEN_MAX();
    }
    public static @C("int") int _POSIX_PATH_MAX() {
        return fuse_h_constants_0._POSIX_PATH_MAX();
    }
    public static @C("int") int _POSIX_PIPE_BUF() {
        return fuse_h_constants_0._POSIX_PIPE_BUF();
    }
    public static @C("int") int _POSIX_SSIZE_MAX() {
        return fuse_h_constants_0._POSIX_SSIZE_MAX();
    }
    public static @C("int") int _POSIX_STREAM_MAX() {
        return fuse_h_constants_0._POSIX_STREAM_MAX();
    }
    public static @C("int") int _POSIX_TZNAME_MAX() {
        return fuse_h_constants_0._POSIX_TZNAME_MAX();
    }
    public static @C("int") int _POSIX2_BC_BASE_MAX() {
        return fuse_h_constants_0._POSIX2_BC_BASE_MAX();
    }
    public static @C("int") int _POSIX2_BC_DIM_MAX() {
        return fuse_h_constants_0._POSIX2_BC_DIM_MAX();
    }
    public static @C("int") int _POSIX2_BC_SCALE_MAX() {
        return fuse_h_constants_0._POSIX2_BC_SCALE_MAX();
    }
    public static @C("int") int _POSIX2_BC_STRING_MAX() {
        return fuse_h_constants_0._POSIX2_BC_STRING_MAX();
    }
    public static @C("int") int _POSIX2_EQUIV_CLASS_MAX() {
        return fuse_h_constants_0._POSIX2_EQUIV_CLASS_MAX();
    }
    public static @C("int") int _POSIX2_EXPR_NEST_MAX() {
        return fuse_h_constants_0._POSIX2_EXPR_NEST_MAX();
    }
    public static @C("int") int _POSIX2_LINE_MAX() {
        return fuse_h_constants_0._POSIX2_LINE_MAX();
    }
    public static @C("int") int _POSIX2_RE_DUP_MAX() {
        return fuse_h_constants_0._POSIX2_RE_DUP_MAX();
    }
    public static @C("int") int _POSIX_AIO_LISTIO_MAX() {
        return fuse_h_constants_0._POSIX_AIO_LISTIO_MAX();
    }
    public static @C("int") int _POSIX_AIO_MAX() {
        return fuse_h_constants_0._POSIX_AIO_MAX();
    }
    public static @C("int") int _POSIX_DELAYTIMER_MAX() {
        return fuse_h_constants_0._POSIX_DELAYTIMER_MAX();
    }
    public static @C("int") int _POSIX_MQ_OPEN_MAX() {
        return fuse_h_constants_0._POSIX_MQ_OPEN_MAX();
    }
    public static @C("int") int _POSIX_MQ_PRIO_MAX() {
        return fuse_h_constants_0._POSIX_MQ_PRIO_MAX();
    }
    public static @C("int") int _POSIX_RTSIG_MAX() {
        return fuse_h_constants_0._POSIX_RTSIG_MAX();
    }
    public static @C("int") int _POSIX_SEM_NSEMS_MAX() {
        return fuse_h_constants_0._POSIX_SEM_NSEMS_MAX();
    }
    public static @C("int") int _POSIX_SEM_VALUE_MAX() {
        return fuse_h_constants_0._POSIX_SEM_VALUE_MAX();
    }
    public static @C("int") int _POSIX_SIGQUEUE_MAX() {
        return fuse_h_constants_0._POSIX_SIGQUEUE_MAX();
    }
    public static @C("int") int _POSIX_TIMER_MAX() {
        return fuse_h_constants_0._POSIX_TIMER_MAX();
    }
    public static @C("int") int _POSIX_CLOCKRES_MIN() {
        return fuse_h_constants_0._POSIX_CLOCKRES_MIN();
    }
    public static @C("int") int _POSIX_THREAD_DESTRUCTOR_ITERATIONS() {
        return fuse_h_constants_0._POSIX_THREAD_DESTRUCTOR_ITERATIONS();
    }
    public static @C("int") int _POSIX_THREAD_KEYS_MAX() {
        return fuse_h_constants_0._POSIX_THREAD_KEYS_MAX();
    }
    public static @C("int") int _POSIX_THREAD_THREADS_MAX() {
        return fuse_h_constants_0._POSIX_THREAD_THREADS_MAX();
    }
    public static @C("int") int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return fuse_h_constants_0.PTHREAD_DESTRUCTOR_ITERATIONS();
    }
    public static @C("int") int PTHREAD_KEYS_MAX() {
        return fuse_h_constants_0.PTHREAD_KEYS_MAX();
    }
    public static @C("int") int PTHREAD_STACK_MIN() {
        return fuse_h_constants_0.PTHREAD_STACK_MIN();
    }
    public static @C("int") int _POSIX_HOST_NAME_MAX() {
        return fuse_h_constants_0._POSIX_HOST_NAME_MAX();
    }
    public static @C("int") int _POSIX_LOGIN_NAME_MAX() {
        return fuse_h_constants_0._POSIX_LOGIN_NAME_MAX();
    }
    public static @C("int") int _POSIX_SS_REPL_MAX() {
        return fuse_h_constants_0._POSIX_SS_REPL_MAX();
    }
    public static @C("int") int _POSIX_SYMLINK_MAX() {
        return fuse_h_constants_0._POSIX_SYMLINK_MAX();
    }
    public static @C("int") int _POSIX_SYMLOOP_MAX() {
        return fuse_h_constants_0._POSIX_SYMLOOP_MAX();
    }
    public static @C("int") int _POSIX_TRACE_EVENT_NAME_MAX() {
        return fuse_h_constants_0._POSIX_TRACE_EVENT_NAME_MAX();
    }
    public static @C("int") int _POSIX_TRACE_NAME_MAX() {
        return fuse_h_constants_0._POSIX_TRACE_NAME_MAX();
    }
    public static @C("int") int _POSIX_TRACE_SYS_MAX() {
        return fuse_h_constants_0._POSIX_TRACE_SYS_MAX();
    }
    public static @C("int") int _POSIX_TRACE_USER_EVENT_MAX() {
        return fuse_h_constants_0._POSIX_TRACE_USER_EVENT_MAX();
    }
    public static @C("int") int _POSIX_TTY_NAME_MAX() {
        return fuse_h_constants_0._POSIX_TTY_NAME_MAX();
    }
    public static @C("int") int _POSIX2_CHARCLASS_NAME_MAX() {
        return fuse_h_constants_0._POSIX2_CHARCLASS_NAME_MAX();
    }
    public static @C("int") int _POSIX2_COLL_WEIGHTS_MAX() {
        return fuse_h_constants_0._POSIX2_COLL_WEIGHTS_MAX();
    }
    public static @C("int") int PASS_MAX() {
        return fuse_h_constants_0.PASS_MAX();
    }
    public static @C("int") int NL_ARGMAX() {
        return fuse_h_constants_0.NL_ARGMAX();
    }
    public static @C("int") int NL_LANGMAX() {
        return fuse_h_constants_0.NL_LANGMAX();
    }
    public static @C("int") int NL_MSGMAX() {
        return fuse_h_constants_0.NL_MSGMAX();
    }
    public static @C("int") int NL_NMAX() {
        return fuse_h_constants_0.NL_NMAX();
    }
    public static @C("int") int NL_SETMAX() {
        return fuse_h_constants_0.NL_SETMAX();
    }
    public static @C("int") int NL_TEXTMAX() {
        return fuse_h_constants_0.NL_TEXTMAX();
    }
    public static @C("int") int _XOPEN_IOV_MAX() {
        return fuse_h_constants_0._XOPEN_IOV_MAX();
    }
    public static @C("int") int IOV_MAX() {
        return fuse_h_constants_0.IOV_MAX();
    }
    public static @C("int") int _XOPEN_NAME_MAX() {
        return fuse_h_constants_0._XOPEN_NAME_MAX();
    }
    public static @C("int") int _XOPEN_PATH_MAX() {
        return fuse_h_constants_0._XOPEN_PATH_MAX();
    }
    public static @C("int") int __DARWIN_NSIG() {
        return fuse_h_constants_0.__DARWIN_NSIG();
    }
    public static @C("int") int _I386_SIGNAL_H_() {
        return fuse_h_constants_0._I386_SIGNAL_H_();
    }
    public static @C("int") int SIGHUP() {
        return fuse_h_constants_0.SIGHUP();
    }
    public static @C("int") int SIGINT() {
        return fuse_h_constants_0.SIGINT();
    }
    public static @C("int") int SIGQUIT() {
        return fuse_h_constants_0.SIGQUIT();
    }
    public static @C("int") int SIGILL() {
        return fuse_h_constants_0.SIGILL();
    }
    public static @C("int") int SIGTRAP() {
        return fuse_h_constants_0.SIGTRAP();
    }
    public static @C("int") int SIGABRT() {
        return fuse_h_constants_0.SIGABRT();
    }
    public static @C("int") int SIGEMT() {
        return fuse_h_constants_0.SIGEMT();
    }
    public static @C("int") int SIGFPE() {
        return fuse_h_constants_0.SIGFPE();
    }
    public static @C("int") int SIGKILL() {
        return fuse_h_constants_0.SIGKILL();
    }
    public static @C("int") int SIGBUS() {
        return fuse_h_constants_0.SIGBUS();
    }
    public static @C("int") int SIGSEGV() {
        return fuse_h_constants_0.SIGSEGV();
    }
    public static @C("int") int SIGSYS() {
        return fuse_h_constants_0.SIGSYS();
    }
    public static @C("int") int SIGPIPE() {
        return fuse_h_constants_0.SIGPIPE();
    }
    public static @C("int") int SIGALRM() {
        return fuse_h_constants_0.SIGALRM();
    }
    public static @C("int") int SIGTERM() {
        return fuse_h_constants_0.SIGTERM();
    }
    public static @C("int") int SIGURG() {
        return fuse_h_constants_0.SIGURG();
    }
    public static @C("int") int SIGSTOP() {
        return fuse_h_constants_0.SIGSTOP();
    }
    public static @C("int") int SIGTSTP() {
        return fuse_h_constants_0.SIGTSTP();
    }
    public static @C("int") int SIGCONT() {
        return fuse_h_constants_0.SIGCONT();
    }
    public static @C("int") int SIGCHLD() {
        return fuse_h_constants_0.SIGCHLD();
    }
    public static @C("int") int SIGTTIN() {
        return fuse_h_constants_0.SIGTTIN();
    }
    public static @C("int") int SIGTTOU() {
        return fuse_h_constants_0.SIGTTOU();
    }
    public static @C("int") int SIGIO() {
        return fuse_h_constants_0.SIGIO();
    }
    public static @C("int") int SIGXCPU() {
        return fuse_h_constants_0.SIGXCPU();
    }
    public static @C("int") int SIGXFSZ() {
        return fuse_h_constants_0.SIGXFSZ();
    }
    public static @C("int") int SIGVTALRM() {
        return fuse_h_constants_0.SIGVTALRM();
    }
    public static @C("int") int SIGPROF() {
        return fuse_h_constants_0.SIGPROF();
    }
    public static @C("int") int SIGWINCH() {
        return fuse_h_constants_0.SIGWINCH();
    }
    public static @C("int") int SIGINFO() {
        return fuse_h_constants_0.SIGINFO();
    }
    public static @C("int") int SIGUSR1() {
        return fuse_h_constants_0.SIGUSR1();
    }
    public static @C("int") int SIGUSR2() {
        return fuse_h_constants_0.SIGUSR2();
    }
    public static @C("int") int FP_PREC_24B() {
        return fuse_h_constants_0.FP_PREC_24B();
    }
    public static @C("int") int FP_PREC_53B() {
        return fuse_h_constants_0.FP_PREC_53B();
    }
    public static @C("int") int FP_PREC_64B() {
        return fuse_h_constants_0.FP_PREC_64B();
    }
    public static @C("int") int FP_RND_NEAR() {
        return fuse_h_constants_0.FP_RND_NEAR();
    }
    public static @C("int") int FP_RND_DOWN() {
        return fuse_h_constants_0.FP_RND_DOWN();
    }
    public static @C("int") int FP_RND_UP() {
        return fuse_h_constants_0.FP_RND_UP();
    }
    public static @C("int") int FP_CHOP() {
        return fuse_h_constants_0.FP_CHOP();
    }
    public static @C("int") int FP_STATE_BYTES() {
        return fuse_h_constants_0.FP_STATE_BYTES();
    }
    public static @C("int") int _X86_INSTRUCTION_STATE_CACHELINE_SIZE() {
        return fuse_h_constants_0._X86_INSTRUCTION_STATE_CACHELINE_SIZE();
    }
    public static @C("int") int __LASTBRANCH_MAX() {
        return fuse_h_constants_0.__LASTBRANCH_MAX();
    }
    public static @C("int") int SIGEV_NONE() {
        return fuse_h_constants_0.SIGEV_NONE();
    }
    public static @C("int") int SIGEV_SIGNAL() {
        return fuse_h_constants_0.SIGEV_SIGNAL();
    }
    public static @C("int") int SIGEV_THREAD() {
        return fuse_h_constants_0.SIGEV_THREAD();
    }
    public static @C("int") int ILL_NOOP() {
        return fuse_h_constants_0.ILL_NOOP();
    }
    public static @C("int") int ILL_ILLOPC() {
        return fuse_h_constants_0.ILL_ILLOPC();
    }
    public static @C("int") int ILL_ILLTRP() {
        return fuse_h_constants_0.ILL_ILLTRP();
    }
    public static @C("int") int ILL_PRVOPC() {
        return fuse_h_constants_0.ILL_PRVOPC();
    }
    public static @C("int") int ILL_ILLOPN() {
        return fuse_h_constants_0.ILL_ILLOPN();
    }
    public static @C("int") int ILL_ILLADR() {
        return fuse_h_constants_0.ILL_ILLADR();
    }
    public static @C("int") int ILL_PRVREG() {
        return fuse_h_constants_0.ILL_PRVREG();
    }
    public static @C("int") int ILL_COPROC() {
        return fuse_h_constants_0.ILL_COPROC();
    }
    public static @C("int") int ILL_BADSTK() {
        return fuse_h_constants_0.ILL_BADSTK();
    }
    public static @C("int") int FPE_NOOP() {
        return fuse_h_constants_0.FPE_NOOP();
    }
    public static @C("int") int FPE_FLTDIV() {
        return fuse_h_constants_0.FPE_FLTDIV();
    }
    public static @C("int") int FPE_FLTOVF() {
        return fuse_h_constants_0.FPE_FLTOVF();
    }
    public static @C("int") int FPE_FLTUND() {
        return fuse_h_constants_0.FPE_FLTUND();
    }
    public static @C("int") int FPE_FLTRES() {
        return fuse_h_constants_0.FPE_FLTRES();
    }
    public static @C("int") int FPE_FLTINV() {
        return fuse_h_constants_0.FPE_FLTINV();
    }
    public static @C("int") int FPE_FLTSUB() {
        return fuse_h_constants_0.FPE_FLTSUB();
    }
    public static @C("int") int FPE_INTDIV() {
        return fuse_h_constants_0.FPE_INTDIV();
    }
    public static @C("int") int FPE_INTOVF() {
        return fuse_h_constants_0.FPE_INTOVF();
    }
    public static @C("int") int SEGV_NOOP() {
        return fuse_h_constants_0.SEGV_NOOP();
    }
    public static @C("int") int SEGV_MAPERR() {
        return fuse_h_constants_0.SEGV_MAPERR();
    }
    public static @C("int") int SEGV_ACCERR() {
        return fuse_h_constants_0.SEGV_ACCERR();
    }
    public static @C("int") int BUS_NOOP() {
        return fuse_h_constants_0.BUS_NOOP();
    }
    public static @C("int") int BUS_ADRALN() {
        return fuse_h_constants_0.BUS_ADRALN();
    }
    public static @C("int") int BUS_ADRERR() {
        return fuse_h_constants_0.BUS_ADRERR();
    }
    public static @C("int") int BUS_OBJERR() {
        return fuse_h_constants_0.BUS_OBJERR();
    }
    public static @C("int") int TRAP_BRKPT() {
        return fuse_h_constants_0.TRAP_BRKPT();
    }
    public static @C("int") int TRAP_TRACE() {
        return fuse_h_constants_0.TRAP_TRACE();
    }
    public static @C("int") int CLD_NOOP() {
        return fuse_h_constants_0.CLD_NOOP();
    }
    public static @C("int") int CLD_EXITED() {
        return fuse_h_constants_0.CLD_EXITED();
    }
    public static @C("int") int CLD_KILLED() {
        return fuse_h_constants_0.CLD_KILLED();
    }
    public static @C("int") int CLD_DUMPED() {
        return fuse_h_constants_0.CLD_DUMPED();
    }
    public static @C("int") int CLD_TRAPPED() {
        return fuse_h_constants_0.CLD_TRAPPED();
    }
    public static @C("int") int CLD_STOPPED() {
        return fuse_h_constants_0.CLD_STOPPED();
    }
    public static @C("int") int CLD_CONTINUED() {
        return fuse_h_constants_0.CLD_CONTINUED();
    }
    public static @C("int") int POLL_IN() {
        return fuse_h_constants_0.POLL_IN();
    }
    public static @C("int") int POLL_OUT() {
        return fuse_h_constants_0.POLL_OUT();
    }
    public static @C("int") int POLL_MSG() {
        return fuse_h_constants_0.POLL_MSG();
    }
    public static @C("int") int POLL_ERR() {
        return fuse_h_constants_0.POLL_ERR();
    }
    public static @C("int") int POLL_PRI() {
        return fuse_h_constants_0.POLL_PRI();
    }
    public static @C("int") int POLL_HUP() {
        return fuse_h_constants_0.POLL_HUP();
    }
    public static @C("int") int SA_ONSTACK() {
        return fuse_h_constants_0.SA_ONSTACK();
    }
    public static @C("int") int SA_RESTART() {
        return fuse_h_constants_0.SA_RESTART();
    }
    public static @C("int") int SA_RESETHAND() {
        return fuse_h_constants_0.SA_RESETHAND();
    }
    public static @C("int") int SA_NOCLDSTOP() {
        return fuse_h_constants_0.SA_NOCLDSTOP();
    }
    public static @C("int") int SA_NODEFER() {
        return fuse_h_constants_0.SA_NODEFER();
    }
    public static @C("int") int SA_NOCLDWAIT() {
        return fuse_h_constants_0.SA_NOCLDWAIT();
    }
    public static @C("int") int SA_SIGINFO() {
        return fuse_h_constants_0.SA_SIGINFO();
    }
    public static @C("int") int SA_USERTRAMP() {
        return fuse_h_constants_0.SA_USERTRAMP();
    }
    public static @C("int") int SA_64REGSET() {
        return fuse_h_constants_0.SA_64REGSET();
    }
    public static @C("int") int SIG_BLOCK() {
        return fuse_h_constants_0.SIG_BLOCK();
    }
    public static @C("int") int SIG_UNBLOCK() {
        return fuse_h_constants_0.SIG_UNBLOCK();
    }
    public static @C("int") int SIG_SETMASK() {
        return fuse_h_constants_0.SIG_SETMASK();
    }
    public static @C("int") int SI_USER() {
        return fuse_h_constants_0.SI_USER();
    }
    public static @C("int") int SI_QUEUE() {
        return fuse_h_constants_0.SI_QUEUE();
    }
    public static @C("int") int SI_TIMER() {
        return fuse_h_constants_0.SI_TIMER();
    }
    public static @C("int") int SI_ASYNCIO() {
        return fuse_h_constants_0.SI_ASYNCIO();
    }
    public static @C("int") int SI_MESGQ() {
        return fuse_h_constants_0.SI_MESGQ();
    }
    public static @C("int") int SS_ONSTACK() {
        return fuse_h_constants_0.SS_ONSTACK();
    }
    public static @C("int") int SS_DISABLE() {
        return fuse_h_constants_0.SS_DISABLE();
    }
    public static @C("int") int MINSIGSTKSZ() {
        return fuse_h_constants_0.MINSIGSTKSZ();
    }
    public static @C("int") int SIGSTKSZ() {
        return fuse_h_constants_0.SIGSTKSZ();
    }
    public static @C("int") int PSWP() {
        return fuse_h_constants_0.PSWP();
    }
    public static @C("int") int PVM() {
        return fuse_h_constants_0.PVM();
    }
    public static @C("int") int PINOD() {
        return fuse_h_constants_0.PINOD();
    }
    public static @C("int") int PRIBIO() {
        return fuse_h_constants_0.PRIBIO();
    }
    public static @C("int") int PVFS() {
        return fuse_h_constants_0.PVFS();
    }
    public static @C("int") int PZERO() {
        return fuse_h_constants_0.PZERO();
    }
    public static @C("int") int PSOCK() {
        return fuse_h_constants_0.PSOCK();
    }
    public static @C("int") int PWAIT() {
        return fuse_h_constants_0.PWAIT();
    }
    public static @C("int") int PLOCK() {
        return fuse_h_constants_0.PLOCK();
    }
    public static @C("int") int PPAUSE() {
        return fuse_h_constants_0.PPAUSE();
    }
    public static @C("int") int PUSER() {
        return fuse_h_constants_0.PUSER();
    }
    public static @C("int") int MAXPRI() {
        return fuse_h_constants_0.MAXPRI();
    }
    public static @C("int") int PRIMASK() {
        return fuse_h_constants_0.PRIMASK();
    }
    public static @C("int") int PCATCH() {
        return fuse_h_constants_0.PCATCH();
    }
    public static @C("int") int PTTYBLOCK() {
        return fuse_h_constants_0.PTTYBLOCK();
    }
    public static @C("int") int PDROP() {
        return fuse_h_constants_0.PDROP();
    }
    public static @C("int") int PSPIN() {
        return fuse_h_constants_0.PSPIN();
    }
    public static @C("int") int CMASK() {
        return fuse_h_constants_0.CMASK();
    }
    public static @C("int") int CBLOCK() {
        return fuse_h_constants_0.CBLOCK();
    }
    public static @C("int") int MAXFRAG() {
        return fuse_h_constants_0.MAXFRAG();
    }
    public static @C("int") int MAXSYMLINKS() {
        return fuse_h_constants_0.MAXSYMLINKS();
    }
    public static @C("int") int FSHIFT() {
        return fuse_h_constants_0.FSHIFT();
    }
    public static @C("int") int MAX_AUDIT_RECORDS() {
        return fuse_h_constants_0.MAX_AUDIT_RECORDS();
    }
    public static @C("int") int AUDIT_HARD_LIMIT_FREE_BLOCKS() {
        return fuse_h_constants_0.AUDIT_HARD_LIMIT_FREE_BLOCKS();
    }
    public static @C("int") int AUDIT_TRIGGER_MIN() {
        return fuse_h_constants_0.AUDIT_TRIGGER_MIN();
    }
    public static @C("int") int AUDIT_TRIGGER_LOW_SPACE() {
        return fuse_h_constants_0.AUDIT_TRIGGER_LOW_SPACE();
    }
    public static @C("int") int AUDIT_TRIGGER_ROTATE_KERNEL() {
        return fuse_h_constants_0.AUDIT_TRIGGER_ROTATE_KERNEL();
    }
    public static @C("int") int AUDIT_TRIGGER_READ_FILE() {
        return fuse_h_constants_0.AUDIT_TRIGGER_READ_FILE();
    }
    public static @C("int") int AUDIT_TRIGGER_CLOSE_AND_DIE() {
        return fuse_h_constants_0.AUDIT_TRIGGER_CLOSE_AND_DIE();
    }
    public static @C("int") int AUDIT_TRIGGER_NO_SPACE() {
        return fuse_h_constants_0.AUDIT_TRIGGER_NO_SPACE();
    }
    public static @C("int") int AUDIT_TRIGGER_ROTATE_USER() {
        return fuse_h_constants_0.AUDIT_TRIGGER_ROTATE_USER();
    }
    public static @C("int") int AUDIT_TRIGGER_INITIALIZE() {
        return fuse_h_constants_0.AUDIT_TRIGGER_INITIALIZE();
    }
    public static @C("int") int AUDIT_TRIGGER_EXPIRE_TRAILS() {
        return fuse_h_constants_0.AUDIT_TRIGGER_EXPIRE_TRAILS();
    }
    public static @C("int") int AUDIT_TRIGGER_MAX() {
        return fuse_h_constants_0.AUDIT_TRIGGER_MAX();
    }
    public static @C("int") int AU_DEFAUDITSID() {
        return fuse_h_constants_0.AU_DEFAUDITSID();
    }
    public static @C("int") int AUC_UNSET() {
        return fuse_h_constants_0.AUC_UNSET();
    }
    public static @C("int") int AUC_AUDITING() {
        return fuse_h_constants_0.AUC_AUDITING();
    }
    public static @C("int") int AUC_NOAUDIT() {
        return fuse_h_constants_0.AUC_NOAUDIT();
    }
    public static @C("int") int A_OLDGETPOLICY() {
        return fuse_h_constants_0.A_OLDGETPOLICY();
    }
    public static @C("int") int A_OLDSETPOLICY() {
        return fuse_h_constants_0.A_OLDSETPOLICY();
    }
    public static @C("int") int A_GETKMASK() {
        return fuse_h_constants_0.A_GETKMASK();
    }
    public static @C("int") int A_SETKMASK() {
        return fuse_h_constants_0.A_SETKMASK();
    }
    public static @C("int") int A_OLDGETQCTRL() {
        return fuse_h_constants_0.A_OLDGETQCTRL();
    }
    public static @C("int") int A_OLDSETQCTRL() {
        return fuse_h_constants_0.A_OLDSETQCTRL();
    }
    public static @C("int") int A_GETCWD() {
        return fuse_h_constants_0.A_GETCWD();
    }
    public static @C("int") int A_GETCAR() {
        return fuse_h_constants_0.A_GETCAR();
    }
    public static @C("int") int A_GETSTAT() {
        return fuse_h_constants_0.A_GETSTAT();
    }
    public static @C("int") int A_SETSTAT() {
        return fuse_h_constants_0.A_SETSTAT();
    }
    public static @C("int") int A_SETUMASK() {
        return fuse_h_constants_0.A_SETUMASK();
    }
    public static @C("int") int A_SETSMASK() {
        return fuse_h_constants_0.A_SETSMASK();
    }
    public static @C("int") int A_OLDGETCOND() {
        return fuse_h_constants_0.A_OLDGETCOND();
    }
    public static @C("int") int A_OLDSETCOND() {
        return fuse_h_constants_0.A_OLDSETCOND();
    }
    public static @C("int") int A_GETCLASS() {
        return fuse_h_constants_0.A_GETCLASS();
    }
    public static @C("int") int A_SETCLASS() {
        return fuse_h_constants_0.A_SETCLASS();
    }
    public static @C("int") int A_GETPINFO() {
        return fuse_h_constants_0.A_GETPINFO();
    }
    public static @C("int") int A_SETPMASK() {
        return fuse_h_constants_0.A_SETPMASK();
    }
    public static @C("int") int A_SETFSIZE() {
        return fuse_h_constants_0.A_SETFSIZE();
    }
    public static @C("int") int A_GETFSIZE() {
        return fuse_h_constants_0.A_GETFSIZE();
    }
    public static @C("int") int A_GETPINFO_ADDR() {
        return fuse_h_constants_0.A_GETPINFO_ADDR();
    }
    public static @C("int") int A_GETKAUDIT() {
        return fuse_h_constants_0.A_GETKAUDIT();
    }
    public static @C("int") int A_SETKAUDIT() {
        return fuse_h_constants_0.A_SETKAUDIT();
    }
    public static @C("int") int A_SENDTRIGGER() {
        return fuse_h_constants_0.A_SENDTRIGGER();
    }
    public static @C("int") int A_GETSINFO_ADDR() {
        return fuse_h_constants_0.A_GETSINFO_ADDR();
    }
    public static @C("int") int A_GETPOLICY() {
        return fuse_h_constants_0.A_GETPOLICY();
    }
    public static @C("int") int A_SETPOLICY() {
        return fuse_h_constants_0.A_SETPOLICY();
    }
    public static @C("int") int A_GETQCTRL() {
        return fuse_h_constants_0.A_GETQCTRL();
    }
    public static @C("int") int A_SETQCTRL() {
        return fuse_h_constants_0.A_SETQCTRL();
    }
    public static @C("int") int A_GETCOND() {
        return fuse_h_constants_0.A_GETCOND();
    }
    public static @C("int") int A_SETCOND() {
        return fuse_h_constants_0.A_SETCOND();
    }
    public static @C("int") int A_GETSFLAGS() {
        return fuse_h_constants_0.A_GETSFLAGS();
    }
    public static @C("int") int A_SETSFLAGS() {
        return fuse_h_constants_0.A_SETSFLAGS();
    }
    public static @C("int") int A_GETCTLMODE() {
        return fuse_h_constants_0.A_GETCTLMODE();
    }
    public static @C("int") int A_SETCTLMODE() {
        return fuse_h_constants_0.A_SETCTLMODE();
    }
    public static @C("int") int A_GETEXPAFTER() {
        return fuse_h_constants_0.A_GETEXPAFTER();
    }
    public static @C("int") int A_SETEXPAFTER() {
        return fuse_h_constants_0.A_SETEXPAFTER();
    }
    public static @C("int") int AUDIT_CNT() {
        return fuse_h_constants_0.AUDIT_CNT();
    }
    public static @C("int") int AUDIT_AHLT() {
        return fuse_h_constants_0.AUDIT_AHLT();
    }
    public static @C("int") int AUDIT_ARGV() {
        return fuse_h_constants_0.AUDIT_ARGV();
    }
    public static @C("int") int AUDIT_ARGE() {
        return fuse_h_constants_0.AUDIT_ARGE();
    }
    public static @C("int") int AUDIT_SEQ() {
        return fuse_h_constants_0.AUDIT_SEQ();
    }
    public static @C("int") int AUDIT_WINDATA() {
        return fuse_h_constants_0.AUDIT_WINDATA();
    }
    public static @C("int") int AUDIT_USER() {
        return fuse_h_constants_0.AUDIT_USER();
    }
    public static @C("int") int AUDIT_GROUP() {
        return fuse_h_constants_0.AUDIT_GROUP();
    }
    public static @C("int") int AUDIT_TRAIL() {
        return fuse_h_constants_0.AUDIT_TRAIL();
    }
    public static @C("int") int AUDIT_PATH() {
        return fuse_h_constants_0.AUDIT_PATH();
    }
    public static @C("int") int AUDIT_SCNT() {
        return fuse_h_constants_0.AUDIT_SCNT();
    }
    public static @C("int") int AUDIT_PUBLIC() {
        return fuse_h_constants_0.AUDIT_PUBLIC();
    }
    public static @C("int") int AUDIT_ZONENAME() {
        return fuse_h_constants_0.AUDIT_ZONENAME();
    }
    public static @C("int") int AUDIT_PERZONE() {
        return fuse_h_constants_0.AUDIT_PERZONE();
    }
    public static @C("int") int AQ_HIWATER() {
        return fuse_h_constants_0.AQ_HIWATER();
    }
    public static @C("int") int AQ_MAXHIGH() {
        return fuse_h_constants_0.AQ_MAXHIGH();
    }
    public static @C("int") int AQ_LOWATER() {
        return fuse_h_constants_0.AQ_LOWATER();
    }
    public static @C("int") int AQ_MAXBUFSZ() {
        return fuse_h_constants_0.AQ_MAXBUFSZ();
    }
    public static @C("int") int AU_FS_MINFREE() {
        return fuse_h_constants_0.AU_FS_MINFREE();
    }
    public static @C("int") int AU_IPv4() {
        return fuse_h_constants_0.AU_IPv4();
    }
    public static @C("int") int AU_IPv6() {
        return fuse_h_constants_0.AU_IPv6();
    }
    public static @C("int") int AU_CLASS_MASK_RESERVED() {
        return fuse_h_constants_0.AU_CLASS_MASK_RESERVED();
    }
    public static @C("int") int TRUE() {
        return fuse_h_constants_0.TRUE();
    }
    public static @C("int") int FALSE() {
        return fuse_h_constants_0.FALSE();
    }
    public static @C("int") int MACH_PORT_NULL() {
        return fuse_h_constants_0.MACH_PORT_NULL();
    }
    public static @C("int") int MACH_PORT_TYPE_SPREQUEST() {
        return fuse_h_constants_0.MACH_PORT_TYPE_SPREQUEST();
    }
    public static @C("int") int MACH_PORT_TYPE_SPREQUEST_DELAYED() {
        return fuse_h_constants_0.MACH_PORT_TYPE_SPREQUEST_DELAYED();
    }
    public static @C("int") int MACH_PORT_SRIGHTS_NONE() {
        return fuse_h_constants_0.MACH_PORT_SRIGHTS_NONE();
    }
    public static @C("int") int MACH_PORT_SRIGHTS_PRESENT() {
        return fuse_h_constants_0.MACH_PORT_SRIGHTS_PRESENT();
    }
    public static @C("int") int MACH_PORT_STATUS_FLAG_TEMPOWNER() {
        return fuse_h_constants_0.MACH_PORT_STATUS_FLAG_TEMPOWNER();
    }
    public static @C("int") int MACH_PORT_STATUS_FLAG_GUARDED() {
        return fuse_h_constants_0.MACH_PORT_STATUS_FLAG_GUARDED();
    }
    public static @C("int") int MACH_PORT_STATUS_FLAG_STRICT_GUARD() {
        return fuse_h_constants_0.MACH_PORT_STATUS_FLAG_STRICT_GUARD();
    }
    public static @C("int") int MACH_PORT_STATUS_FLAG_IMP_DONATION() {
        return fuse_h_constants_0.MACH_PORT_STATUS_FLAG_IMP_DONATION();
    }
    public static @C("int") int MACH_PORT_STATUS_FLAG_REVIVE() {
        return fuse_h_constants_0.MACH_PORT_STATUS_FLAG_REVIVE();
    }
    public static @C("int") int MACH_PORT_STATUS_FLAG_TASKPTR() {
        return fuse_h_constants_0.MACH_PORT_STATUS_FLAG_TASKPTR();
    }
    public static @C("int") int MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE() {
        return fuse_h_constants_0.MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE();
    }
    public static @C("int") int MACH_PORT_STATUS_FLAG_NO_GRANT() {
        return fuse_h_constants_0.MACH_PORT_STATUS_FLAG_NO_GRANT();
    }
    public static @C("int") int MACH_PORT_LIMITS_INFO() {
        return fuse_h_constants_0.MACH_PORT_LIMITS_INFO();
    }
    public static @C("int") int MACH_PORT_RECEIVE_STATUS() {
        return fuse_h_constants_0.MACH_PORT_RECEIVE_STATUS();
    }
    public static @C("int") int MACH_PORT_DNREQUESTS_SIZE() {
        return fuse_h_constants_0.MACH_PORT_DNREQUESTS_SIZE();
    }
    public static @C("int") int MACH_PORT_TEMPOWNER() {
        return fuse_h_constants_0.MACH_PORT_TEMPOWNER();
    }
    public static @C("int") int MACH_PORT_IMPORTANCE_RECEIVER() {
        return fuse_h_constants_0.MACH_PORT_IMPORTANCE_RECEIVER();
    }
    public static @C("int") int MACH_PORT_DENAP_RECEIVER() {
        return fuse_h_constants_0.MACH_PORT_DENAP_RECEIVER();
    }
    public static @C("int") int MACH_PORT_INFO_EXT() {
        return fuse_h_constants_0.MACH_PORT_INFO_EXT();
    }
    public static @C("int") int MACH_PORT_DNREQUESTS_SIZE_COUNT() {
        return fuse_h_constants_0.MACH_PORT_DNREQUESTS_SIZE_COUNT();
    }
    public static @C("int") int MPO_CONTEXT_AS_GUARD() {
        return fuse_h_constants_0.MPO_CONTEXT_AS_GUARD();
    }
    public static @C("int") int MPO_QLIMIT() {
        return fuse_h_constants_0.MPO_QLIMIT();
    }
    public static @C("int") int MPO_TEMPOWNER() {
        return fuse_h_constants_0.MPO_TEMPOWNER();
    }
    public static @C("int") int MPO_IMPORTANCE_RECEIVER() {
        return fuse_h_constants_0.MPO_IMPORTANCE_RECEIVER();
    }
    public static @C("int") int MPO_INSERT_SEND_RIGHT() {
        return fuse_h_constants_0.MPO_INSERT_SEND_RIGHT();
    }
    public static @C("int") int MPO_STRICT() {
        return fuse_h_constants_0.MPO_STRICT();
    }
    public static @C("int") int MPO_DENAP_RECEIVER() {
        return fuse_h_constants_0.MPO_DENAP_RECEIVER();
    }
    public static @C("int") int MPO_IMMOVABLE_RECEIVE() {
        return fuse_h_constants_0.MPO_IMMOVABLE_RECEIVE();
    }
    public static @C("int") int MPO_FILTER_MSG() {
        return fuse_h_constants_0.MPO_FILTER_MSG();
    }
    public static @C("int") int MPO_TG_BLOCK_TRACKING() {
        return fuse_h_constants_0.MPO_TG_BLOCK_TRACKING();
    }
    public static @C("int") int GUARD_TYPE_MACH_PORT() {
        return fuse_h_constants_0.GUARD_TYPE_MACH_PORT();
    }
    public static @C("int") int MPG_STRICT() {
        return fuse_h_constants_0.MPG_STRICT();
    }
    public static @C("int") int MPG_IMMOVABLE_RECEIVE() {
        return fuse_h_constants_0.MPG_IMMOVABLE_RECEIVE();
    }
    public static @C("int") int CRF_NOMEMBERD() {
        return fuse_h_constants_0.CRF_NOMEMBERD();
    }
    public static @C("int") int CRF_MAC_ENFORCE() {
        return fuse_h_constants_0.CRF_MAC_ENFORCE();
    }
    public static @C("int") int XUCRED_VERSION() {
        return fuse_h_constants_0.XUCRED_VERSION();
    }
    public static @C("int") int ITIMER_REAL() {
        return fuse_h_constants_0.ITIMER_REAL();
    }
    public static @C("int") int ITIMER_VIRTUAL() {
        return fuse_h_constants_0.ITIMER_VIRTUAL();
    }
    public static @C("int") int ITIMER_PROF() {
        return fuse_h_constants_0.ITIMER_PROF();
    }
    public static @C("int") int DST_NONE() {
        return fuse_h_constants_0.DST_NONE();
    }
    public static @C("int") int DST_USA() {
        return fuse_h_constants_0.DST_USA();
    }
    public static @C("int") int DST_AUST() {
        return fuse_h_constants_0.DST_AUST();
    }
    public static @C("int") int DST_WET() {
        return fuse_h_constants_0.DST_WET();
    }
    public static @C("int") int DST_MET() {
        return fuse_h_constants_0.DST_MET();
    }
    public static @C("int") int DST_EET() {
        return fuse_h_constants_0.DST_EET();
    }
    public static @C("int") int DST_CAN() {
        return fuse_h_constants_0.DST_CAN();
    }
    public static @C("int") int FSOPT_NOFOLLOW() {
        return fuse_h_constants_0.FSOPT_NOFOLLOW();
    }
    public static @C("int") int FSOPT_NOINMEMUPDATE() {
        return fuse_h_constants_0.FSOPT_NOINMEMUPDATE();
    }
    public static @C("int") int FSOPT_REPORT_FULLSIZE() {
        return fuse_h_constants_0.FSOPT_REPORT_FULLSIZE();
    }
    public static @C("int") int FSOPT_PACK_INVAL_ATTRS() {
        return fuse_h_constants_0.FSOPT_PACK_INVAL_ATTRS();
    }
    public static @C("int") int FSOPT_ATTR_CMN_EXTENDED() {
        return fuse_h_constants_0.FSOPT_ATTR_CMN_EXTENDED();
    }
    public static @C("int") int FSOPT_RETURN_REALDEV() {
        return fuse_h_constants_0.FSOPT_RETURN_REALDEV();
    }
    public static @C("int") int SEARCHFS_MAX_SEARCHPARMS() {
        return fuse_h_constants_0.SEARCHFS_MAX_SEARCHPARMS();
    }
    public static @C("int") int ATTR_BIT_MAP_COUNT() {
        return fuse_h_constants_0.ATTR_BIT_MAP_COUNT();
    }
    public static @C("int") int VOL_CAPABILITIES_FORMAT() {
        return fuse_h_constants_0.VOL_CAPABILITIES_FORMAT();
    }
    public static @C("int") int VOL_CAPABILITIES_INTERFACES() {
        return fuse_h_constants_0.VOL_CAPABILITIES_INTERFACES();
    }
    public static @C("int") int VOL_CAPABILITIES_RESERVED1() {
        return fuse_h_constants_0.VOL_CAPABILITIES_RESERVED1();
    }
    public static @C("int") int VOL_CAPABILITIES_RESERVED2() {
        return fuse_h_constants_0.VOL_CAPABILITIES_RESERVED2();
    }
    public static @C("int") int ATTR_MAX_BUFFER() {
        return fuse_h_constants_0.ATTR_MAX_BUFFER();
    }
    public static @C("int") int VOL_CAP_FMT_PERSISTENTOBJECTIDS() {
        return fuse_h_constants_0.VOL_CAP_FMT_PERSISTENTOBJECTIDS();
    }
    public static @C("int") int VOL_CAP_FMT_SYMBOLICLINKS() {
        return fuse_h_constants_0.VOL_CAP_FMT_SYMBOLICLINKS();
    }
    public static @C("int") int VOL_CAP_FMT_HARDLINKS() {
        return fuse_h_constants_0.VOL_CAP_FMT_HARDLINKS();
    }
    public static @C("int") int VOL_CAP_FMT_JOURNAL() {
        return fuse_h_constants_0.VOL_CAP_FMT_JOURNAL();
    }
    public static @C("int") int VOL_CAP_FMT_JOURNAL_ACTIVE() {
        return fuse_h_constants_0.VOL_CAP_FMT_JOURNAL_ACTIVE();
    }
    public static @C("int") int VOL_CAP_FMT_NO_ROOT_TIMES() {
        return fuse_h_constants_0.VOL_CAP_FMT_NO_ROOT_TIMES();
    }
    public static @C("int") int VOL_CAP_FMT_SPARSE_FILES() {
        return fuse_h_constants_0.VOL_CAP_FMT_SPARSE_FILES();
    }
    public static @C("int") int VOL_CAP_FMT_ZERO_RUNS() {
        return fuse_h_constants_0.VOL_CAP_FMT_ZERO_RUNS();
    }
    public static @C("int") int VOL_CAP_FMT_CASE_SENSITIVE() {
        return fuse_h_constants_0.VOL_CAP_FMT_CASE_SENSITIVE();
    }
    public static @C("int") int VOL_CAP_FMT_CASE_PRESERVING() {
        return fuse_h_constants_0.VOL_CAP_FMT_CASE_PRESERVING();
    }
    public static @C("int") int VOL_CAP_FMT_FAST_STATFS() {
        return fuse_h_constants_0.VOL_CAP_FMT_FAST_STATFS();
    }
    public static @C("int") int VOL_CAP_FMT_2TB_FILESIZE() {
        return fuse_h_constants_0.VOL_CAP_FMT_2TB_FILESIZE();
    }
    public static @C("int") int VOL_CAP_FMT_OPENDENYMODES() {
        return fuse_h_constants_0.VOL_CAP_FMT_OPENDENYMODES();
    }
    public static @C("int") int VOL_CAP_FMT_HIDDEN_FILES() {
        return fuse_h_constants_0.VOL_CAP_FMT_HIDDEN_FILES();
    }
    public static @C("int") int VOL_CAP_FMT_PATH_FROM_ID() {
        return fuse_h_constants_0.VOL_CAP_FMT_PATH_FROM_ID();
    }
    public static @C("int") int VOL_CAP_FMT_NO_VOLUME_SIZES() {
        return fuse_h_constants_0.VOL_CAP_FMT_NO_VOLUME_SIZES();
    }
    public static @C("int") int VOL_CAP_FMT_DECMPFS_COMPRESSION() {
        return fuse_h_constants_0.VOL_CAP_FMT_DECMPFS_COMPRESSION();
    }
    public static @C("int") int VOL_CAP_FMT_64BIT_OBJECT_IDS() {
        return fuse_h_constants_0.VOL_CAP_FMT_64BIT_OBJECT_IDS();
    }
    public static @C("int") int VOL_CAP_FMT_DIR_HARDLINKS() {
        return fuse_h_constants_0.VOL_CAP_FMT_DIR_HARDLINKS();
    }
    public static @C("int") int VOL_CAP_FMT_DOCUMENT_ID() {
        return fuse_h_constants_0.VOL_CAP_FMT_DOCUMENT_ID();
    }
    public static @C("int") int VOL_CAP_FMT_WRITE_GENERATION_COUNT() {
        return fuse_h_constants_0.VOL_CAP_FMT_WRITE_GENERATION_COUNT();
    }
    public static @C("int") int VOL_CAP_FMT_NO_IMMUTABLE_FILES() {
        return fuse_h_constants_0.VOL_CAP_FMT_NO_IMMUTABLE_FILES();
    }
    public static @C("int") int VOL_CAP_FMT_NO_PERMISSIONS() {
        return fuse_h_constants_0.VOL_CAP_FMT_NO_PERMISSIONS();
    }
    public static @C("int") int VOL_CAP_FMT_SHARED_SPACE() {
        return fuse_h_constants_0.VOL_CAP_FMT_SHARED_SPACE();
    }
    public static @C("int") int VOL_CAP_FMT_VOL_GROUPS() {
        return fuse_h_constants_0.VOL_CAP_FMT_VOL_GROUPS();
    }
    public static @C("int") int VOL_CAP_FMT_SEALED() {
        return fuse_h_constants_0.VOL_CAP_FMT_SEALED();
    }
    public static @C("int") int VOL_CAP_INT_SEARCHFS() {
        return fuse_h_constants_0.VOL_CAP_INT_SEARCHFS();
    }
    public static @C("int") int VOL_CAP_INT_ATTRLIST() {
        return fuse_h_constants_0.VOL_CAP_INT_ATTRLIST();
    }
    public static @C("int") int VOL_CAP_INT_NFSEXPORT() {
        return fuse_h_constants_0.VOL_CAP_INT_NFSEXPORT();
    }
    public static @C("int") int VOL_CAP_INT_READDIRATTR() {
        return fuse_h_constants_0.VOL_CAP_INT_READDIRATTR();
    }
    public static @C("int") int VOL_CAP_INT_EXCHANGEDATA() {
        return fuse_h_constants_0.VOL_CAP_INT_EXCHANGEDATA();
    }
    public static @C("int") int VOL_CAP_INT_COPYFILE() {
        return fuse_h_constants_0.VOL_CAP_INT_COPYFILE();
    }
    public static @C("int") int VOL_CAP_INT_ALLOCATE() {
        return fuse_h_constants_0.VOL_CAP_INT_ALLOCATE();
    }
    public static @C("int") int VOL_CAP_INT_VOL_RENAME() {
        return fuse_h_constants_0.VOL_CAP_INT_VOL_RENAME();
    }
    public static @C("int") int VOL_CAP_INT_ADVLOCK() {
        return fuse_h_constants_0.VOL_CAP_INT_ADVLOCK();
    }
    public static @C("int") int VOL_CAP_INT_FLOCK() {
        return fuse_h_constants_0.VOL_CAP_INT_FLOCK();
    }
    public static @C("int") int VOL_CAP_INT_EXTENDED_SECURITY() {
        return fuse_h_constants_0.VOL_CAP_INT_EXTENDED_SECURITY();
    }
    public static @C("int") int VOL_CAP_INT_USERACCESS() {
        return fuse_h_constants_0.VOL_CAP_INT_USERACCESS();
    }
    public static @C("int") int VOL_CAP_INT_MANLOCK() {
        return fuse_h_constants_0.VOL_CAP_INT_MANLOCK();
    }
    public static @C("int") int VOL_CAP_INT_NAMEDSTREAMS() {
        return fuse_h_constants_0.VOL_CAP_INT_NAMEDSTREAMS();
    }
    public static @C("int") int VOL_CAP_INT_EXTENDED_ATTR() {
        return fuse_h_constants_0.VOL_CAP_INT_EXTENDED_ATTR();
    }
    public static @C("int") int VOL_CAP_INT_CLONE() {
        return fuse_h_constants_0.VOL_CAP_INT_CLONE();
    }
    public static @C("int") int VOL_CAP_INT_SNAPSHOT() {
        return fuse_h_constants_0.VOL_CAP_INT_SNAPSHOT();
    }
    public static @C("int") int VOL_CAP_INT_RENAME_SWAP() {
        return fuse_h_constants_0.VOL_CAP_INT_RENAME_SWAP();
    }
    public static @C("int") int VOL_CAP_INT_RENAME_EXCL() {
        return fuse_h_constants_0.VOL_CAP_INT_RENAME_EXCL();
    }
    public static @C("int") int VOL_CAP_INT_RENAME_OPENFAIL() {
        return fuse_h_constants_0.VOL_CAP_INT_RENAME_OPENFAIL();
    }
    public static @C("int") int ATTR_CMN_NAME() {
        return fuse_h_constants_0.ATTR_CMN_NAME();
    }
    public static @C("int") int ATTR_CMN_DEVID() {
        return fuse_h_constants_0.ATTR_CMN_DEVID();
    }
    public static @C("int") int ATTR_CMN_FSID() {
        return fuse_h_constants_0.ATTR_CMN_FSID();
    }
    public static @C("int") int ATTR_CMN_OBJTYPE() {
        return fuse_h_constants_0.ATTR_CMN_OBJTYPE();
    }
    public static @C("int") int ATTR_CMN_OBJTAG() {
        return fuse_h_constants_0.ATTR_CMN_OBJTAG();
    }
    public static @C("int") int ATTR_CMN_OBJID() {
        return fuse_h_constants_0.ATTR_CMN_OBJID();
    }
    public static @C("int") int ATTR_CMN_OBJPERMANENTID() {
        return fuse_h_constants_0.ATTR_CMN_OBJPERMANENTID();
    }
    public static @C("int") int ATTR_CMN_PAROBJID() {
        return fuse_h_constants_0.ATTR_CMN_PAROBJID();
    }
    public static @C("int") int ATTR_CMN_SCRIPT() {
        return fuse_h_constants_0.ATTR_CMN_SCRIPT();
    }
    public static @C("int") int ATTR_CMN_CRTIME() {
        return fuse_h_constants_0.ATTR_CMN_CRTIME();
    }
    public static @C("int") int ATTR_CMN_MODTIME() {
        return fuse_h_constants_0.ATTR_CMN_MODTIME();
    }
    public static @C("int") int ATTR_CMN_CHGTIME() {
        return fuse_h_constants_0.ATTR_CMN_CHGTIME();
    }
    public static @C("int") int ATTR_CMN_ACCTIME() {
        return fuse_h_constants_0.ATTR_CMN_ACCTIME();
    }
    public static @C("int") int ATTR_CMN_BKUPTIME() {
        return fuse_h_constants_0.ATTR_CMN_BKUPTIME();
    }
    public static @C("int") int ATTR_CMN_FNDRINFO() {
        return fuse_h_constants_0.ATTR_CMN_FNDRINFO();
    }
    public static @C("int") int ATTR_CMN_OWNERID() {
        return fuse_h_constants_0.ATTR_CMN_OWNERID();
    }
    public static @C("int") int ATTR_CMN_GRPID() {
        return fuse_h_constants_0.ATTR_CMN_GRPID();
    }
    public static @C("int") int ATTR_CMN_ACCESSMASK() {
        return fuse_h_constants_0.ATTR_CMN_ACCESSMASK();
    }
    public static @C("int") int ATTR_CMN_FLAGS() {
        return fuse_h_constants_0.ATTR_CMN_FLAGS();
    }
    public static @C("int") int ATTR_CMN_GEN_COUNT() {
        return fuse_h_constants_0.ATTR_CMN_GEN_COUNT();
    }
    public static @C("int") int ATTR_CMN_DOCUMENT_ID() {
        return fuse_h_constants_0.ATTR_CMN_DOCUMENT_ID();
    }
    public static @C("int") int ATTR_CMN_USERACCESS() {
        return fuse_h_constants_0.ATTR_CMN_USERACCESS();
    }
    public static @C("int") int ATTR_CMN_EXTENDED_SECURITY() {
        return fuse_h_constants_0.ATTR_CMN_EXTENDED_SECURITY();
    }
    public static @C("int") int ATTR_CMN_UUID() {
        return fuse_h_constants_0.ATTR_CMN_UUID();
    }
    public static @C("int") int ATTR_CMN_GRPUUID() {
        return fuse_h_constants_0.ATTR_CMN_GRPUUID();
    }
    public static @C("int") int ATTR_CMN_FILEID() {
        return fuse_h_constants_0.ATTR_CMN_FILEID();
    }
    public static @C("int") int ATTR_CMN_PARENTID() {
        return fuse_h_constants_0.ATTR_CMN_PARENTID();
    }
    public static @C("int") int ATTR_CMN_FULLPATH() {
        return fuse_h_constants_0.ATTR_CMN_FULLPATH();
    }
    public static @C("int") int ATTR_CMN_ADDEDTIME() {
        return fuse_h_constants_0.ATTR_CMN_ADDEDTIME();
    }
    public static @C("int") int ATTR_CMN_ERROR() {
        return fuse_h_constants_0.ATTR_CMN_ERROR();
    }
    public static @C("int") int ATTR_CMN_DATA_PROTECT_FLAGS() {
        return fuse_h_constants_0.ATTR_CMN_DATA_PROTECT_FLAGS();
    }
    public static @C("int") int ATTR_CMN_SETMASK() {
        return fuse_h_constants_0.ATTR_CMN_SETMASK();
    }
    public static @C("int") int ATTR_CMN_VOLSETMASK() {
        return fuse_h_constants_0.ATTR_CMN_VOLSETMASK();
    }
    public static @C("int") int ATTR_VOL_FSTYPE() {
        return fuse_h_constants_0.ATTR_VOL_FSTYPE();
    }
    public static @C("int") int ATTR_VOL_SIGNATURE() {
        return fuse_h_constants_0.ATTR_VOL_SIGNATURE();
    }
    public static @C("int") int ATTR_VOL_SIZE() {
        return fuse_h_constants_0.ATTR_VOL_SIZE();
    }
    public static @C("int") int ATTR_VOL_SPACEFREE() {
        return fuse_h_constants_0.ATTR_VOL_SPACEFREE();
    }
    public static @C("int") int ATTR_VOL_SPACEAVAIL() {
        return fuse_h_constants_0.ATTR_VOL_SPACEAVAIL();
    }
    public static @C("int") int ATTR_VOL_MINALLOCATION() {
        return fuse_h_constants_0.ATTR_VOL_MINALLOCATION();
    }
    public static @C("int") int ATTR_VOL_ALLOCATIONCLUMP() {
        return fuse_h_constants_0.ATTR_VOL_ALLOCATIONCLUMP();
    }
    public static @C("int") int ATTR_VOL_IOBLOCKSIZE() {
        return fuse_h_constants_0.ATTR_VOL_IOBLOCKSIZE();
    }
    public static @C("int") int ATTR_VOL_OBJCOUNT() {
        return fuse_h_constants_0.ATTR_VOL_OBJCOUNT();
    }
    public static @C("int") int ATTR_VOL_FILECOUNT() {
        return fuse_h_constants_0.ATTR_VOL_FILECOUNT();
    }
    public static @C("int") int ATTR_VOL_DIRCOUNT() {
        return fuse_h_constants_0.ATTR_VOL_DIRCOUNT();
    }
    public static @C("int") int ATTR_VOL_MAXOBJCOUNT() {
        return fuse_h_constants_0.ATTR_VOL_MAXOBJCOUNT();
    }
    public static @C("int") int ATTR_VOL_MOUNTPOINT() {
        return fuse_h_constants_0.ATTR_VOL_MOUNTPOINT();
    }
    public static @C("int") int ATTR_VOL_NAME() {
        return fuse_h_constants_0.ATTR_VOL_NAME();
    }
    public static @C("int") int ATTR_VOL_MOUNTFLAGS() {
        return fuse_h_constants_0.ATTR_VOL_MOUNTFLAGS();
    }
    public static @C("int") int ATTR_VOL_MOUNTEDDEVICE() {
        return fuse_h_constants_0.ATTR_VOL_MOUNTEDDEVICE();
    }
    public static @C("int") int ATTR_VOL_ENCODINGSUSED() {
        return fuse_h_constants_0.ATTR_VOL_ENCODINGSUSED();
    }
    public static @C("int") int ATTR_VOL_CAPABILITIES() {
        return fuse_h_constants_0.ATTR_VOL_CAPABILITIES();
    }
    public static @C("int") int ATTR_VOL_UUID() {
        return fuse_h_constants_0.ATTR_VOL_UUID();
    }
    public static @C("int") int ATTR_VOL_QUOTA_SIZE() {
        return fuse_h_constants_0.ATTR_VOL_QUOTA_SIZE();
    }
    public static @C("int") int ATTR_VOL_RESERVED_SIZE() {
        return fuse_h_constants_0.ATTR_VOL_RESERVED_SIZE();
    }
    public static @C("int") int ATTR_VOL_ATTRIBUTES() {
        return fuse_h_constants_0.ATTR_VOL_ATTRIBUTES();
    }
    public static @C("int") int ATTR_DIR_LINKCOUNT() {
        return fuse_h_constants_0.ATTR_DIR_LINKCOUNT();
    }
    public static @C("int") int ATTR_DIR_ENTRYCOUNT() {
        return fuse_h_constants_0.ATTR_DIR_ENTRYCOUNT();
    }
    public static @C("int") int ATTR_DIR_MOUNTSTATUS() {
        return fuse_h_constants_0.ATTR_DIR_MOUNTSTATUS();
    }
    public static @C("int") int ATTR_DIR_ALLOCSIZE() {
        return fuse_h_constants_0.ATTR_DIR_ALLOCSIZE();
    }
    public static @C("int") int ATTR_DIR_IOBLOCKSIZE() {
        return fuse_h_constants_0.ATTR_DIR_IOBLOCKSIZE();
    }
    public static @C("int") int ATTR_DIR_DATALENGTH() {
        return fuse_h_constants_0.ATTR_DIR_DATALENGTH();
    }
    public static @C("int") int DIR_MNTSTATUS_MNTPOINT() {
        return fuse_h_constants_0.DIR_MNTSTATUS_MNTPOINT();
    }
    public static @C("int") int DIR_MNTSTATUS_TRIGGER() {
        return fuse_h_constants_0.DIR_MNTSTATUS_TRIGGER();
    }
    public static @C("int") int ATTR_DIR_VALIDMASK() {
        return fuse_h_constants_0.ATTR_DIR_VALIDMASK();
    }
    public static @C("int") int ATTR_DIR_SETMASK() {
        return fuse_h_constants_0.ATTR_DIR_SETMASK();
    }
    public static @C("int") int ATTR_FILE_LINKCOUNT() {
        return fuse_h_constants_0.ATTR_FILE_LINKCOUNT();
    }
    public static @C("int") int ATTR_FILE_TOTALSIZE() {
        return fuse_h_constants_0.ATTR_FILE_TOTALSIZE();
    }
    public static @C("int") int ATTR_FILE_ALLOCSIZE() {
        return fuse_h_constants_0.ATTR_FILE_ALLOCSIZE();
    }
    public static @C("int") int ATTR_FILE_IOBLOCKSIZE() {
        return fuse_h_constants_0.ATTR_FILE_IOBLOCKSIZE();
    }
    public static @C("int") int ATTR_FILE_DEVTYPE() {
        return fuse_h_constants_0.ATTR_FILE_DEVTYPE();
    }
    public static @C("int") int ATTR_FILE_FORKCOUNT() {
        return fuse_h_constants_0.ATTR_FILE_FORKCOUNT();
    }
    public static @C("int") int ATTR_FILE_FORKLIST() {
        return fuse_h_constants_0.ATTR_FILE_FORKLIST();
    }
    public static @C("int") int ATTR_FILE_DATALENGTH() {
        return fuse_h_constants_0.ATTR_FILE_DATALENGTH();
    }
    public static @C("int") int ATTR_FILE_DATAALLOCSIZE() {
        return fuse_h_constants_0.ATTR_FILE_DATAALLOCSIZE();
    }
    public static @C("int") int ATTR_FILE_RSRCLENGTH() {
        return fuse_h_constants_0.ATTR_FILE_RSRCLENGTH();
    }
    public static @C("int") int ATTR_FILE_RSRCALLOCSIZE() {
        return fuse_h_constants_0.ATTR_FILE_RSRCALLOCSIZE();
    }
    public static @C("int") int ATTR_FILE_VALIDMASK() {
        return fuse_h_constants_0.ATTR_FILE_VALIDMASK();
    }
    public static @C("int") int ATTR_FILE_SETMASK() {
        return fuse_h_constants_0.ATTR_FILE_SETMASK();
    }
    public static @C("int") int ATTR_CMNEXT_RELPATH() {
        return fuse_h_constants_0.ATTR_CMNEXT_RELPATH();
    }
    public static @C("int") int ATTR_CMNEXT_PRIVATESIZE() {
        return fuse_h_constants_0.ATTR_CMNEXT_PRIVATESIZE();
    }
    public static @C("int") int ATTR_CMNEXT_LINKID() {
        return fuse_h_constants_0.ATTR_CMNEXT_LINKID();
    }
    public static @C("int") int ATTR_CMNEXT_NOFIRMLINKPATH() {
        return fuse_h_constants_0.ATTR_CMNEXT_NOFIRMLINKPATH();
    }
    public static @C("int") int ATTR_CMNEXT_REALDEVID() {
        return fuse_h_constants_0.ATTR_CMNEXT_REALDEVID();
    }
    public static @C("int") int ATTR_CMNEXT_REALFSID() {
        return fuse_h_constants_0.ATTR_CMNEXT_REALFSID();
    }
    public static @C("int") int ATTR_CMNEXT_CLONEID() {
        return fuse_h_constants_0.ATTR_CMNEXT_CLONEID();
    }
    public static @C("int") int ATTR_CMNEXT_EXT_FLAGS() {
        return fuse_h_constants_0.ATTR_CMNEXT_EXT_FLAGS();
    }
    public static @C("int") int ATTR_CMNEXT_RECURSIVE_GENCOUNT() {
        return fuse_h_constants_0.ATTR_CMNEXT_RECURSIVE_GENCOUNT();
    }
    public static @C("int") int ATTR_CMNEXT_VALIDMASK() {
        return fuse_h_constants_0.ATTR_CMNEXT_VALIDMASK();
    }
    public static @C("int") int ATTR_CMNEXT_SETMASK() {
        return fuse_h_constants_0.ATTR_CMNEXT_SETMASK();
    }
    public static @C("int") int ATTR_FORK_TOTALSIZE() {
        return fuse_h_constants_0.ATTR_FORK_TOTALSIZE();
    }
    public static @C("int") int ATTR_FORK_ALLOCSIZE() {
        return fuse_h_constants_0.ATTR_FORK_ALLOCSIZE();
    }
    public static @C("int") int ATTR_FORK_VALIDMASK() {
        return fuse_h_constants_0.ATTR_FORK_VALIDMASK();
    }
    public static @C("int") int ATTR_FORK_SETMASK() {
        return fuse_h_constants_0.ATTR_FORK_SETMASK();
    }
    public static @C("int") int ATTR_CMN_NAMEDATTRCOUNT() {
        return fuse_h_constants_0.ATTR_CMN_NAMEDATTRCOUNT();
    }
    public static @C("int") int ATTR_CMN_NAMEDATTRLIST() {
        return fuse_h_constants_0.ATTR_CMN_NAMEDATTRLIST();
    }
    public static @C("int") int ATTR_FILE_CLUMPSIZE() {
        return fuse_h_constants_0.ATTR_FILE_CLUMPSIZE();
    }
    public static @C("int") int ATTR_FILE_FILETYPE() {
        return fuse_h_constants_0.ATTR_FILE_FILETYPE();
    }
    public static @C("int") int ATTR_FILE_DATAEXTENTS() {
        return fuse_h_constants_0.ATTR_FILE_DATAEXTENTS();
    }
    public static @C("int") int ATTR_FILE_RSRCEXTENTS() {
        return fuse_h_constants_0.ATTR_FILE_RSRCEXTENTS();
    }
    public static @C("int") int SRCHFS_START() {
        return fuse_h_constants_0.SRCHFS_START();
    }
    public static @C("int") int SRCHFS_MATCHPARTIALNAMES() {
        return fuse_h_constants_0.SRCHFS_MATCHPARTIALNAMES();
    }
    public static @C("int") int SRCHFS_MATCHDIRS() {
        return fuse_h_constants_0.SRCHFS_MATCHDIRS();
    }
    public static @C("int") int SRCHFS_MATCHFILES() {
        return fuse_h_constants_0.SRCHFS_MATCHFILES();
    }
    public static @C("int") int SRCHFS_SKIPLINKS() {
        return fuse_h_constants_0.SRCHFS_SKIPLINKS();
    }
    public static @C("int") int SRCHFS_SKIPINVISIBLE() {
        return fuse_h_constants_0.SRCHFS_SKIPINVISIBLE();
    }
    public static @C("int") int SRCHFS_SKIPPACKAGES() {
        return fuse_h_constants_0.SRCHFS_SKIPPACKAGES();
    }
    public static @C("int") int SRCHFS_SKIPINAPPROPRIATE() {
        return fuse_h_constants_0.SRCHFS_SKIPINAPPROPRIATE();
    }
    public static @C("int") int MFSNAMELEN() {
        return fuse_h_constants_0.MFSNAMELEN();
    }
    public static @C("int") int MFSTYPENAMELEN() {
        return fuse_h_constants_0.MFSTYPENAMELEN();
    }
    public static @C("int") int MNT_EXT_ROOT_DATA_VOL() {
        return fuse_h_constants_0.MNT_EXT_ROOT_DATA_VOL();
    }
    public static @C("int") int MNT_RDONLY() {
        return fuse_h_constants_0.MNT_RDONLY();
    }
    public static @C("int") int MNT_SYNCHRONOUS() {
        return fuse_h_constants_0.MNT_SYNCHRONOUS();
    }
    public static @C("int") int MNT_NOEXEC() {
        return fuse_h_constants_0.MNT_NOEXEC();
    }
    public static @C("int") int MNT_NOSUID() {
        return fuse_h_constants_0.MNT_NOSUID();
    }
    public static @C("int") int MNT_NODEV() {
        return fuse_h_constants_0.MNT_NODEV();
    }
    public static @C("int") int MNT_UNION() {
        return fuse_h_constants_0.MNT_UNION();
    }
    public static @C("int") int MNT_ASYNC() {
        return fuse_h_constants_0.MNT_ASYNC();
    }
    public static @C("int") int MNT_CPROTECT() {
        return fuse_h_constants_0.MNT_CPROTECT();
    }
    public static @C("int") int MNT_EXPORTED() {
        return fuse_h_constants_0.MNT_EXPORTED();
    }
    public static @C("int") int MNT_REMOVABLE() {
        return fuse_h_constants_0.MNT_REMOVABLE();
    }
    public static @C("int") int MNT_QUARANTINE() {
        return fuse_h_constants_0.MNT_QUARANTINE();
    }
    public static @C("int") int MNT_LOCAL() {
        return fuse_h_constants_0.MNT_LOCAL();
    }
    public static @C("int") int MNT_QUOTA() {
        return fuse_h_constants_0.MNT_QUOTA();
    }
    public static @C("int") int MNT_ROOTFS() {
        return fuse_h_constants_0.MNT_ROOTFS();
    }
    public static @C("int") int MNT_DOVOLFS() {
        return fuse_h_constants_0.MNT_DOVOLFS();
    }
    public static @C("int") int MNT_DONTBROWSE() {
        return fuse_h_constants_0.MNT_DONTBROWSE();
    }
    public static @C("int") int MNT_IGNORE_OWNERSHIP() {
        return fuse_h_constants_0.MNT_IGNORE_OWNERSHIP();
    }
    public static @C("int") int MNT_AUTOMOUNTED() {
        return fuse_h_constants_0.MNT_AUTOMOUNTED();
    }
    public static @C("int") int MNT_JOURNALED() {
        return fuse_h_constants_0.MNT_JOURNALED();
    }
    public static @C("int") int MNT_NOUSERXATTR() {
        return fuse_h_constants_0.MNT_NOUSERXATTR();
    }
    public static @C("int") int MNT_DEFWRITE() {
        return fuse_h_constants_0.MNT_DEFWRITE();
    }
    public static @C("int") int MNT_MULTILABEL() {
        return fuse_h_constants_0.MNT_MULTILABEL();
    }
    public static @C("int") int MNT_NOATIME() {
        return fuse_h_constants_0.MNT_NOATIME();
    }
    public static @C("int") int MNT_SNAPSHOT() {
        return fuse_h_constants_0.MNT_SNAPSHOT();
    }
    public static @C("int") int MNT_UPDATE() {
        return fuse_h_constants_0.MNT_UPDATE();
    }
    public static @C("int") int MNT_NOBLOCK() {
        return fuse_h_constants_0.MNT_NOBLOCK();
    }
    public static @C("int") int MNT_RELOAD() {
        return fuse_h_constants_0.MNT_RELOAD();
    }
    public static @C("int") int MNT_FORCE() {
        return fuse_h_constants_0.MNT_FORCE();
    }
    public static @C("int") int VFS_GENERIC() {
        return fuse_h_constants_0.VFS_GENERIC();
    }
    public static @C("int") int VFS_NUMMNTOPS() {
        return fuse_h_constants_0.VFS_NUMMNTOPS();
    }
    public static @C("int") int VFS_MAXTYPENUM() {
        return fuse_h_constants_0.VFS_MAXTYPENUM();
    }
    public static @C("int") int VFS_CONF() {
        return fuse_h_constants_0.VFS_CONF();
    }
    public static @C("int") int MNT_WAIT() {
        return fuse_h_constants_0.MNT_WAIT();
    }
    public static @C("int") int MNT_NOWAIT() {
        return fuse_h_constants_0.MNT_NOWAIT();
    }
    public static @C("int") int MNT_DWAIT() {
        return fuse_h_constants_0.MNT_DWAIT();
    }
    public static @C("int") int VFS_CTL_VERS1() {
        return fuse_h_constants_0.VFS_CTL_VERS1();
    }
    public static @C("int") int VFS_CTL_OSTATFS() {
        return fuse_h_constants_0.VFS_CTL_OSTATFS();
    }
    public static @C("int") int VFS_CTL_UMOUNT() {
        return fuse_h_constants_0.VFS_CTL_UMOUNT();
    }
    public static @C("int") int VFS_CTL_QUERY() {
        return fuse_h_constants_0.VFS_CTL_QUERY();
    }
    public static @C("int") int VFS_CTL_NEWADDR() {
        return fuse_h_constants_0.VFS_CTL_NEWADDR();
    }
    public static @C("int") int VFS_CTL_TIMEO() {
        return fuse_h_constants_0.VFS_CTL_TIMEO();
    }
    public static @C("int") int VFS_CTL_NOLOCKS() {
        return fuse_h_constants_0.VFS_CTL_NOLOCKS();
    }
    public static @C("int") int VFS_CTL_SADDR() {
        return fuse_h_constants_0.VFS_CTL_SADDR();
    }
    public static @C("int") int VFS_CTL_DISC() {
        return fuse_h_constants_0.VFS_CTL_DISC();
    }
    public static @C("int") int VFS_CTL_SERVERINFO() {
        return fuse_h_constants_0.VFS_CTL_SERVERINFO();
    }
    public static @C("int") int VFS_CTL_NSTATUS() {
        return fuse_h_constants_0.VFS_CTL_NSTATUS();
    }
    public static @C("int") int VFS_CTL_STATFS64() {
        return fuse_h_constants_0.VFS_CTL_STATFS64();
    }
    public static @C("int") int VQ_NOTRESP() {
        return fuse_h_constants_0.VQ_NOTRESP();
    }
    public static @C("int") int VQ_NEEDAUTH() {
        return fuse_h_constants_0.VQ_NEEDAUTH();
    }
    public static @C("int") int VQ_LOWDISK() {
        return fuse_h_constants_0.VQ_LOWDISK();
    }
    public static @C("int") int VQ_MOUNT() {
        return fuse_h_constants_0.VQ_MOUNT();
    }
    public static @C("int") int VQ_UNMOUNT() {
        return fuse_h_constants_0.VQ_UNMOUNT();
    }
    public static @C("int") int VQ_DEAD() {
        return fuse_h_constants_0.VQ_DEAD();
    }
    public static @C("int") int VQ_ASSIST() {
        return fuse_h_constants_0.VQ_ASSIST();
    }
    public static @C("int") int VQ_NOTRESPLOCK() {
        return fuse_h_constants_0.VQ_NOTRESPLOCK();
    }
    public static @C("int") int VQ_UPDATE() {
        return fuse_h_constants_0.VQ_UPDATE();
    }
    public static @C("int") int VQ_VERYLOWDISK() {
        return fuse_h_constants_0.VQ_VERYLOWDISK();
    }
    public static @C("int") int VQ_SYNCEVENT() {
        return fuse_h_constants_0.VQ_SYNCEVENT();
    }
    public static @C("int") int VQ_SERVEREVENT() {
        return fuse_h_constants_0.VQ_SERVEREVENT();
    }
    public static @C("int") int VQ_QUOTA() {
        return fuse_h_constants_0.VQ_QUOTA();
    }
    public static @C("int") int VQ_NEARLOWDISK() {
        return fuse_h_constants_0.VQ_NEARLOWDISK();
    }
    public static @C("int") int VQ_DESIRED_DISK() {
        return fuse_h_constants_0.VQ_DESIRED_DISK();
    }
    public static @C("int") int VQ_FREE_SPACE_CHANGE() {
        return fuse_h_constants_0.VQ_FREE_SPACE_CHANGE();
    }
    public static @C("int") int VQ_FLAG10000() {
        return fuse_h_constants_0.VQ_FLAG10000();
    }
    public static @C("int") int NFSV4_MAX_FH_SIZE() {
        return fuse_h_constants_0.NFSV4_MAX_FH_SIZE();
    }
    public static @C("int") int NFSV3_MAX_FH_SIZE() {
        return fuse_h_constants_0.NFSV3_MAX_FH_SIZE();
    }
    public static @C("int") int NFSV2_MAX_FH_SIZE() {
        return fuse_h_constants_0.NFSV2_MAX_FH_SIZE();
    }
    @C("struct fuse_opt")public static class fuse_opt {

        /* package-private */ fuse_opt() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.fuse_opt$struct$LAYOUT();
        }
        public static VarHandle templ$VH() {
            return fuse_h_constants_0.fuse_opt$templ$VH();
        }
        public static  @C("char*") MemoryAddress templ$get(@C("struct fuse_opt") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_opt$templ$VH().get(seg);
        }
        public static  @C("char*") MemoryAddress templ$get(@C("struct fuse_opt") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_opt$templ$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void templ$set(@C("struct fuse_opt") MemorySegment seg, @C("char*") MemoryAddress x) {
            fuse_h_constants_0.fuse_opt$templ$VH().set(seg, x);
        }
        public static void templ$set(@C("struct fuse_opt") MemorySegment seg, long index, @C("char*") MemoryAddress x) {
            fuse_h_constants_0.fuse_opt$templ$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle offset$VH() {
            return fuse_h_constants_0.fuse_opt$offset$VH();
        }
        public static  @C("unsigned long") long offset$get(@C("struct fuse_opt") MemorySegment seg) {
            return (long)fuse_h_constants_0.fuse_opt$offset$VH().get(seg);
        }
        public static  @C("unsigned long") long offset$get(@C("struct fuse_opt") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.fuse_opt$offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void offset$set(@C("struct fuse_opt") MemorySegment seg, @C("unsigned long") long x) {
            fuse_h_constants_0.fuse_opt$offset$VH().set(seg, x);
        }
        public static void offset$set(@C("struct fuse_opt") MemorySegment seg, long index, @C("unsigned long") long x) {
            fuse_h_constants_0.fuse_opt$offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle value$VH() {
            return fuse_h_constants_0.fuse_opt$value$VH();
        }
        public static  @C("int") int value$get(@C("struct fuse_opt") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_opt$value$VH().get(seg);
        }
        public static  @C("int") int value$get(@C("struct fuse_opt") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_opt$value$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void value$set(@C("struct fuse_opt") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_0.fuse_opt$value$VH().set(seg, x);
        }
        public static void value$set(@C("struct fuse_opt") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_0.fuse_opt$value$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_opt") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_opt") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_opt[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_opt[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_opt*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_opt*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_opt") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fuse_args")public static class fuse_args {

        /* package-private */ fuse_args() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.fuse_args$struct$LAYOUT();
        }
        public static VarHandle argc$VH() {
            return fuse_h_constants_0.fuse_args$argc$VH();
        }
        public static  @C("int") int argc$get(@C("struct fuse_args") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_args$argc$VH().get(seg);
        }
        public static  @C("int") int argc$get(@C("struct fuse_args") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_args$argc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void argc$set(@C("struct fuse_args") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_0.fuse_args$argc$VH().set(seg, x);
        }
        public static void argc$set(@C("struct fuse_args") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_0.fuse_args$argc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle argv$VH() {
            return fuse_h_constants_0.fuse_args$argv$VH();
        }
        public static  @C("char**") MemoryAddress argv$get(@C("struct fuse_args") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_args$argv$VH().get(seg);
        }
        public static  @C("char**") MemoryAddress argv$get(@C("struct fuse_args") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_args$argv$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void argv$set(@C("struct fuse_args") MemorySegment seg, @C("char**") MemoryAddress x) {
            fuse_h_constants_0.fuse_args$argv$VH().set(seg, x);
        }
        public static void argv$set(@C("struct fuse_args") MemorySegment seg, long index, @C("char**") MemoryAddress x) {
            fuse_h_constants_0.fuse_args$argv$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle allocated$VH() {
            return fuse_h_constants_0.fuse_args$allocated$VH();
        }
        public static  @C("int") int allocated$get(@C("struct fuse_args") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_args$allocated$VH().get(seg);
        }
        public static  @C("int") int allocated$get(@C("struct fuse_args") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_args$allocated$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void allocated$set(@C("struct fuse_args") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_0.fuse_args$allocated$VH().set(seg, x);
        }
        public static void allocated$set(@C("struct fuse_args") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_0.fuse_args$allocated$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_args") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_args") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_args[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_args[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_args*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_args*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_args") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle fuse_opt_parse$MH() {
        return fuse_h_constants_1.fuse_opt_parse$MH();
    }
    public static interface fuse_opt_parse$proc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  @C("fuse_opt_proc_t") MemorySegment allocate(fuse_opt_parse$proc fi) {
            return RuntimeHelper.upcallStub(fuse_opt_parse$proc.class, fi, fuse_h_constants_1.fuse_opt_parse$proc$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("fuse_opt_proc_t") MemorySegment allocate(fuse_opt_parse$proc fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static @C("int") int fuse_opt_parse (@C("struct fuse_args*") Addressable args, @C("void*") Addressable data, @C("struct fuse_opt[]") Addressable opts, @C("fuse_opt_proc_t") Addressable proc) {
        try {
            return (int)fuse_h_constants_1.fuse_opt_parse$MH().invokeExact(args.address(), data.address(), opts.address(), proc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_opt_add_opt$MH() {
        return fuse_h_constants_1.fuse_opt_add_opt$MH();
    }
    public static @C("int") int fuse_opt_add_opt (@C("char**") Addressable opts, @C("char*") Addressable opt) {
        try {
            return (int)fuse_h_constants_1.fuse_opt_add_opt$MH().invokeExact(opts.address(), opt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_opt_add_opt_escaped$MH() {
        return fuse_h_constants_1.fuse_opt_add_opt_escaped$MH();
    }
    public static @C("int") int fuse_opt_add_opt_escaped (@C("char**") Addressable opts, @C("char*") Addressable opt) {
        try {
            return (int)fuse_h_constants_1.fuse_opt_add_opt_escaped$MH().invokeExact(opts.address(), opt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_opt_add_arg$MH() {
        return fuse_h_constants_1.fuse_opt_add_arg$MH();
    }
    public static @C("int") int fuse_opt_add_arg (@C("struct fuse_args*") Addressable args, @C("char*") Addressable arg) {
        try {
            return (int)fuse_h_constants_1.fuse_opt_add_arg$MH().invokeExact(args.address(), arg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_opt_insert_arg$MH() {
        return fuse_h_constants_1.fuse_opt_insert_arg$MH();
    }
    public static @C("int") int fuse_opt_insert_arg (@C("struct fuse_args*") Addressable args, @C("int") int pos, @C("char*") Addressable arg) {
        try {
            return (int)fuse_h_constants_1.fuse_opt_insert_arg$MH().invokeExact(args.address(), pos, arg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_opt_free_args$MH() {
        return fuse_h_constants_1.fuse_opt_free_args$MH();
    }
    public static void fuse_opt_free_args (@C("struct fuse_args*") Addressable args) {
        try {
            fuse_h_constants_1.fuse_opt_free_args$MH().invokeExact(args.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_opt_match$MH() {
        return fuse_h_constants_1.fuse_opt_match$MH();
    }
    public static @C("int") int fuse_opt_match (@C("struct fuse_opt[]") Addressable opts, @C("char*") Addressable opt) {
        try {
            return (int)fuse_h_constants_1.fuse_opt_match$MH().invokeExact(opts.address(), opt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("short") ValueLayout int16_t = C_SHORT;
    public static @C("int") ValueLayout int32_t = C_INT;
    public static @C("long long") ValueLayout int64_t = C_LONG_LONG;
    public static @C("short") ValueLayout int_least16_t = C_SHORT;
    public static @C("int") ValueLayout int_least32_t = C_INT;
    public static @C("long long") ValueLayout int_least64_t = C_LONG_LONG;
    public static @C("short") ValueLayout int_fast16_t = C_SHORT;
    public static @C("int") ValueLayout int_fast32_t = C_INT;
    public static @C("long long") ValueLayout int_fast64_t = C_LONG_LONG;
    public static @C("short") ValueLayout __int16_t = C_SHORT;
    public static @C("int") ValueLayout __int32_t = C_INT;
    public static @C("long long") ValueLayout __int64_t = C_LONG_LONG;
    public static @C("long") ValueLayout __darwin_intptr_t = C_LONG;
    public static @C("int") ValueLayout __darwin_ct_rune_t = C_INT;
    @C("union ")public static class __mbstate_t {

        /* package-private */ __mbstate_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.__mbstate_t$union$LAYOUT();
        }
        public static MemorySegment __mbstate8$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 128));
        }
        public static VarHandle _mbstateL$VH() {
            return fuse_h_constants_1.__mbstate_t$_mbstateL$VH();
        }
        public static  @C("long long") long _mbstateL$get(@C("union ") MemorySegment seg) {
            return (long)fuse_h_constants_1.__mbstate_t$_mbstateL$VH().get(seg);
        }
        public static  @C("long long") long _mbstateL$get(@C("union ") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.__mbstate_t$_mbstateL$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void _mbstateL$set(@C("union ") MemorySegment seg, @C("long long") long x) {
            fuse_h_constants_1.__mbstate_t$_mbstateL$VH().set(seg, x);
        }
        public static void _mbstateL$set(@C("union ") MemorySegment seg, long index, @C("long long") long x) {
            fuse_h_constants_1.__mbstate_t$_mbstateL$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union ")public static class __darwin_mbstate_t {

        /* package-private */ __darwin_mbstate_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.__darwin_mbstate_t$union$LAYOUT();
        }
        public static MemorySegment __mbstate8$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 128));
        }
        public static VarHandle _mbstateL$VH() {
            return fuse_h_constants_1.__darwin_mbstate_t$_mbstateL$VH();
        }
        public static  @C("long long") long _mbstateL$get(@C("union ") MemorySegment seg) {
            return (long)fuse_h_constants_1.__darwin_mbstate_t$_mbstateL$VH().get(seg);
        }
        public static  @C("long long") long _mbstateL$get(@C("union ") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.__darwin_mbstate_t$_mbstateL$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void _mbstateL$set(@C("union ") MemorySegment seg, @C("long long") long x) {
            fuse_h_constants_1.__darwin_mbstate_t$_mbstateL$VH().set(seg, x);
        }
        public static void _mbstateL$set(@C("union ") MemorySegment seg, long index, @C("long long") long x) {
            fuse_h_constants_1.__darwin_mbstate_t$_mbstateL$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static @C("long") ValueLayout __darwin_ptrdiff_t = C_LONG;
    @C("struct __darwin_pthread_handler_rec")public static class __darwin_pthread_handler_rec {

        /* package-private */ __darwin_pthread_handler_rec() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.__darwin_pthread_handler_rec$struct$LAYOUT();
        }
        public static interface __routine {

            void apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("void(*)(void*)") MemorySegment allocate(__routine fi) {
                return RuntimeHelper.upcallStub(__routine.class, fi, fuse_h_constants_1.__routine$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
            }
            public static  @C("void(*)(void*)") MemorySegment allocate(__routine fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle __routine$VH() {
            return fuse_h_constants_1.__darwin_pthread_handler_rec$__routine$VH();
        }
        public static  @C("void(*)(void*)") MemoryAddress __routine$get(@C("struct __darwin_pthread_handler_rec") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.__darwin_pthread_handler_rec$__routine$VH().get(seg);
        }
        public static  @C("void(*)(void*)") MemoryAddress __routine$get(@C("struct __darwin_pthread_handler_rec") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.__darwin_pthread_handler_rec$__routine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __routine$set(@C("struct __darwin_pthread_handler_rec") MemorySegment seg, @C("void(*)(void*)") MemoryAddress x) {
            fuse_h_constants_1.__darwin_pthread_handler_rec$__routine$VH().set(seg, x);
        }
        public static void __routine$set(@C("struct __darwin_pthread_handler_rec") MemorySegment seg, long index, @C("void(*)(void*)") MemoryAddress x) {
            fuse_h_constants_1.__darwin_pthread_handler_rec$__routine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __arg$VH() {
            return fuse_h_constants_1.__darwin_pthread_handler_rec$__arg$VH();
        }
        public static  @C("void*") MemoryAddress __arg$get(@C("struct __darwin_pthread_handler_rec") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.__darwin_pthread_handler_rec$__arg$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress __arg$get(@C("struct __darwin_pthread_handler_rec") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.__darwin_pthread_handler_rec$__arg$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __arg$set(@C("struct __darwin_pthread_handler_rec") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_1.__darwin_pthread_handler_rec$__arg$VH().set(seg, x);
        }
        public static void __arg$set(@C("struct __darwin_pthread_handler_rec") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_1.__darwin_pthread_handler_rec$__arg$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __next$VH() {
            return fuse_h_constants_1.__darwin_pthread_handler_rec$__next$VH();
        }
        public static  @C("struct __darwin_pthread_handler_rec*") MemoryAddress __next$get(@C("struct __darwin_pthread_handler_rec") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.__darwin_pthread_handler_rec$__next$VH().get(seg);
        }
        public static  @C("struct __darwin_pthread_handler_rec*") MemoryAddress __next$get(@C("struct __darwin_pthread_handler_rec") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.__darwin_pthread_handler_rec$__next$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __next$set(@C("struct __darwin_pthread_handler_rec") MemorySegment seg, @C("struct __darwin_pthread_handler_rec*") MemoryAddress x) {
            fuse_h_constants_1.__darwin_pthread_handler_rec$__next$VH().set(seg, x);
        }
        public static void __next$set(@C("struct __darwin_pthread_handler_rec") MemorySegment seg, long index, @C("struct __darwin_pthread_handler_rec*") MemoryAddress x) {
            fuse_h_constants_1.__darwin_pthread_handler_rec$__next$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_pthread_handler_rec") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_pthread_handler_rec") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_pthread_handler_rec[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_pthread_handler_rec[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_pthread_handler_rec*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_pthread_handler_rec*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_pthread_handler_rec") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_attr_t")public static class _opaque_pthread_attr_t {

        /* package-private */ _opaque_pthread_attr_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1._opaque_pthread_attr_t$struct$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return fuse_h_constants_1._opaque_pthread_attr_t$__sig$VH();
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_attr_t") MemorySegment seg) {
            return (long)fuse_h_constants_1._opaque_pthread_attr_t$__sig$VH().get(seg);
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_attr_t") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1._opaque_pthread_attr_t$__sig$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sig$set(@C("struct _opaque_pthread_attr_t") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_attr_t$__sig$VH().set(seg, x);
        }
        public static void __sig$set(@C("struct _opaque_pthread_attr_t") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_attr_t$__sig$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __opaque$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 56));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _opaque_pthread_attr_t") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _opaque_pthread_attr_t") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _opaque_pthread_attr_t[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _opaque_pthread_attr_t[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _opaque_pthread_attr_t*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _opaque_pthread_attr_t*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _opaque_pthread_attr_t") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_cond_t")public static class _opaque_pthread_cond_t {

        /* package-private */ _opaque_pthread_cond_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1._opaque_pthread_cond_t$struct$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return fuse_h_constants_1._opaque_pthread_cond_t$__sig$VH();
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_cond_t") MemorySegment seg) {
            return (long)fuse_h_constants_1._opaque_pthread_cond_t$__sig$VH().get(seg);
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_cond_t") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1._opaque_pthread_cond_t$__sig$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sig$set(@C("struct _opaque_pthread_cond_t") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_cond_t$__sig$VH().set(seg, x);
        }
        public static void __sig$set(@C("struct _opaque_pthread_cond_t") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_cond_t$__sig$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __opaque$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 40));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _opaque_pthread_cond_t") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _opaque_pthread_cond_t") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _opaque_pthread_cond_t[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _opaque_pthread_cond_t[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _opaque_pthread_cond_t*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _opaque_pthread_cond_t*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _opaque_pthread_cond_t") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_condattr_t")public static class _opaque_pthread_condattr_t {

        /* package-private */ _opaque_pthread_condattr_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1._opaque_pthread_condattr_t$struct$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return fuse_h_constants_1._opaque_pthread_condattr_t$__sig$VH();
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_condattr_t") MemorySegment seg) {
            return (long)fuse_h_constants_1._opaque_pthread_condattr_t$__sig$VH().get(seg);
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_condattr_t") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1._opaque_pthread_condattr_t$__sig$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sig$set(@C("struct _opaque_pthread_condattr_t") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_condattr_t$__sig$VH().set(seg, x);
        }
        public static void __sig$set(@C("struct _opaque_pthread_condattr_t") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_condattr_t$__sig$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __opaque$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _opaque_pthread_condattr_t") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _opaque_pthread_condattr_t") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _opaque_pthread_condattr_t[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _opaque_pthread_condattr_t[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _opaque_pthread_condattr_t*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _opaque_pthread_condattr_t*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _opaque_pthread_condattr_t") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_mutex_t")public static class _opaque_pthread_mutex_t {

        /* package-private */ _opaque_pthread_mutex_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1._opaque_pthread_mutex_t$struct$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return fuse_h_constants_1._opaque_pthread_mutex_t$__sig$VH();
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_mutex_t") MemorySegment seg) {
            return (long)fuse_h_constants_1._opaque_pthread_mutex_t$__sig$VH().get(seg);
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_mutex_t") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1._opaque_pthread_mutex_t$__sig$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sig$set(@C("struct _opaque_pthread_mutex_t") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_mutex_t$__sig$VH().set(seg, x);
        }
        public static void __sig$set(@C("struct _opaque_pthread_mutex_t") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_mutex_t$__sig$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __opaque$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 56));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _opaque_pthread_mutex_t") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _opaque_pthread_mutex_t") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _opaque_pthread_mutex_t[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _opaque_pthread_mutex_t[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _opaque_pthread_mutex_t*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _opaque_pthread_mutex_t*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _opaque_pthread_mutex_t") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_mutexattr_t")public static class _opaque_pthread_mutexattr_t {

        /* package-private */ _opaque_pthread_mutexattr_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1._opaque_pthread_mutexattr_t$struct$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return fuse_h_constants_1._opaque_pthread_mutexattr_t$__sig$VH();
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_mutexattr_t") MemorySegment seg) {
            return (long)fuse_h_constants_1._opaque_pthread_mutexattr_t$__sig$VH().get(seg);
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_mutexattr_t") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1._opaque_pthread_mutexattr_t$__sig$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sig$set(@C("struct _opaque_pthread_mutexattr_t") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_mutexattr_t$__sig$VH().set(seg, x);
        }
        public static void __sig$set(@C("struct _opaque_pthread_mutexattr_t") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_mutexattr_t$__sig$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __opaque$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _opaque_pthread_mutexattr_t") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _opaque_pthread_mutexattr_t") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _opaque_pthread_mutexattr_t[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _opaque_pthread_mutexattr_t[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _opaque_pthread_mutexattr_t*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _opaque_pthread_mutexattr_t*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _opaque_pthread_mutexattr_t") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_once_t")public static class _opaque_pthread_once_t {

        /* package-private */ _opaque_pthread_once_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1._opaque_pthread_once_t$struct$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return fuse_h_constants_1._opaque_pthread_once_t$__sig$VH();
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_once_t") MemorySegment seg) {
            return (long)fuse_h_constants_1._opaque_pthread_once_t$__sig$VH().get(seg);
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_once_t") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1._opaque_pthread_once_t$__sig$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sig$set(@C("struct _opaque_pthread_once_t") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_once_t$__sig$VH().set(seg, x);
        }
        public static void __sig$set(@C("struct _opaque_pthread_once_t") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_once_t$__sig$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __opaque$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _opaque_pthread_once_t") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _opaque_pthread_once_t") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _opaque_pthread_once_t[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _opaque_pthread_once_t[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _opaque_pthread_once_t*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _opaque_pthread_once_t*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _opaque_pthread_once_t") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_rwlock_t")public static class _opaque_pthread_rwlock_t {

        /* package-private */ _opaque_pthread_rwlock_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1._opaque_pthread_rwlock_t$struct$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return fuse_h_constants_1._opaque_pthread_rwlock_t$__sig$VH();
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_rwlock_t") MemorySegment seg) {
            return (long)fuse_h_constants_1._opaque_pthread_rwlock_t$__sig$VH().get(seg);
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_rwlock_t") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1._opaque_pthread_rwlock_t$__sig$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sig$set(@C("struct _opaque_pthread_rwlock_t") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_rwlock_t$__sig$VH().set(seg, x);
        }
        public static void __sig$set(@C("struct _opaque_pthread_rwlock_t") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_rwlock_t$__sig$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __opaque$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 192));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _opaque_pthread_rwlock_t") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _opaque_pthread_rwlock_t") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _opaque_pthread_rwlock_t[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _opaque_pthread_rwlock_t[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _opaque_pthread_rwlock_t*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _opaque_pthread_rwlock_t*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _opaque_pthread_rwlock_t") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_rwlockattr_t")public static class _opaque_pthread_rwlockattr_t {

        /* package-private */ _opaque_pthread_rwlockattr_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1._opaque_pthread_rwlockattr_t$struct$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return fuse_h_constants_1._opaque_pthread_rwlockattr_t$__sig$VH();
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_rwlockattr_t") MemorySegment seg) {
            return (long)fuse_h_constants_1._opaque_pthread_rwlockattr_t$__sig$VH().get(seg);
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_rwlockattr_t") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1._opaque_pthread_rwlockattr_t$__sig$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sig$set(@C("struct _opaque_pthread_rwlockattr_t") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_rwlockattr_t$__sig$VH().set(seg, x);
        }
        public static void __sig$set(@C("struct _opaque_pthread_rwlockattr_t") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_rwlockattr_t$__sig$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __opaque$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _opaque_pthread_rwlockattr_t") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _opaque_pthread_rwlockattr_t") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _opaque_pthread_rwlockattr_t[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _opaque_pthread_rwlockattr_t[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _opaque_pthread_rwlockattr_t*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _opaque_pthread_rwlockattr_t*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _opaque_pthread_rwlockattr_t") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_t")public static class _opaque_pthread_t {

        /* package-private */ _opaque_pthread_t() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1._opaque_pthread_t$struct$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return fuse_h_constants_1._opaque_pthread_t$__sig$VH();
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_t") MemorySegment seg) {
            return (long)fuse_h_constants_1._opaque_pthread_t$__sig$VH().get(seg);
        }
        public static  @C("long") long __sig$get(@C("struct _opaque_pthread_t") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1._opaque_pthread_t$__sig$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sig$set(@C("struct _opaque_pthread_t") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_t$__sig$VH().set(seg, x);
        }
        public static void __sig$set(@C("struct _opaque_pthread_t") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1._opaque_pthread_t$__sig$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __cleanup_stack$VH() {
            return fuse_h_constants_1._opaque_pthread_t$__cleanup_stack$VH();
        }
        public static  @C("struct __darwin_pthread_handler_rec*") MemoryAddress __cleanup_stack$get(@C("struct _opaque_pthread_t") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1._opaque_pthread_t$__cleanup_stack$VH().get(seg);
        }
        public static  @C("struct __darwin_pthread_handler_rec*") MemoryAddress __cleanup_stack$get(@C("struct _opaque_pthread_t") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1._opaque_pthread_t$__cleanup_stack$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __cleanup_stack$set(@C("struct _opaque_pthread_t") MemorySegment seg, @C("struct __darwin_pthread_handler_rec*") MemoryAddress x) {
            fuse_h_constants_1._opaque_pthread_t$__cleanup_stack$VH().set(seg, x);
        }
        public static void __cleanup_stack$set(@C("struct _opaque_pthread_t") MemorySegment seg, long index, @C("struct __darwin_pthread_handler_rec*") MemoryAddress x) {
            fuse_h_constants_1._opaque_pthread_t$__cleanup_stack$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __opaque$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8176));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _opaque_pthread_t") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _opaque_pthread_t") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _opaque_pthread_t[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _opaque_pthread_t[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _opaque_pthread_t*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _opaque_pthread_t*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _opaque_pthread_t") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_attr_t")public static class __darwin_pthread_attr_t extends _opaque_pthread_attr_t {

        /* package-private */ __darwin_pthread_attr_t() {}
    }

    @C("struct _opaque_pthread_cond_t")public static class __darwin_pthread_cond_t extends _opaque_pthread_cond_t {

        /* package-private */ __darwin_pthread_cond_t() {}
    }

    @C("struct _opaque_pthread_condattr_t")public static class __darwin_pthread_condattr_t extends _opaque_pthread_condattr_t {

        /* package-private */ __darwin_pthread_condattr_t() {}
    }

    @C("struct _opaque_pthread_mutex_t")public static class __darwin_pthread_mutex_t extends _opaque_pthread_mutex_t {

        /* package-private */ __darwin_pthread_mutex_t() {}
    }

    @C("struct _opaque_pthread_mutexattr_t")public static class __darwin_pthread_mutexattr_t extends _opaque_pthread_mutexattr_t {

        /* package-private */ __darwin_pthread_mutexattr_t() {}
    }

    @C("struct _opaque_pthread_once_t")public static class __darwin_pthread_once_t extends _opaque_pthread_once_t {

        /* package-private */ __darwin_pthread_once_t() {}
    }

    @C("struct _opaque_pthread_rwlock_t")public static class __darwin_pthread_rwlock_t extends _opaque_pthread_rwlock_t {

        /* package-private */ __darwin_pthread_rwlock_t() {}
    }

    @C("struct _opaque_pthread_rwlockattr_t")public static class __darwin_pthread_rwlockattr_t extends _opaque_pthread_rwlockattr_t {

        /* package-private */ __darwin_pthread_rwlockattr_t() {}
    }

    @C("struct fd_set")public static class fd_set {

        /* package-private */ fd_set() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fd_set$struct$LAYOUT();
        }
        public static MemorySegment fds_bits$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 128));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fd_set") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fd_set") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fd_set[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fd_set[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fd_set*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fd_set*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fd_set") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _opaque_pthread_attr_t")public static class pthread_attr_t extends _opaque_pthread_attr_t {

        /* package-private */ pthread_attr_t() {}
    }

    @C("struct _opaque_pthread_cond_t")public static class pthread_cond_t extends _opaque_pthread_cond_t {

        /* package-private */ pthread_cond_t() {}
    }

    @C("struct _opaque_pthread_condattr_t")public static class pthread_condattr_t extends _opaque_pthread_condattr_t {

        /* package-private */ pthread_condattr_t() {}
    }

    @C("struct _opaque_pthread_mutex_t")public static class pthread_mutex_t extends _opaque_pthread_mutex_t {

        /* package-private */ pthread_mutex_t() {}
    }

    @C("struct _opaque_pthread_mutexattr_t")public static class pthread_mutexattr_t extends _opaque_pthread_mutexattr_t {

        /* package-private */ pthread_mutexattr_t() {}
    }

    @C("struct _opaque_pthread_once_t")public static class pthread_once_t extends _opaque_pthread_once_t {

        /* package-private */ pthread_once_t() {}
    }

    @C("struct _opaque_pthread_rwlock_t")public static class pthread_rwlock_t extends _opaque_pthread_rwlock_t {

        /* package-private */ pthread_rwlock_t() {}
    }

    @C("struct _opaque_pthread_rwlockattr_t")public static class pthread_rwlockattr_t extends _opaque_pthread_rwlockattr_t {

        /* package-private */ pthread_rwlockattr_t() {}
    }

    @C("struct timespec")public static class timespec {

        /* package-private */ timespec() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.timespec$struct$LAYOUT();
        }
        public static VarHandle tv_sec$VH() {
            return fuse_h_constants_1.timespec$tv_sec$VH();
        }
        public static  @C("__darwin_time_t") long tv_sec$get(@C("struct timespec") MemorySegment seg) {
            return (long)fuse_h_constants_1.timespec$tv_sec$VH().get(seg);
        }
        public static  @C("__darwin_time_t") long tv_sec$get(@C("struct timespec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.timespec$tv_sec$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tv_sec$set(@C("struct timespec") MemorySegment seg, @C("__darwin_time_t") long x) {
            fuse_h_constants_1.timespec$tv_sec$VH().set(seg, x);
        }
        public static void tv_sec$set(@C("struct timespec") MemorySegment seg, long index, @C("__darwin_time_t") long x) {
            fuse_h_constants_1.timespec$tv_sec$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tv_nsec$VH() {
            return fuse_h_constants_1.timespec$tv_nsec$VH();
        }
        public static  @C("long") long tv_nsec$get(@C("struct timespec") MemorySegment seg) {
            return (long)fuse_h_constants_1.timespec$tv_nsec$VH().get(seg);
        }
        public static  @C("long") long tv_nsec$get(@C("struct timespec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.timespec$tv_nsec$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tv_nsec$set(@C("struct timespec") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1.timespec$tv_nsec$VH().set(seg, x);
        }
        public static void tv_nsec$set(@C("struct timespec") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1.timespec$tv_nsec$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct timespec") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct timespec") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct timespec[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct timespec[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct timespec*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct timespec*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct timespec") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ostat")public static class ostat {

        /* package-private */ ostat() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.ostat$struct$LAYOUT();
        }
        public static VarHandle st_dev$VH() {
            return fuse_h_constants_1.ostat$st_dev$VH();
        }
        public static  @C("__uint16_t") short st_dev$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_1.ostat$st_dev$VH().get(seg);
        }
        public static  @C("__uint16_t") short st_dev$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.ostat$st_dev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_dev$set(@C("struct ostat") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_1.ostat$st_dev$VH().set(seg, x);
        }
        public static void st_dev$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_1.ostat$st_dev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_ino$VH() {
            return fuse_h_constants_1.ostat$st_ino$VH();
        }
        public static  @C("ino_t") long st_ino$get(@C("struct ostat") MemorySegment seg) {
            return (long)fuse_h_constants_1.ostat$st_ino$VH().get(seg);
        }
        public static  @C("ino_t") long st_ino$get(@C("struct ostat") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.ostat$st_ino$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_ino$set(@C("struct ostat") MemorySegment seg, @C("ino_t") long x) {
            fuse_h_constants_1.ostat$st_ino$VH().set(seg, x);
        }
        public static void st_ino$set(@C("struct ostat") MemorySegment seg, long index, @C("ino_t") long x) {
            fuse_h_constants_1.ostat$st_ino$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_mode$VH() {
            return fuse_h_constants_1.ostat$st_mode$VH();
        }
        public static  @C("mode_t") short st_mode$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_1.ostat$st_mode$VH().get(seg);
        }
        public static  @C("mode_t") short st_mode$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.ostat$st_mode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_mode$set(@C("struct ostat") MemorySegment seg, @C("mode_t") short x) {
            fuse_h_constants_1.ostat$st_mode$VH().set(seg, x);
        }
        public static void st_mode$set(@C("struct ostat") MemorySegment seg, long index, @C("mode_t") short x) {
            fuse_h_constants_1.ostat$st_mode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_nlink$VH() {
            return fuse_h_constants_1.ostat$st_nlink$VH();
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_1.ostat$st_nlink$VH().get(seg);
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.ostat$st_nlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_nlink$set(@C("struct ostat") MemorySegment seg, @C("nlink_t") short x) {
            fuse_h_constants_1.ostat$st_nlink$VH().set(seg, x);
        }
        public static void st_nlink$set(@C("struct ostat") MemorySegment seg, long index, @C("nlink_t") short x) {
            fuse_h_constants_1.ostat$st_nlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_uid$VH() {
            return fuse_h_constants_1.ostat$st_uid$VH();
        }
        public static  @C("__uint16_t") short st_uid$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_1.ostat$st_uid$VH().get(seg);
        }
        public static  @C("__uint16_t") short st_uid$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.ostat$st_uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_uid$set(@C("struct ostat") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_1.ostat$st_uid$VH().set(seg, x);
        }
        public static void st_uid$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_1.ostat$st_uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gid$VH() {
            return fuse_h_constants_1.ostat$st_gid$VH();
        }
        public static  @C("__uint16_t") short st_gid$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_1.ostat$st_gid$VH().get(seg);
        }
        public static  @C("__uint16_t") short st_gid$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.ostat$st_gid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gid$set(@C("struct ostat") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_1.ostat$st_gid$VH().set(seg, x);
        }
        public static void st_gid$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_1.ostat$st_gid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_rdev$VH() {
            return fuse_h_constants_1.ostat$st_rdev$VH();
        }
        public static  @C("__uint16_t") short st_rdev$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_1.ostat$st_rdev$VH().get(seg);
        }
        public static  @C("__uint16_t") short st_rdev$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.ostat$st_rdev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_rdev$set(@C("struct ostat") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_1.ostat$st_rdev$VH().set(seg, x);
        }
        public static void st_rdev$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_1.ostat$st_rdev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_size$VH() {
            return fuse_h_constants_1.ostat$st_size$VH();
        }
        public static  @C("__int32_t") int st_size$get(@C("struct ostat") MemorySegment seg) {
            return (int)fuse_h_constants_1.ostat$st_size$VH().get(seg);
        }
        public static  @C("__int32_t") int st_size$get(@C("struct ostat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.ostat$st_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_size$set(@C("struct ostat") MemorySegment seg, @C("__int32_t") int x) {
            fuse_h_constants_1.ostat$st_size$VH().set(seg, x);
        }
        public static void st_size$set(@C("struct ostat") MemorySegment seg, long index, @C("__int32_t") int x) {
            fuse_h_constants_1.ostat$st_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment st_atimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static MemorySegment st_mtimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 16));
        }
        public static MemorySegment st_ctimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 16));
        }
        public static VarHandle st_blksize$VH() {
            return fuse_h_constants_1.ostat$st_blksize$VH();
        }
        public static  @C("__int32_t") int st_blksize$get(@C("struct ostat") MemorySegment seg) {
            return (int)fuse_h_constants_1.ostat$st_blksize$VH().get(seg);
        }
        public static  @C("__int32_t") int st_blksize$get(@C("struct ostat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.ostat$st_blksize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blksize$set(@C("struct ostat") MemorySegment seg, @C("__int32_t") int x) {
            fuse_h_constants_1.ostat$st_blksize$VH().set(seg, x);
        }
        public static void st_blksize$set(@C("struct ostat") MemorySegment seg, long index, @C("__int32_t") int x) {
            fuse_h_constants_1.ostat$st_blksize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_blocks$VH() {
            return fuse_h_constants_1.ostat$st_blocks$VH();
        }
        public static  @C("__int32_t") int st_blocks$get(@C("struct ostat") MemorySegment seg) {
            return (int)fuse_h_constants_1.ostat$st_blocks$VH().get(seg);
        }
        public static  @C("__int32_t") int st_blocks$get(@C("struct ostat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.ostat$st_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blocks$set(@C("struct ostat") MemorySegment seg, @C("__int32_t") int x) {
            fuse_h_constants_1.ostat$st_blocks$VH().set(seg, x);
        }
        public static void st_blocks$set(@C("struct ostat") MemorySegment seg, long index, @C("__int32_t") int x) {
            fuse_h_constants_1.ostat$st_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_flags$VH() {
            return fuse_h_constants_1.ostat$st_flags$VH();
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct ostat") MemorySegment seg) {
            return (int)fuse_h_constants_1.ostat$st_flags$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct ostat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.ostat$st_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_flags$set(@C("struct ostat") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_1.ostat$st_flags$VH().set(seg, x);
        }
        public static void st_flags$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_1.ostat$st_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gen$VH() {
            return fuse_h_constants_1.ostat$st_gen$VH();
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct ostat") MemorySegment seg) {
            return (int)fuse_h_constants_1.ostat$st_gen$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct ostat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.ostat$st_gen$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gen$set(@C("struct ostat") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_1.ostat$st_gen$VH().set(seg, x);
        }
        public static void st_gen$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_1.ostat$st_gen$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ostat") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ostat") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct ostat[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct ostat[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct ostat*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct ostat*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ostat") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct stat")public static class stat {

        /* package-private */ stat() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.stat$struct$LAYOUT();
        }
        public static VarHandle st_dev$VH() {
            return fuse_h_constants_1.stat$st_dev$VH();
        }
        public static  @C("dev_t") int st_dev$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat$st_dev$VH().get(seg);
        }
        public static  @C("dev_t") int st_dev$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat$st_dev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_dev$set(@C("struct stat") MemorySegment seg, @C("dev_t") int x) {
            fuse_h_constants_1.stat$st_dev$VH().set(seg, x);
        }
        public static void st_dev$set(@C("struct stat") MemorySegment seg, long index, @C("dev_t") int x) {
            fuse_h_constants_1.stat$st_dev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_mode$VH() {
            return fuse_h_constants_1.stat$st_mode$VH();
        }
        public static  @C("mode_t") short st_mode$get(@C("struct stat") MemorySegment seg) {
            return (short)fuse_h_constants_1.stat$st_mode$VH().get(seg);
        }
        public static  @C("mode_t") short st_mode$get(@C("struct stat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.stat$st_mode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_mode$set(@C("struct stat") MemorySegment seg, @C("mode_t") short x) {
            fuse_h_constants_1.stat$st_mode$VH().set(seg, x);
        }
        public static void st_mode$set(@C("struct stat") MemorySegment seg, long index, @C("mode_t") short x) {
            fuse_h_constants_1.stat$st_mode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_nlink$VH() {
            return fuse_h_constants_1.stat$st_nlink$VH();
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct stat") MemorySegment seg) {
            return (short)fuse_h_constants_1.stat$st_nlink$VH().get(seg);
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct stat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.stat$st_nlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_nlink$set(@C("struct stat") MemorySegment seg, @C("nlink_t") short x) {
            fuse_h_constants_1.stat$st_nlink$VH().set(seg, x);
        }
        public static void st_nlink$set(@C("struct stat") MemorySegment seg, long index, @C("nlink_t") short x) {
            fuse_h_constants_1.stat$st_nlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_ino$VH() {
            return fuse_h_constants_1.stat$st_ino$VH();
        }
        public static  @C("__darwin_ino64_t") long st_ino$get(@C("struct stat") MemorySegment seg) {
            return (long)fuse_h_constants_1.stat$st_ino$VH().get(seg);
        }
        public static  @C("__darwin_ino64_t") long st_ino$get(@C("struct stat") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.stat$st_ino$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_ino$set(@C("struct stat") MemorySegment seg, @C("__darwin_ino64_t") long x) {
            fuse_h_constants_1.stat$st_ino$VH().set(seg, x);
        }
        public static void st_ino$set(@C("struct stat") MemorySegment seg, long index, @C("__darwin_ino64_t") long x) {
            fuse_h_constants_1.stat$st_ino$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_uid$VH() {
            return fuse_h_constants_1.stat$st_uid$VH();
        }
        public static  @C("uid_t") int st_uid$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat$st_uid$VH().get(seg);
        }
        public static  @C("uid_t") int st_uid$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat$st_uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_uid$set(@C("struct stat") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_1.stat$st_uid$VH().set(seg, x);
        }
        public static void st_uid$set(@C("struct stat") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_1.stat$st_uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gid$VH() {
            return fuse_h_constants_1.stat$st_gid$VH();
        }
        public static  @C("gid_t") int st_gid$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat$st_gid$VH().get(seg);
        }
        public static  @C("gid_t") int st_gid$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat$st_gid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gid$set(@C("struct stat") MemorySegment seg, @C("gid_t") int x) {
            fuse_h_constants_1.stat$st_gid$VH().set(seg, x);
        }
        public static void st_gid$set(@C("struct stat") MemorySegment seg, long index, @C("gid_t") int x) {
            fuse_h_constants_1.stat$st_gid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_rdev$VH() {
            return fuse_h_constants_1.stat$st_rdev$VH();
        }
        public static  @C("dev_t") int st_rdev$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat$st_rdev$VH().get(seg);
        }
        public static  @C("dev_t") int st_rdev$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat$st_rdev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_rdev$set(@C("struct stat") MemorySegment seg, @C("dev_t") int x) {
            fuse_h_constants_1.stat$st_rdev$VH().set(seg, x);
        }
        public static void st_rdev$set(@C("struct stat") MemorySegment seg, long index, @C("dev_t") int x) {
            fuse_h_constants_1.stat$st_rdev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment st_atimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static MemorySegment st_mtimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 16));
        }
        public static MemorySegment st_ctimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 16));
        }
        public static MemorySegment st_birthtimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 16));
        }
        public static VarHandle st_size$VH() {
            return fuse_h_constants_1.stat$st_size$VH();
        }
        public static  @C("off_t") long st_size$get(@C("struct stat") MemorySegment seg) {
            return (long)fuse_h_constants_1.stat$st_size$VH().get(seg);
        }
        public static  @C("off_t") long st_size$get(@C("struct stat") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.stat$st_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_size$set(@C("struct stat") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.stat$st_size$VH().set(seg, x);
        }
        public static void st_size$set(@C("struct stat") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.stat$st_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_blocks$VH() {
            return fuse_h_constants_1.stat$st_blocks$VH();
        }
        public static  @C("blkcnt_t") long st_blocks$get(@C("struct stat") MemorySegment seg) {
            return (long)fuse_h_constants_1.stat$st_blocks$VH().get(seg);
        }
        public static  @C("blkcnt_t") long st_blocks$get(@C("struct stat") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.stat$st_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blocks$set(@C("struct stat") MemorySegment seg, @C("blkcnt_t") long x) {
            fuse_h_constants_1.stat$st_blocks$VH().set(seg, x);
        }
        public static void st_blocks$set(@C("struct stat") MemorySegment seg, long index, @C("blkcnt_t") long x) {
            fuse_h_constants_1.stat$st_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_blksize$VH() {
            return fuse_h_constants_1.stat$st_blksize$VH();
        }
        public static  @C("blksize_t") int st_blksize$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat$st_blksize$VH().get(seg);
        }
        public static  @C("blksize_t") int st_blksize$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat$st_blksize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blksize$set(@C("struct stat") MemorySegment seg, @C("blksize_t") int x) {
            fuse_h_constants_1.stat$st_blksize$VH().set(seg, x);
        }
        public static void st_blksize$set(@C("struct stat") MemorySegment seg, long index, @C("blksize_t") int x) {
            fuse_h_constants_1.stat$st_blksize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_flags$VH() {
            return fuse_h_constants_1.stat$st_flags$VH();
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat$st_flags$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat$st_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_flags$set(@C("struct stat") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_1.stat$st_flags$VH().set(seg, x);
        }
        public static void st_flags$set(@C("struct stat") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_1.stat$st_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gen$VH() {
            return fuse_h_constants_1.stat$st_gen$VH();
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat$st_gen$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat$st_gen$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gen$set(@C("struct stat") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_1.stat$st_gen$VH().set(seg, x);
        }
        public static void st_gen$set(@C("struct stat") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_1.stat$st_gen$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_lspare$VH() {
            return fuse_h_constants_1.stat$st_lspare$VH();
        }
        public static  @C("__int32_t") int st_lspare$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat$st_lspare$VH().get(seg);
        }
        public static  @C("__int32_t") int st_lspare$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat$st_lspare$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_lspare$set(@C("struct stat") MemorySegment seg, @C("__int32_t") int x) {
            fuse_h_constants_1.stat$st_lspare$VH().set(seg, x);
        }
        public static void st_lspare$set(@C("struct stat") MemorySegment seg, long index, @C("__int32_t") int x) {
            fuse_h_constants_1.stat$st_lspare$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment st_qspare$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(128, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct stat") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct stat") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct stat[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct stat[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct stat*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct stat*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct stat") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct stat64")public static class stat64 {

        /* package-private */ stat64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.stat64$struct$LAYOUT();
        }
        public static VarHandle st_dev$VH() {
            return fuse_h_constants_1.stat64$st_dev$VH();
        }
        public static  @C("dev_t") int st_dev$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat64$st_dev$VH().get(seg);
        }
        public static  @C("dev_t") int st_dev$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat64$st_dev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_dev$set(@C("struct stat64") MemorySegment seg, @C("dev_t") int x) {
            fuse_h_constants_1.stat64$st_dev$VH().set(seg, x);
        }
        public static void st_dev$set(@C("struct stat64") MemorySegment seg, long index, @C("dev_t") int x) {
            fuse_h_constants_1.stat64$st_dev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_mode$VH() {
            return fuse_h_constants_1.stat64$st_mode$VH();
        }
        public static  @C("mode_t") short st_mode$get(@C("struct stat64") MemorySegment seg) {
            return (short)fuse_h_constants_1.stat64$st_mode$VH().get(seg);
        }
        public static  @C("mode_t") short st_mode$get(@C("struct stat64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.stat64$st_mode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_mode$set(@C("struct stat64") MemorySegment seg, @C("mode_t") short x) {
            fuse_h_constants_1.stat64$st_mode$VH().set(seg, x);
        }
        public static void st_mode$set(@C("struct stat64") MemorySegment seg, long index, @C("mode_t") short x) {
            fuse_h_constants_1.stat64$st_mode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_nlink$VH() {
            return fuse_h_constants_1.stat64$st_nlink$VH();
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct stat64") MemorySegment seg) {
            return (short)fuse_h_constants_1.stat64$st_nlink$VH().get(seg);
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct stat64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.stat64$st_nlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_nlink$set(@C("struct stat64") MemorySegment seg, @C("nlink_t") short x) {
            fuse_h_constants_1.stat64$st_nlink$VH().set(seg, x);
        }
        public static void st_nlink$set(@C("struct stat64") MemorySegment seg, long index, @C("nlink_t") short x) {
            fuse_h_constants_1.stat64$st_nlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_ino$VH() {
            return fuse_h_constants_1.stat64$st_ino$VH();
        }
        public static  @C("__darwin_ino64_t") long st_ino$get(@C("struct stat64") MemorySegment seg) {
            return (long)fuse_h_constants_1.stat64$st_ino$VH().get(seg);
        }
        public static  @C("__darwin_ino64_t") long st_ino$get(@C("struct stat64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.stat64$st_ino$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_ino$set(@C("struct stat64") MemorySegment seg, @C("__darwin_ino64_t") long x) {
            fuse_h_constants_1.stat64$st_ino$VH().set(seg, x);
        }
        public static void st_ino$set(@C("struct stat64") MemorySegment seg, long index, @C("__darwin_ino64_t") long x) {
            fuse_h_constants_1.stat64$st_ino$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_uid$VH() {
            return fuse_h_constants_1.stat64$st_uid$VH();
        }
        public static  @C("uid_t") int st_uid$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat64$st_uid$VH().get(seg);
        }
        public static  @C("uid_t") int st_uid$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat64$st_uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_uid$set(@C("struct stat64") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_1.stat64$st_uid$VH().set(seg, x);
        }
        public static void st_uid$set(@C("struct stat64") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_1.stat64$st_uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gid$VH() {
            return fuse_h_constants_1.stat64$st_gid$VH();
        }
        public static  @C("gid_t") int st_gid$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat64$st_gid$VH().get(seg);
        }
        public static  @C("gid_t") int st_gid$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat64$st_gid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gid$set(@C("struct stat64") MemorySegment seg, @C("gid_t") int x) {
            fuse_h_constants_1.stat64$st_gid$VH().set(seg, x);
        }
        public static void st_gid$set(@C("struct stat64") MemorySegment seg, long index, @C("gid_t") int x) {
            fuse_h_constants_1.stat64$st_gid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_rdev$VH() {
            return fuse_h_constants_1.stat64$st_rdev$VH();
        }
        public static  @C("dev_t") int st_rdev$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat64$st_rdev$VH().get(seg);
        }
        public static  @C("dev_t") int st_rdev$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat64$st_rdev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_rdev$set(@C("struct stat64") MemorySegment seg, @C("dev_t") int x) {
            fuse_h_constants_1.stat64$st_rdev$VH().set(seg, x);
        }
        public static void st_rdev$set(@C("struct stat64") MemorySegment seg, long index, @C("dev_t") int x) {
            fuse_h_constants_1.stat64$st_rdev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment st_atimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static MemorySegment st_mtimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 16));
        }
        public static MemorySegment st_ctimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 16));
        }
        public static MemorySegment st_birthtimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 16));
        }
        public static VarHandle st_size$VH() {
            return fuse_h_constants_1.stat64$st_size$VH();
        }
        public static  @C("off_t") long st_size$get(@C("struct stat64") MemorySegment seg) {
            return (long)fuse_h_constants_1.stat64$st_size$VH().get(seg);
        }
        public static  @C("off_t") long st_size$get(@C("struct stat64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.stat64$st_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_size$set(@C("struct stat64") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.stat64$st_size$VH().set(seg, x);
        }
        public static void st_size$set(@C("struct stat64") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.stat64$st_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_blocks$VH() {
            return fuse_h_constants_1.stat64$st_blocks$VH();
        }
        public static  @C("blkcnt_t") long st_blocks$get(@C("struct stat64") MemorySegment seg) {
            return (long)fuse_h_constants_1.stat64$st_blocks$VH().get(seg);
        }
        public static  @C("blkcnt_t") long st_blocks$get(@C("struct stat64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.stat64$st_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blocks$set(@C("struct stat64") MemorySegment seg, @C("blkcnt_t") long x) {
            fuse_h_constants_1.stat64$st_blocks$VH().set(seg, x);
        }
        public static void st_blocks$set(@C("struct stat64") MemorySegment seg, long index, @C("blkcnt_t") long x) {
            fuse_h_constants_1.stat64$st_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_blksize$VH() {
            return fuse_h_constants_1.stat64$st_blksize$VH();
        }
        public static  @C("blksize_t") int st_blksize$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat64$st_blksize$VH().get(seg);
        }
        public static  @C("blksize_t") int st_blksize$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat64$st_blksize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blksize$set(@C("struct stat64") MemorySegment seg, @C("blksize_t") int x) {
            fuse_h_constants_1.stat64$st_blksize$VH().set(seg, x);
        }
        public static void st_blksize$set(@C("struct stat64") MemorySegment seg, long index, @C("blksize_t") int x) {
            fuse_h_constants_1.stat64$st_blksize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_flags$VH() {
            return fuse_h_constants_1.stat64$st_flags$VH();
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat64$st_flags$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat64$st_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_flags$set(@C("struct stat64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_1.stat64$st_flags$VH().set(seg, x);
        }
        public static void st_flags$set(@C("struct stat64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_1.stat64$st_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gen$VH() {
            return fuse_h_constants_1.stat64$st_gen$VH();
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat64$st_gen$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat64$st_gen$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gen$set(@C("struct stat64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_1.stat64$st_gen$VH().set(seg, x);
        }
        public static void st_gen$set(@C("struct stat64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_1.stat64$st_gen$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_lspare$VH() {
            return fuse_h_constants_1.stat64$st_lspare$VH();
        }
        public static  @C("__int32_t") int st_lspare$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_1.stat64$st_lspare$VH().get(seg);
        }
        public static  @C("__int32_t") int st_lspare$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.stat64$st_lspare$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_lspare$set(@C("struct stat64") MemorySegment seg, @C("__int32_t") int x) {
            fuse_h_constants_1.stat64$st_lspare$VH().set(seg, x);
        }
        public static void st_lspare$set(@C("struct stat64") MemorySegment seg, long index, @C("__int32_t") int x) {
            fuse_h_constants_1.stat64$st_lspare$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment st_qspare$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(128, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct stat64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct stat64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct stat64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct stat64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct stat64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct stat64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct stat64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct setattr_x")public static class setattr_x {

        /* package-private */ setattr_x() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.setattr_x$struct$LAYOUT();
        }
        public static VarHandle valid$VH() {
            return fuse_h_constants_1.setattr_x$valid$VH();
        }
        public static  @C("int32_t") int valid$get(@C("struct setattr_x") MemorySegment seg) {
            return (int)fuse_h_constants_1.setattr_x$valid$VH().get(seg);
        }
        public static  @C("int32_t") int valid$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.setattr_x$valid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void valid$set(@C("struct setattr_x") MemorySegment seg, @C("int32_t") int x) {
            fuse_h_constants_1.setattr_x$valid$VH().set(seg, x);
        }
        public static void valid$set(@C("struct setattr_x") MemorySegment seg, long index, @C("int32_t") int x) {
            fuse_h_constants_1.setattr_x$valid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mode$VH() {
            return fuse_h_constants_1.setattr_x$mode$VH();
        }
        public static  @C("mode_t") short mode$get(@C("struct setattr_x") MemorySegment seg) {
            return (short)fuse_h_constants_1.setattr_x$mode$VH().get(seg);
        }
        public static  @C("mode_t") short mode$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.setattr_x$mode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mode$set(@C("struct setattr_x") MemorySegment seg, @C("mode_t") short x) {
            fuse_h_constants_1.setattr_x$mode$VH().set(seg, x);
        }
        public static void mode$set(@C("struct setattr_x") MemorySegment seg, long index, @C("mode_t") short x) {
            fuse_h_constants_1.setattr_x$mode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle uid$VH() {
            return fuse_h_constants_1.setattr_x$uid$VH();
        }
        public static  @C("uid_t") int uid$get(@C("struct setattr_x") MemorySegment seg) {
            return (int)fuse_h_constants_1.setattr_x$uid$VH().get(seg);
        }
        public static  @C("uid_t") int uid$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.setattr_x$uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void uid$set(@C("struct setattr_x") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_1.setattr_x$uid$VH().set(seg, x);
        }
        public static void uid$set(@C("struct setattr_x") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_1.setattr_x$uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle gid$VH() {
            return fuse_h_constants_1.setattr_x$gid$VH();
        }
        public static  @C("gid_t") int gid$get(@C("struct setattr_x") MemorySegment seg) {
            return (int)fuse_h_constants_1.setattr_x$gid$VH().get(seg);
        }
        public static  @C("gid_t") int gid$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.setattr_x$gid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void gid$set(@C("struct setattr_x") MemorySegment seg, @C("gid_t") int x) {
            fuse_h_constants_1.setattr_x$gid$VH().set(seg, x);
        }
        public static void gid$set(@C("struct setattr_x") MemorySegment seg, long index, @C("gid_t") int x) {
            fuse_h_constants_1.setattr_x$gid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle size$VH() {
            return fuse_h_constants_1.setattr_x$size$VH();
        }
        public static  @C("off_t") long size$get(@C("struct setattr_x") MemorySegment seg) {
            return (long)fuse_h_constants_1.setattr_x$size$VH().get(seg);
        }
        public static  @C("off_t") long size$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.setattr_x$size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void size$set(@C("struct setattr_x") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.setattr_x$size$VH().set(seg, x);
        }
        public static void size$set(@C("struct setattr_x") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.setattr_x$size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment acctime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 16));
        }
        public static MemorySegment modtime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static MemorySegment crtime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));
        }
        public static MemorySegment chgtime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment bkuptime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 16));
        }
        public static VarHandle flags$VH() {
            return fuse_h_constants_1.setattr_x$flags$VH();
        }
        public static  @C("uint32_t") int flags$get(@C("struct setattr_x") MemorySegment seg) {
            return (int)fuse_h_constants_1.setattr_x$flags$VH().get(seg);
        }
        public static  @C("uint32_t") int flags$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.setattr_x$flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flags$set(@C("struct setattr_x") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_1.setattr_x$flags$VH().set(seg, x);
        }
        public static void flags$set(@C("struct setattr_x") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_1.setattr_x$flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct setattr_x") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct setattr_x") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct setattr_x[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct setattr_x[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct setattr_x*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct setattr_x*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct setattr_x") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fuse_file_info")public static class fuse_file_info {

        /* package-private */ fuse_file_info() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fuse_file_info$struct$LAYOUT();
        }
        public static VarHandle flags$VH() {
            return fuse_h_constants_1.fuse_file_info$flags$VH();
        }
        public static  @C("int") int flags$get(@C("struct fuse_file_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_file_info$flags$VH().get(seg);
        }
        public static  @C("int") int flags$get(@C("struct fuse_file_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_file_info$flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flags$set(@C("struct fuse_file_info") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.fuse_file_info$flags$VH().set(seg, x);
        }
        public static void flags$set(@C("struct fuse_file_info") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.fuse_file_info$flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fh_old$VH() {
            return fuse_h_constants_1.fuse_file_info$fh_old$VH();
        }
        public static  @C("unsigned long") long fh_old$get(@C("struct fuse_file_info") MemorySegment seg) {
            return (long)fuse_h_constants_1.fuse_file_info$fh_old$VH().get(seg);
        }
        public static  @C("unsigned long") long fh_old$get(@C("struct fuse_file_info") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fuse_file_info$fh_old$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fh_old$set(@C("struct fuse_file_info") MemorySegment seg, @C("unsigned long") long x) {
            fuse_h_constants_1.fuse_file_info$fh_old$VH().set(seg, x);
        }
        public static void fh_old$set(@C("struct fuse_file_info") MemorySegment seg, long index, @C("unsigned long") long x) {
            fuse_h_constants_1.fuse_file_info$fh_old$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle writepage$VH() {
            return fuse_h_constants_1.fuse_file_info$writepage$VH();
        }
        public static  @C("int") int writepage$get(@C("struct fuse_file_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_file_info$writepage$VH().get(seg);
        }
        public static  @C("int") int writepage$get(@C("struct fuse_file_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_file_info$writepage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void writepage$set(@C("struct fuse_file_info") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.fuse_file_info$writepage$VH().set(seg, x);
        }
        public static void writepage$set(@C("struct fuse_file_info") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.fuse_file_info$writepage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fh$VH() {
            return fuse_h_constants_1.fuse_file_info$fh$VH();
        }
        public static  @C("uint64_t") long fh$get(@C("struct fuse_file_info") MemorySegment seg) {
            return (long)fuse_h_constants_1.fuse_file_info$fh$VH().get(seg);
        }
        public static  @C("uint64_t") long fh$get(@C("struct fuse_file_info") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fuse_file_info$fh$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fh$set(@C("struct fuse_file_info") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_1.fuse_file_info$fh$VH().set(seg, x);
        }
        public static void fh$set(@C("struct fuse_file_info") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_1.fuse_file_info$fh$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lock_owner$VH() {
            return fuse_h_constants_1.fuse_file_info$lock_owner$VH();
        }
        public static  @C("uint64_t") long lock_owner$get(@C("struct fuse_file_info") MemorySegment seg) {
            return (long)fuse_h_constants_1.fuse_file_info$lock_owner$VH().get(seg);
        }
        public static  @C("uint64_t") long lock_owner$get(@C("struct fuse_file_info") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fuse_file_info$lock_owner$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lock_owner$set(@C("struct fuse_file_info") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_1.fuse_file_info$lock_owner$VH().set(seg, x);
        }
        public static void lock_owner$set(@C("struct fuse_file_info") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_1.fuse_file_info$lock_owner$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_file_info") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_file_info") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_file_info[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_file_info[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_file_info*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_file_info*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_file_info") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fuse_conn_info")public static class fuse_conn_info {

        /* package-private */ fuse_conn_info() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fuse_conn_info$struct$LAYOUT();
        }
        public static VarHandle proto_major$VH() {
            return fuse_h_constants_1.fuse_conn_info$proto_major$VH();
        }
        public static  @C("unsigned int") int proto_major$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_conn_info$proto_major$VH().get(seg);
        }
        public static  @C("unsigned int") int proto_major$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_conn_info$proto_major$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void proto_major$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$proto_major$VH().set(seg, x);
        }
        public static void proto_major$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$proto_major$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle proto_minor$VH() {
            return fuse_h_constants_1.fuse_conn_info$proto_minor$VH();
        }
        public static  @C("unsigned int") int proto_minor$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_conn_info$proto_minor$VH().get(seg);
        }
        public static  @C("unsigned int") int proto_minor$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_conn_info$proto_minor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void proto_minor$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$proto_minor$VH().set(seg, x);
        }
        public static void proto_minor$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$proto_minor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle async_read$VH() {
            return fuse_h_constants_1.fuse_conn_info$async_read$VH();
        }
        public static  @C("unsigned int") int async_read$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_conn_info$async_read$VH().get(seg);
        }
        public static  @C("unsigned int") int async_read$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_conn_info$async_read$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void async_read$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$async_read$VH().set(seg, x);
        }
        public static void async_read$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$async_read$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle max_write$VH() {
            return fuse_h_constants_1.fuse_conn_info$max_write$VH();
        }
        public static  @C("unsigned int") int max_write$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_conn_info$max_write$VH().get(seg);
        }
        public static  @C("unsigned int") int max_write$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_conn_info$max_write$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void max_write$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$max_write$VH().set(seg, x);
        }
        public static void max_write$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$max_write$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle max_readahead$VH() {
            return fuse_h_constants_1.fuse_conn_info$max_readahead$VH();
        }
        public static  @C("unsigned int") int max_readahead$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_conn_info$max_readahead$VH().get(seg);
        }
        public static  @C("unsigned int") int max_readahead$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_conn_info$max_readahead$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void max_readahead$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$max_readahead$VH().set(seg, x);
        }
        public static void max_readahead$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$max_readahead$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("struct ")public static class enable {

            /* package-private */ enable() {}
            public static MemoryLayout $LAYOUT() {
                return fuse_h_constants_1.fuse_conn_info$enable$struct$LAYOUT();
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment enable$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 4));
        }
        public static VarHandle capable$VH() {
            return fuse_h_constants_1.fuse_conn_info$capable$VH();
        }
        public static  @C("unsigned int") int capable$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_conn_info$capable$VH().get(seg);
        }
        public static  @C("unsigned int") int capable$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_conn_info$capable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void capable$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$capable$VH().set(seg, x);
        }
        public static void capable$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$capable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle want$VH() {
            return fuse_h_constants_1.fuse_conn_info$want$VH();
        }
        public static  @C("unsigned int") int want$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_conn_info$want$VH().get(seg);
        }
        public static  @C("unsigned int") int want$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_conn_info$want$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void want$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$want$VH().set(seg, x);
        }
        public static void want$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$want$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle max_background$VH() {
            return fuse_h_constants_1.fuse_conn_info$max_background$VH();
        }
        public static  @C("unsigned int") int max_background$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_conn_info$max_background$VH().get(seg);
        }
        public static  @C("unsigned int") int max_background$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_conn_info$max_background$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void max_background$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$max_background$VH().set(seg, x);
        }
        public static void max_background$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$max_background$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle congestion_threshold$VH() {
            return fuse_h_constants_1.fuse_conn_info$congestion_threshold$VH();
        }
        public static  @C("unsigned int") int congestion_threshold$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_conn_info$congestion_threshold$VH().get(seg);
        }
        public static  @C("unsigned int") int congestion_threshold$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_conn_info$congestion_threshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void congestion_threshold$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$congestion_threshold$VH().set(seg, x);
        }
        public static void congestion_threshold$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fuse_conn_info$congestion_threshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 88));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_conn_info") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_conn_info") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_conn_info[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_conn_info[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_conn_info*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_conn_info*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_conn_info") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fuse_buf")public static class fuse_buf {

        /* package-private */ fuse_buf() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fuse_buf$struct$LAYOUT();
        }
        public static VarHandle size$VH() {
            return fuse_h_constants_1.fuse_buf$size$VH();
        }
        public static  @C("size_t") long size$get(@C("struct fuse_buf") MemorySegment seg) {
            return (long)fuse_h_constants_1.fuse_buf$size$VH().get(seg);
        }
        public static  @C("size_t") long size$get(@C("struct fuse_buf") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fuse_buf$size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void size$set(@C("struct fuse_buf") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_1.fuse_buf$size$VH().set(seg, x);
        }
        public static void size$set(@C("struct fuse_buf") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_1.fuse_buf$size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle flags$VH() {
            return fuse_h_constants_1.fuse_buf$flags$VH();
        }
        public static  @C("enum fuse_buf_flags") int flags$get(@C("struct fuse_buf") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_buf$flags$VH().get(seg);
        }
        public static  @C("enum fuse_buf_flags") int flags$get(@C("struct fuse_buf") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_buf$flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flags$set(@C("struct fuse_buf") MemorySegment seg, @C("enum fuse_buf_flags") int x) {
            fuse_h_constants_1.fuse_buf$flags$VH().set(seg, x);
        }
        public static void flags$set(@C("struct fuse_buf") MemorySegment seg, long index, @C("enum fuse_buf_flags") int x) {
            fuse_h_constants_1.fuse_buf$flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mem$VH() {
            return fuse_h_constants_1.fuse_buf$mem$VH();
        }
        public static  @C("void*") MemoryAddress mem$get(@C("struct fuse_buf") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fuse_buf$mem$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress mem$get(@C("struct fuse_buf") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fuse_buf$mem$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mem$set(@C("struct fuse_buf") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_1.fuse_buf$mem$VH().set(seg, x);
        }
        public static void mem$set(@C("struct fuse_buf") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_1.fuse_buf$mem$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fd$VH() {
            return fuse_h_constants_1.fuse_buf$fd$VH();
        }
        public static  @C("int") int fd$get(@C("struct fuse_buf") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_buf$fd$VH().get(seg);
        }
        public static  @C("int") int fd$get(@C("struct fuse_buf") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_buf$fd$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fd$set(@C("struct fuse_buf") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.fuse_buf$fd$VH().set(seg, x);
        }
        public static void fd$set(@C("struct fuse_buf") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.fuse_buf$fd$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pos$VH() {
            return fuse_h_constants_1.fuse_buf$pos$VH();
        }
        public static  @C("off_t") long pos$get(@C("struct fuse_buf") MemorySegment seg) {
            return (long)fuse_h_constants_1.fuse_buf$pos$VH().get(seg);
        }
        public static  @C("off_t") long pos$get(@C("struct fuse_buf") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fuse_buf$pos$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pos$set(@C("struct fuse_buf") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fuse_buf$pos$VH().set(seg, x);
        }
        public static void pos$set(@C("struct fuse_buf") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fuse_buf$pos$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_buf") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_buf") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_buf[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_buf[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_buf*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_buf*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_buf") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fuse_bufvec")public static class fuse_bufvec {

        /* package-private */ fuse_bufvec() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fuse_bufvec$struct$LAYOUT();
        }
        public static VarHandle count$VH() {
            return fuse_h_constants_1.fuse_bufvec$count$VH();
        }
        public static  @C("size_t") long count$get(@C("struct fuse_bufvec") MemorySegment seg) {
            return (long)fuse_h_constants_1.fuse_bufvec$count$VH().get(seg);
        }
        public static  @C("size_t") long count$get(@C("struct fuse_bufvec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fuse_bufvec$count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void count$set(@C("struct fuse_bufvec") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_1.fuse_bufvec$count$VH().set(seg, x);
        }
        public static void count$set(@C("struct fuse_bufvec") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_1.fuse_bufvec$count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle idx$VH() {
            return fuse_h_constants_1.fuse_bufvec$idx$VH();
        }
        public static  @C("size_t") long idx$get(@C("struct fuse_bufvec") MemorySegment seg) {
            return (long)fuse_h_constants_1.fuse_bufvec$idx$VH().get(seg);
        }
        public static  @C("size_t") long idx$get(@C("struct fuse_bufvec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fuse_bufvec$idx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void idx$set(@C("struct fuse_bufvec") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_1.fuse_bufvec$idx$VH().set(seg, x);
        }
        public static void idx$set(@C("struct fuse_bufvec") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_1.fuse_bufvec$idx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle off$VH() {
            return fuse_h_constants_1.fuse_bufvec$off$VH();
        }
        public static  @C("size_t") long off$get(@C("struct fuse_bufvec") MemorySegment seg) {
            return (long)fuse_h_constants_1.fuse_bufvec$off$VH().get(seg);
        }
        public static  @C("size_t") long off$get(@C("struct fuse_bufvec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fuse_bufvec$off$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void off$set(@C("struct fuse_bufvec") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_1.fuse_bufvec$off$VH().set(seg, x);
        }
        public static void off$set(@C("struct fuse_bufvec") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_1.fuse_bufvec$off$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment buf$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 40));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_bufvec") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_bufvec") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_bufvec[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_bufvec[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_bufvec*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_bufvec*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_bufvec") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct flock")public static class flock {

        /* package-private */ flock() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.flock$struct$LAYOUT();
        }
        public static VarHandle l_start$VH() {
            return fuse_h_constants_1.flock$l_start$VH();
        }
        public static  @C("off_t") long l_start$get(@C("struct flock") MemorySegment seg) {
            return (long)fuse_h_constants_1.flock$l_start$VH().get(seg);
        }
        public static  @C("off_t") long l_start$get(@C("struct flock") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.flock$l_start$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void l_start$set(@C("struct flock") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.flock$l_start$VH().set(seg, x);
        }
        public static void l_start$set(@C("struct flock") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.flock$l_start$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle l_len$VH() {
            return fuse_h_constants_1.flock$l_len$VH();
        }
        public static  @C("off_t") long l_len$get(@C("struct flock") MemorySegment seg) {
            return (long)fuse_h_constants_1.flock$l_len$VH().get(seg);
        }
        public static  @C("off_t") long l_len$get(@C("struct flock") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.flock$l_len$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void l_len$set(@C("struct flock") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.flock$l_len$VH().set(seg, x);
        }
        public static void l_len$set(@C("struct flock") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.flock$l_len$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle l_pid$VH() {
            return fuse_h_constants_1.flock$l_pid$VH();
        }
        public static  @C("pid_t") int l_pid$get(@C("struct flock") MemorySegment seg) {
            return (int)fuse_h_constants_1.flock$l_pid$VH().get(seg);
        }
        public static  @C("pid_t") int l_pid$get(@C("struct flock") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.flock$l_pid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void l_pid$set(@C("struct flock") MemorySegment seg, @C("pid_t") int x) {
            fuse_h_constants_1.flock$l_pid$VH().set(seg, x);
        }
        public static void l_pid$set(@C("struct flock") MemorySegment seg, long index, @C("pid_t") int x) {
            fuse_h_constants_1.flock$l_pid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle l_type$VH() {
            return fuse_h_constants_1.flock$l_type$VH();
        }
        public static  @C("short") short l_type$get(@C("struct flock") MemorySegment seg) {
            return (short)fuse_h_constants_1.flock$l_type$VH().get(seg);
        }
        public static  @C("short") short l_type$get(@C("struct flock") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.flock$l_type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void l_type$set(@C("struct flock") MemorySegment seg, @C("short") short x) {
            fuse_h_constants_1.flock$l_type$VH().set(seg, x);
        }
        public static void l_type$set(@C("struct flock") MemorySegment seg, long index, @C("short") short x) {
            fuse_h_constants_1.flock$l_type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle l_whence$VH() {
            return fuse_h_constants_1.flock$l_whence$VH();
        }
        public static  @C("short") short l_whence$get(@C("struct flock") MemorySegment seg) {
            return (short)fuse_h_constants_1.flock$l_whence$VH().get(seg);
        }
        public static  @C("short") short l_whence$get(@C("struct flock") MemorySegment seg, long index) {
            return (short)fuse_h_constants_1.flock$l_whence$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void l_whence$set(@C("struct flock") MemorySegment seg, @C("short") short x) {
            fuse_h_constants_1.flock$l_whence$VH().set(seg, x);
        }
        public static void l_whence$set(@C("struct flock") MemorySegment seg, long index, @C("short") short x) {
            fuse_h_constants_1.flock$l_whence$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct flock") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct flock") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct flock[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct flock[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct flock*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct flock*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct flock") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct flocktimeout")public static class flocktimeout {

        /* package-private */ flocktimeout() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.flocktimeout$struct$LAYOUT();
        }
        public static MemorySegment fl$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 24));
        }
        public static MemorySegment timeout$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct flocktimeout") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct flocktimeout") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct flocktimeout[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct flocktimeout[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct flocktimeout*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct flocktimeout*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct flocktimeout") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct radvisory")public static class radvisory {

        /* package-private */ radvisory() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.radvisory$struct$LAYOUT();
        }
        public static VarHandle ra_offset$VH() {
            return fuse_h_constants_1.radvisory$ra_offset$VH();
        }
        public static  @C("off_t") long ra_offset$get(@C("struct radvisory") MemorySegment seg) {
            return (long)fuse_h_constants_1.radvisory$ra_offset$VH().get(seg);
        }
        public static  @C("off_t") long ra_offset$get(@C("struct radvisory") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.radvisory$ra_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ra_offset$set(@C("struct radvisory") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.radvisory$ra_offset$VH().set(seg, x);
        }
        public static void ra_offset$set(@C("struct radvisory") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.radvisory$ra_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ra_count$VH() {
            return fuse_h_constants_1.radvisory$ra_count$VH();
        }
        public static  @C("int") int ra_count$get(@C("struct radvisory") MemorySegment seg) {
            return (int)fuse_h_constants_1.radvisory$ra_count$VH().get(seg);
        }
        public static  @C("int") int ra_count$get(@C("struct radvisory") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.radvisory$ra_count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ra_count$set(@C("struct radvisory") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.radvisory$ra_count$VH().set(seg, x);
        }
        public static void ra_count$set(@C("struct radvisory") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.radvisory$ra_count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct radvisory") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct radvisory") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct radvisory[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct radvisory[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct radvisory*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct radvisory*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct radvisory") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fsignatures")public static class fsignatures {

        /* package-private */ fsignatures() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fsignatures$struct$LAYOUT();
        }
        public static VarHandle fs_file_start$VH() {
            return fuse_h_constants_1.fsignatures$fs_file_start$VH();
        }
        public static  @C("off_t") long fs_file_start$get(@C("struct fsignatures") MemorySegment seg) {
            return (long)fuse_h_constants_1.fsignatures$fs_file_start$VH().get(seg);
        }
        public static  @C("off_t") long fs_file_start$get(@C("struct fsignatures") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fsignatures$fs_file_start$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fs_file_start$set(@C("struct fsignatures") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fsignatures$fs_file_start$VH().set(seg, x);
        }
        public static void fs_file_start$set(@C("struct fsignatures") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fsignatures$fs_file_start$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fs_blob_start$VH() {
            return fuse_h_constants_1.fsignatures$fs_blob_start$VH();
        }
        public static  @C("void*") MemoryAddress fs_blob_start$get(@C("struct fsignatures") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fsignatures$fs_blob_start$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress fs_blob_start$get(@C("struct fsignatures") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fsignatures$fs_blob_start$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fs_blob_start$set(@C("struct fsignatures") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_1.fsignatures$fs_blob_start$VH().set(seg, x);
        }
        public static void fs_blob_start$set(@C("struct fsignatures") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_1.fsignatures$fs_blob_start$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fs_blob_size$VH() {
            return fuse_h_constants_1.fsignatures$fs_blob_size$VH();
        }
        public static  @C("size_t") long fs_blob_size$get(@C("struct fsignatures") MemorySegment seg) {
            return (long)fuse_h_constants_1.fsignatures$fs_blob_size$VH().get(seg);
        }
        public static  @C("size_t") long fs_blob_size$get(@C("struct fsignatures") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fsignatures$fs_blob_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fs_blob_size$set(@C("struct fsignatures") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_1.fsignatures$fs_blob_size$VH().set(seg, x);
        }
        public static void fs_blob_size$set(@C("struct fsignatures") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_1.fsignatures$fs_blob_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fs_fsignatures_size$VH() {
            return fuse_h_constants_1.fsignatures$fs_fsignatures_size$VH();
        }
        public static  @C("size_t") long fs_fsignatures_size$get(@C("struct fsignatures") MemorySegment seg) {
            return (long)fuse_h_constants_1.fsignatures$fs_fsignatures_size$VH().get(seg);
        }
        public static  @C("size_t") long fs_fsignatures_size$get(@C("struct fsignatures") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fsignatures$fs_fsignatures_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fs_fsignatures_size$set(@C("struct fsignatures") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_1.fsignatures$fs_fsignatures_size$VH().set(seg, x);
        }
        public static void fs_fsignatures_size$set(@C("struct fsignatures") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_1.fsignatures$fs_fsignatures_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment fs_cdhash$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 20));
        }
        public static VarHandle fs_hash_type$VH() {
            return fuse_h_constants_1.fsignatures$fs_hash_type$VH();
        }
        public static  @C("int") int fs_hash_type$get(@C("struct fsignatures") MemorySegment seg) {
            return (int)fuse_h_constants_1.fsignatures$fs_hash_type$VH().get(seg);
        }
        public static  @C("int") int fs_hash_type$get(@C("struct fsignatures") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fsignatures$fs_hash_type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fs_hash_type$set(@C("struct fsignatures") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.fsignatures$fs_hash_type$VH().set(seg, x);
        }
        public static void fs_hash_type$set(@C("struct fsignatures") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.fsignatures$fs_hash_type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fsignatures") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fsignatures") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fsignatures[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fsignatures[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fsignatures*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fsignatures*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fsignatures") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fsignatures")public static class fsignatures_t extends fsignatures {

        /* package-private */ fsignatures_t() {}
    }

    @C("struct fsupplement")public static class fsupplement {

        /* package-private */ fsupplement() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fsupplement$struct$LAYOUT();
        }
        public static VarHandle fs_file_start$VH() {
            return fuse_h_constants_1.fsupplement$fs_file_start$VH();
        }
        public static  @C("off_t") long fs_file_start$get(@C("struct fsupplement") MemorySegment seg) {
            return (long)fuse_h_constants_1.fsupplement$fs_file_start$VH().get(seg);
        }
        public static  @C("off_t") long fs_file_start$get(@C("struct fsupplement") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fsupplement$fs_file_start$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fs_file_start$set(@C("struct fsupplement") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fsupplement$fs_file_start$VH().set(seg, x);
        }
        public static void fs_file_start$set(@C("struct fsupplement") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fsupplement$fs_file_start$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fs_blob_start$VH() {
            return fuse_h_constants_1.fsupplement$fs_blob_start$VH();
        }
        public static  @C("off_t") long fs_blob_start$get(@C("struct fsupplement") MemorySegment seg) {
            return (long)fuse_h_constants_1.fsupplement$fs_blob_start$VH().get(seg);
        }
        public static  @C("off_t") long fs_blob_start$get(@C("struct fsupplement") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fsupplement$fs_blob_start$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fs_blob_start$set(@C("struct fsupplement") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fsupplement$fs_blob_start$VH().set(seg, x);
        }
        public static void fs_blob_start$set(@C("struct fsupplement") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fsupplement$fs_blob_start$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fs_blob_size$VH() {
            return fuse_h_constants_1.fsupplement$fs_blob_size$VH();
        }
        public static  @C("size_t") long fs_blob_size$get(@C("struct fsupplement") MemorySegment seg) {
            return (long)fuse_h_constants_1.fsupplement$fs_blob_size$VH().get(seg);
        }
        public static  @C("size_t") long fs_blob_size$get(@C("struct fsupplement") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fsupplement$fs_blob_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fs_blob_size$set(@C("struct fsupplement") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_1.fsupplement$fs_blob_size$VH().set(seg, x);
        }
        public static void fs_blob_size$set(@C("struct fsupplement") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_1.fsupplement$fs_blob_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fs_orig_fd$VH() {
            return fuse_h_constants_1.fsupplement$fs_orig_fd$VH();
        }
        public static  @C("int") int fs_orig_fd$get(@C("struct fsupplement") MemorySegment seg) {
            return (int)fuse_h_constants_1.fsupplement$fs_orig_fd$VH().get(seg);
        }
        public static  @C("int") int fs_orig_fd$get(@C("struct fsupplement") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fsupplement$fs_orig_fd$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fs_orig_fd$set(@C("struct fsupplement") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.fsupplement$fs_orig_fd$VH().set(seg, x);
        }
        public static void fs_orig_fd$set(@C("struct fsupplement") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.fsupplement$fs_orig_fd$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fsupplement") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fsupplement") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fsupplement[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fsupplement[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fsupplement*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fsupplement*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fsupplement") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fsupplement")public static class fsupplement_t extends fsupplement {

        /* package-private */ fsupplement_t() {}
    }

    @C("struct fchecklv")public static class fchecklv {

        /* package-private */ fchecklv() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fchecklv$struct$LAYOUT();
        }
        public static VarHandle lv_file_start$VH() {
            return fuse_h_constants_1.fchecklv$lv_file_start$VH();
        }
        public static  @C("off_t") long lv_file_start$get(@C("struct fchecklv") MemorySegment seg) {
            return (long)fuse_h_constants_1.fchecklv$lv_file_start$VH().get(seg);
        }
        public static  @C("off_t") long lv_file_start$get(@C("struct fchecklv") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fchecklv$lv_file_start$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lv_file_start$set(@C("struct fchecklv") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fchecklv$lv_file_start$VH().set(seg, x);
        }
        public static void lv_file_start$set(@C("struct fchecklv") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fchecklv$lv_file_start$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lv_error_message_size$VH() {
            return fuse_h_constants_1.fchecklv$lv_error_message_size$VH();
        }
        public static  @C("size_t") long lv_error_message_size$get(@C("struct fchecklv") MemorySegment seg) {
            return (long)fuse_h_constants_1.fchecklv$lv_error_message_size$VH().get(seg);
        }
        public static  @C("size_t") long lv_error_message_size$get(@C("struct fchecklv") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fchecklv$lv_error_message_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lv_error_message_size$set(@C("struct fchecklv") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_1.fchecklv$lv_error_message_size$VH().set(seg, x);
        }
        public static void lv_error_message_size$set(@C("struct fchecklv") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_1.fchecklv$lv_error_message_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lv_error_message$VH() {
            return fuse_h_constants_1.fchecklv$lv_error_message$VH();
        }
        public static  @C("void*") MemoryAddress lv_error_message$get(@C("struct fchecklv") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fchecklv$lv_error_message$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress lv_error_message$get(@C("struct fchecklv") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fchecklv$lv_error_message$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lv_error_message$set(@C("struct fchecklv") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_1.fchecklv$lv_error_message$VH().set(seg, x);
        }
        public static void lv_error_message$set(@C("struct fchecklv") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_1.fchecklv$lv_error_message$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fchecklv") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fchecklv") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fchecklv[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fchecklv[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fchecklv*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fchecklv*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fchecklv") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fchecklv")public static class fchecklv_t extends fchecklv {

        /* package-private */ fchecklv_t() {}
    }

    @C("struct fgetsigsinfo")public static class fgetsigsinfo {

        /* package-private */ fgetsigsinfo() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fgetsigsinfo$struct$LAYOUT();
        }
        public static VarHandle fg_file_start$VH() {
            return fuse_h_constants_1.fgetsigsinfo$fg_file_start$VH();
        }
        public static  @C("off_t") long fg_file_start$get(@C("struct fgetsigsinfo") MemorySegment seg) {
            return (long)fuse_h_constants_1.fgetsigsinfo$fg_file_start$VH().get(seg);
        }
        public static  @C("off_t") long fg_file_start$get(@C("struct fgetsigsinfo") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fgetsigsinfo$fg_file_start$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fg_file_start$set(@C("struct fgetsigsinfo") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fgetsigsinfo$fg_file_start$VH().set(seg, x);
        }
        public static void fg_file_start$set(@C("struct fgetsigsinfo") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fgetsigsinfo$fg_file_start$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fg_info_request$VH() {
            return fuse_h_constants_1.fgetsigsinfo$fg_info_request$VH();
        }
        public static  @C("int") int fg_info_request$get(@C("struct fgetsigsinfo") MemorySegment seg) {
            return (int)fuse_h_constants_1.fgetsigsinfo$fg_info_request$VH().get(seg);
        }
        public static  @C("int") int fg_info_request$get(@C("struct fgetsigsinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fgetsigsinfo$fg_info_request$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fg_info_request$set(@C("struct fgetsigsinfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.fgetsigsinfo$fg_info_request$VH().set(seg, x);
        }
        public static void fg_info_request$set(@C("struct fgetsigsinfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.fgetsigsinfo$fg_info_request$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fg_sig_is_platform$VH() {
            return fuse_h_constants_1.fgetsigsinfo$fg_sig_is_platform$VH();
        }
        public static  @C("int") int fg_sig_is_platform$get(@C("struct fgetsigsinfo") MemorySegment seg) {
            return (int)fuse_h_constants_1.fgetsigsinfo$fg_sig_is_platform$VH().get(seg);
        }
        public static  @C("int") int fg_sig_is_platform$get(@C("struct fgetsigsinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fgetsigsinfo$fg_sig_is_platform$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fg_sig_is_platform$set(@C("struct fgetsigsinfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.fgetsigsinfo$fg_sig_is_platform$VH().set(seg, x);
        }
        public static void fg_sig_is_platform$set(@C("struct fgetsigsinfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.fgetsigsinfo$fg_sig_is_platform$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fgetsigsinfo") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fgetsigsinfo") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fgetsigsinfo[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fgetsigsinfo[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fgetsigsinfo*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fgetsigsinfo*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fgetsigsinfo") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fgetsigsinfo")public static class fgetsigsinfo_t extends fgetsigsinfo {

        /* package-private */ fgetsigsinfo_t() {}
    }

    @C("struct fstore")public static class fstore {

        /* package-private */ fstore() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fstore$struct$LAYOUT();
        }
        public static VarHandle fst_flags$VH() {
            return fuse_h_constants_1.fstore$fst_flags$VH();
        }
        public static  @C("unsigned int") int fst_flags$get(@C("struct fstore") MemorySegment seg) {
            return (int)fuse_h_constants_1.fstore$fst_flags$VH().get(seg);
        }
        public static  @C("unsigned int") int fst_flags$get(@C("struct fstore") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fstore$fst_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fst_flags$set(@C("struct fstore") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fstore$fst_flags$VH().set(seg, x);
        }
        public static void fst_flags$set(@C("struct fstore") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fstore$fst_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fst_posmode$VH() {
            return fuse_h_constants_1.fstore$fst_posmode$VH();
        }
        public static  @C("int") int fst_posmode$get(@C("struct fstore") MemorySegment seg) {
            return (int)fuse_h_constants_1.fstore$fst_posmode$VH().get(seg);
        }
        public static  @C("int") int fst_posmode$get(@C("struct fstore") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fstore$fst_posmode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fst_posmode$set(@C("struct fstore") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.fstore$fst_posmode$VH().set(seg, x);
        }
        public static void fst_posmode$set(@C("struct fstore") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.fstore$fst_posmode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fst_offset$VH() {
            return fuse_h_constants_1.fstore$fst_offset$VH();
        }
        public static  @C("off_t") long fst_offset$get(@C("struct fstore") MemorySegment seg) {
            return (long)fuse_h_constants_1.fstore$fst_offset$VH().get(seg);
        }
        public static  @C("off_t") long fst_offset$get(@C("struct fstore") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fstore$fst_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fst_offset$set(@C("struct fstore") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fstore$fst_offset$VH().set(seg, x);
        }
        public static void fst_offset$set(@C("struct fstore") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fstore$fst_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fst_length$VH() {
            return fuse_h_constants_1.fstore$fst_length$VH();
        }
        public static  @C("off_t") long fst_length$get(@C("struct fstore") MemorySegment seg) {
            return (long)fuse_h_constants_1.fstore$fst_length$VH().get(seg);
        }
        public static  @C("off_t") long fst_length$get(@C("struct fstore") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fstore$fst_length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fst_length$set(@C("struct fstore") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fstore$fst_length$VH().set(seg, x);
        }
        public static void fst_length$set(@C("struct fstore") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fstore$fst_length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fst_bytesalloc$VH() {
            return fuse_h_constants_1.fstore$fst_bytesalloc$VH();
        }
        public static  @C("off_t") long fst_bytesalloc$get(@C("struct fstore") MemorySegment seg) {
            return (long)fuse_h_constants_1.fstore$fst_bytesalloc$VH().get(seg);
        }
        public static  @C("off_t") long fst_bytesalloc$get(@C("struct fstore") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fstore$fst_bytesalloc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fst_bytesalloc$set(@C("struct fstore") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fstore$fst_bytesalloc$VH().set(seg, x);
        }
        public static void fst_bytesalloc$set(@C("struct fstore") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fstore$fst_bytesalloc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fstore") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fstore") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fstore[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fstore[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fstore*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fstore*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fstore") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fstore")public static class fstore_t extends fstore {

        /* package-private */ fstore_t() {}
    }

    @C("struct fpunchhole")public static class fpunchhole {

        /* package-private */ fpunchhole() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fpunchhole$struct$LAYOUT();
        }
        public static VarHandle fp_flags$VH() {
            return fuse_h_constants_1.fpunchhole$fp_flags$VH();
        }
        public static  @C("unsigned int") int fp_flags$get(@C("struct fpunchhole") MemorySegment seg) {
            return (int)fuse_h_constants_1.fpunchhole$fp_flags$VH().get(seg);
        }
        public static  @C("unsigned int") int fp_flags$get(@C("struct fpunchhole") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fpunchhole$fp_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fp_flags$set(@C("struct fpunchhole") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fpunchhole$fp_flags$VH().set(seg, x);
        }
        public static void fp_flags$set(@C("struct fpunchhole") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fpunchhole$fp_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle reserved$VH() {
            return fuse_h_constants_1.fpunchhole$reserved$VH();
        }
        public static  @C("unsigned int") int reserved$get(@C("struct fpunchhole") MemorySegment seg) {
            return (int)fuse_h_constants_1.fpunchhole$reserved$VH().get(seg);
        }
        public static  @C("unsigned int") int reserved$get(@C("struct fpunchhole") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fpunchhole$reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void reserved$set(@C("struct fpunchhole") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fpunchhole$reserved$VH().set(seg, x);
        }
        public static void reserved$set(@C("struct fpunchhole") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fpunchhole$reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fp_offset$VH() {
            return fuse_h_constants_1.fpunchhole$fp_offset$VH();
        }
        public static  @C("off_t") long fp_offset$get(@C("struct fpunchhole") MemorySegment seg) {
            return (long)fuse_h_constants_1.fpunchhole$fp_offset$VH().get(seg);
        }
        public static  @C("off_t") long fp_offset$get(@C("struct fpunchhole") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fpunchhole$fp_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fp_offset$set(@C("struct fpunchhole") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fpunchhole$fp_offset$VH().set(seg, x);
        }
        public static void fp_offset$set(@C("struct fpunchhole") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fpunchhole$fp_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fp_length$VH() {
            return fuse_h_constants_1.fpunchhole$fp_length$VH();
        }
        public static  @C("off_t") long fp_length$get(@C("struct fpunchhole") MemorySegment seg) {
            return (long)fuse_h_constants_1.fpunchhole$fp_length$VH().get(seg);
        }
        public static  @C("off_t") long fp_length$get(@C("struct fpunchhole") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fpunchhole$fp_length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fp_length$set(@C("struct fpunchhole") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fpunchhole$fp_length$VH().set(seg, x);
        }
        public static void fp_length$set(@C("struct fpunchhole") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fpunchhole$fp_length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fpunchhole") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fpunchhole") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fpunchhole[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fpunchhole[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fpunchhole*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fpunchhole*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fpunchhole") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fpunchhole")public static class fpunchhole_t extends fpunchhole {

        /* package-private */ fpunchhole_t() {}
    }

    @C("struct ftrimactivefile")public static class ftrimactivefile {

        /* package-private */ ftrimactivefile() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.ftrimactivefile$struct$LAYOUT();
        }
        public static VarHandle fta_offset$VH() {
            return fuse_h_constants_1.ftrimactivefile$fta_offset$VH();
        }
        public static  @C("off_t") long fta_offset$get(@C("struct ftrimactivefile") MemorySegment seg) {
            return (long)fuse_h_constants_1.ftrimactivefile$fta_offset$VH().get(seg);
        }
        public static  @C("off_t") long fta_offset$get(@C("struct ftrimactivefile") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.ftrimactivefile$fta_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fta_offset$set(@C("struct ftrimactivefile") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.ftrimactivefile$fta_offset$VH().set(seg, x);
        }
        public static void fta_offset$set(@C("struct ftrimactivefile") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.ftrimactivefile$fta_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fta_length$VH() {
            return fuse_h_constants_1.ftrimactivefile$fta_length$VH();
        }
        public static  @C("off_t") long fta_length$get(@C("struct ftrimactivefile") MemorySegment seg) {
            return (long)fuse_h_constants_1.ftrimactivefile$fta_length$VH().get(seg);
        }
        public static  @C("off_t") long fta_length$get(@C("struct ftrimactivefile") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.ftrimactivefile$fta_length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fta_length$set(@C("struct ftrimactivefile") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.ftrimactivefile$fta_length$VH().set(seg, x);
        }
        public static void fta_length$set(@C("struct ftrimactivefile") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.ftrimactivefile$fta_length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ftrimactivefile") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ftrimactivefile") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct ftrimactivefile[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct ftrimactivefile[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct ftrimactivefile*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct ftrimactivefile*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ftrimactivefile") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ftrimactivefile")public static class ftrimactivefile_t extends ftrimactivefile {

        /* package-private */ ftrimactivefile_t() {}
    }

    @C("struct fspecread")public static class fspecread {

        /* package-private */ fspecread() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fspecread$struct$LAYOUT();
        }
        public static VarHandle fsr_flags$VH() {
            return fuse_h_constants_1.fspecread$fsr_flags$VH();
        }
        public static  @C("unsigned int") int fsr_flags$get(@C("struct fspecread") MemorySegment seg) {
            return (int)fuse_h_constants_1.fspecread$fsr_flags$VH().get(seg);
        }
        public static  @C("unsigned int") int fsr_flags$get(@C("struct fspecread") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fspecread$fsr_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fsr_flags$set(@C("struct fspecread") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fspecread$fsr_flags$VH().set(seg, x);
        }
        public static void fsr_flags$set(@C("struct fspecread") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fspecread$fsr_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle reserved$VH() {
            return fuse_h_constants_1.fspecread$reserved$VH();
        }
        public static  @C("unsigned int") int reserved$get(@C("struct fspecread") MemorySegment seg) {
            return (int)fuse_h_constants_1.fspecread$reserved$VH().get(seg);
        }
        public static  @C("unsigned int") int reserved$get(@C("struct fspecread") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fspecread$reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void reserved$set(@C("struct fspecread") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.fspecread$reserved$VH().set(seg, x);
        }
        public static void reserved$set(@C("struct fspecread") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.fspecread$reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fsr_offset$VH() {
            return fuse_h_constants_1.fspecread$fsr_offset$VH();
        }
        public static  @C("off_t") long fsr_offset$get(@C("struct fspecread") MemorySegment seg) {
            return (long)fuse_h_constants_1.fspecread$fsr_offset$VH().get(seg);
        }
        public static  @C("off_t") long fsr_offset$get(@C("struct fspecread") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fspecread$fsr_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fsr_offset$set(@C("struct fspecread") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fspecread$fsr_offset$VH().set(seg, x);
        }
        public static void fsr_offset$set(@C("struct fspecread") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fspecread$fsr_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fsr_length$VH() {
            return fuse_h_constants_1.fspecread$fsr_length$VH();
        }
        public static  @C("off_t") long fsr_length$get(@C("struct fspecread") MemorySegment seg) {
            return (long)fuse_h_constants_1.fspecread$fsr_length$VH().get(seg);
        }
        public static  @C("off_t") long fsr_length$get(@C("struct fspecread") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fspecread$fsr_length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fsr_length$set(@C("struct fspecread") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fspecread$fsr_length$VH().set(seg, x);
        }
        public static void fsr_length$set(@C("struct fspecread") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fspecread$fsr_length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fspecread") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fspecread") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fspecread[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fspecread[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fspecread*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fspecread*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fspecread") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fspecread")public static class fspecread_t extends fspecread {

        /* package-private */ fspecread_t() {}
    }

    @C("struct fbootstraptransfer")public static class fbootstraptransfer {

        /* package-private */ fbootstraptransfer() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.fbootstraptransfer$struct$LAYOUT();
        }
        public static VarHandle fbt_offset$VH() {
            return fuse_h_constants_1.fbootstraptransfer$fbt_offset$VH();
        }
        public static  @C("off_t") long fbt_offset$get(@C("struct fbootstraptransfer") MemorySegment seg) {
            return (long)fuse_h_constants_1.fbootstraptransfer$fbt_offset$VH().get(seg);
        }
        public static  @C("off_t") long fbt_offset$get(@C("struct fbootstraptransfer") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fbootstraptransfer$fbt_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fbt_offset$set(@C("struct fbootstraptransfer") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.fbootstraptransfer$fbt_offset$VH().set(seg, x);
        }
        public static void fbt_offset$set(@C("struct fbootstraptransfer") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.fbootstraptransfer$fbt_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fbt_length$VH() {
            return fuse_h_constants_1.fbootstraptransfer$fbt_length$VH();
        }
        public static  @C("size_t") long fbt_length$get(@C("struct fbootstraptransfer") MemorySegment seg) {
            return (long)fuse_h_constants_1.fbootstraptransfer$fbt_length$VH().get(seg);
        }
        public static  @C("size_t") long fbt_length$get(@C("struct fbootstraptransfer") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.fbootstraptransfer$fbt_length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fbt_length$set(@C("struct fbootstraptransfer") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_1.fbootstraptransfer$fbt_length$VH().set(seg, x);
        }
        public static void fbt_length$set(@C("struct fbootstraptransfer") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_1.fbootstraptransfer$fbt_length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fbt_buffer$VH() {
            return fuse_h_constants_1.fbootstraptransfer$fbt_buffer$VH();
        }
        public static  @C("void*") MemoryAddress fbt_buffer$get(@C("struct fbootstraptransfer") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fbootstraptransfer$fbt_buffer$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress fbt_buffer$get(@C("struct fbootstraptransfer") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fbootstraptransfer$fbt_buffer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fbt_buffer$set(@C("struct fbootstraptransfer") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_1.fbootstraptransfer$fbt_buffer$VH().set(seg, x);
        }
        public static void fbt_buffer$set(@C("struct fbootstraptransfer") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_1.fbootstraptransfer$fbt_buffer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fbootstraptransfer") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fbootstraptransfer") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fbootstraptransfer[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fbootstraptransfer[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fbootstraptransfer*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fbootstraptransfer*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fbootstraptransfer") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fbootstraptransfer")public static class fbootstraptransfer_t extends fbootstraptransfer {

        /* package-private */ fbootstraptransfer_t() {}
    }

    @C("struct log2phys")public static class log2phys {

        /* package-private */ log2phys() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.log2phys$struct$LAYOUT();
        }
        public static VarHandle l2p_flags$VH() {
            return fuse_h_constants_1.log2phys$l2p_flags$VH();
        }
        public static  @C("unsigned int") int l2p_flags$get(@C("struct log2phys") MemorySegment seg) {
            return (int)fuse_h_constants_1.log2phys$l2p_flags$VH().get(seg);
        }
        public static  @C("unsigned int") int l2p_flags$get(@C("struct log2phys") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.log2phys$l2p_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void l2p_flags$set(@C("struct log2phys") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_1.log2phys$l2p_flags$VH().set(seg, x);
        }
        public static void l2p_flags$set(@C("struct log2phys") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_1.log2phys$l2p_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle l2p_contigbytes$VH() {
            return fuse_h_constants_1.log2phys$l2p_contigbytes$VH();
        }
        public static  @C("off_t") long l2p_contigbytes$get(@C("struct log2phys") MemorySegment seg) {
            return (long)fuse_h_constants_1.log2phys$l2p_contigbytes$VH().get(seg);
        }
        public static  @C("off_t") long l2p_contigbytes$get(@C("struct log2phys") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.log2phys$l2p_contigbytes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void l2p_contigbytes$set(@C("struct log2phys") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.log2phys$l2p_contigbytes$VH().set(seg, x);
        }
        public static void l2p_contigbytes$set(@C("struct log2phys") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.log2phys$l2p_contigbytes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle l2p_devoffset$VH() {
            return fuse_h_constants_1.log2phys$l2p_devoffset$VH();
        }
        public static  @C("off_t") long l2p_devoffset$get(@C("struct log2phys") MemorySegment seg) {
            return (long)fuse_h_constants_1.log2phys$l2p_devoffset$VH().get(seg);
        }
        public static  @C("off_t") long l2p_devoffset$get(@C("struct log2phys") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.log2phys$l2p_devoffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void l2p_devoffset$set(@C("struct log2phys") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_1.log2phys$l2p_devoffset$VH().set(seg, x);
        }
        public static void l2p_devoffset$set(@C("struct log2phys") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_1.log2phys$l2p_devoffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct log2phys") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct log2phys") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct log2phys[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct log2phys[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct log2phys*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct log2phys*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct log2phys") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct tm")public static class tm {

        /* package-private */ tm() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.tm$struct$LAYOUT();
        }
        public static VarHandle tm_sec$VH() {
            return fuse_h_constants_1.tm$tm_sec$VH();
        }
        public static  @C("int") int tm_sec$get(@C("struct tm") MemorySegment seg) {
            return (int)fuse_h_constants_1.tm$tm_sec$VH().get(seg);
        }
        public static  @C("int") int tm_sec$get(@C("struct tm") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.tm$tm_sec$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_sec$set(@C("struct tm") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.tm$tm_sec$VH().set(seg, x);
        }
        public static void tm_sec$set(@C("struct tm") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.tm$tm_sec$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm_min$VH() {
            return fuse_h_constants_1.tm$tm_min$VH();
        }
        public static  @C("int") int tm_min$get(@C("struct tm") MemorySegment seg) {
            return (int)fuse_h_constants_1.tm$tm_min$VH().get(seg);
        }
        public static  @C("int") int tm_min$get(@C("struct tm") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.tm$tm_min$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_min$set(@C("struct tm") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.tm$tm_min$VH().set(seg, x);
        }
        public static void tm_min$set(@C("struct tm") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.tm$tm_min$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm_hour$VH() {
            return fuse_h_constants_1.tm$tm_hour$VH();
        }
        public static  @C("int") int tm_hour$get(@C("struct tm") MemorySegment seg) {
            return (int)fuse_h_constants_1.tm$tm_hour$VH().get(seg);
        }
        public static  @C("int") int tm_hour$get(@C("struct tm") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.tm$tm_hour$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_hour$set(@C("struct tm") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.tm$tm_hour$VH().set(seg, x);
        }
        public static void tm_hour$set(@C("struct tm") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.tm$tm_hour$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm_mday$VH() {
            return fuse_h_constants_1.tm$tm_mday$VH();
        }
        public static  @C("int") int tm_mday$get(@C("struct tm") MemorySegment seg) {
            return (int)fuse_h_constants_1.tm$tm_mday$VH().get(seg);
        }
        public static  @C("int") int tm_mday$get(@C("struct tm") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.tm$tm_mday$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_mday$set(@C("struct tm") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.tm$tm_mday$VH().set(seg, x);
        }
        public static void tm_mday$set(@C("struct tm") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.tm$tm_mday$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm_mon$VH() {
            return fuse_h_constants_1.tm$tm_mon$VH();
        }
        public static  @C("int") int tm_mon$get(@C("struct tm") MemorySegment seg) {
            return (int)fuse_h_constants_1.tm$tm_mon$VH().get(seg);
        }
        public static  @C("int") int tm_mon$get(@C("struct tm") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.tm$tm_mon$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_mon$set(@C("struct tm") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.tm$tm_mon$VH().set(seg, x);
        }
        public static void tm_mon$set(@C("struct tm") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.tm$tm_mon$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm_year$VH() {
            return fuse_h_constants_1.tm$tm_year$VH();
        }
        public static  @C("int") int tm_year$get(@C("struct tm") MemorySegment seg) {
            return (int)fuse_h_constants_1.tm$tm_year$VH().get(seg);
        }
        public static  @C("int") int tm_year$get(@C("struct tm") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.tm$tm_year$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_year$set(@C("struct tm") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.tm$tm_year$VH().set(seg, x);
        }
        public static void tm_year$set(@C("struct tm") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.tm$tm_year$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm_wday$VH() {
            return fuse_h_constants_1.tm$tm_wday$VH();
        }
        public static  @C("int") int tm_wday$get(@C("struct tm") MemorySegment seg) {
            return (int)fuse_h_constants_1.tm$tm_wday$VH().get(seg);
        }
        public static  @C("int") int tm_wday$get(@C("struct tm") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.tm$tm_wday$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_wday$set(@C("struct tm") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.tm$tm_wday$VH().set(seg, x);
        }
        public static void tm_wday$set(@C("struct tm") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.tm$tm_wday$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm_yday$VH() {
            return fuse_h_constants_1.tm$tm_yday$VH();
        }
        public static  @C("int") int tm_yday$get(@C("struct tm") MemorySegment seg) {
            return (int)fuse_h_constants_1.tm$tm_yday$VH().get(seg);
        }
        public static  @C("int") int tm_yday$get(@C("struct tm") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.tm$tm_yday$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_yday$set(@C("struct tm") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.tm$tm_yday$VH().set(seg, x);
        }
        public static void tm_yday$set(@C("struct tm") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.tm$tm_yday$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm_isdst$VH() {
            return fuse_h_constants_1.tm$tm_isdst$VH();
        }
        public static  @C("int") int tm_isdst$get(@C("struct tm") MemorySegment seg) {
            return (int)fuse_h_constants_1.tm$tm_isdst$VH().get(seg);
        }
        public static  @C("int") int tm_isdst$get(@C("struct tm") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.tm$tm_isdst$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_isdst$set(@C("struct tm") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.tm$tm_isdst$VH().set(seg, x);
        }
        public static void tm_isdst$set(@C("struct tm") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.tm$tm_isdst$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm_gmtoff$VH() {
            return fuse_h_constants_1.tm$tm_gmtoff$VH();
        }
        public static  @C("long") long tm_gmtoff$get(@C("struct tm") MemorySegment seg) {
            return (long)fuse_h_constants_1.tm$tm_gmtoff$VH().get(seg);
        }
        public static  @C("long") long tm_gmtoff$get(@C("struct tm") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.tm$tm_gmtoff$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_gmtoff$set(@C("struct tm") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_1.tm$tm_gmtoff$VH().set(seg, x);
        }
        public static void tm_gmtoff$set(@C("struct tm") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_1.tm$tm_gmtoff$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm_zone$VH() {
            return fuse_h_constants_1.tm$tm_zone$VH();
        }
        public static  @C("char*") MemoryAddress tm_zone$get(@C("struct tm") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.tm$tm_zone$VH().get(seg);
        }
        public static  @C("char*") MemoryAddress tm_zone$get(@C("struct tm") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.tm$tm_zone$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm_zone$set(@C("struct tm") MemorySegment seg, @C("char*") MemoryAddress x) {
            fuse_h_constants_1.tm$tm_zone$VH().set(seg, x);
        }
        public static void tm_zone$set(@C("struct tm") MemorySegment seg, long index, @C("char*") MemoryAddress x) {
            fuse_h_constants_1.tm$tm_zone$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct tm") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct tm") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct tm[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct tm[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct tm*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct tm*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct tm") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct utimbuf")public static class utimbuf {

        /* package-private */ utimbuf() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.utimbuf$struct$LAYOUT();
        }
        public static VarHandle actime$VH() {
            return fuse_h_constants_1.utimbuf$actime$VH();
        }
        public static  @C("time_t") long actime$get(@C("struct utimbuf") MemorySegment seg) {
            return (long)fuse_h_constants_1.utimbuf$actime$VH().get(seg);
        }
        public static  @C("time_t") long actime$get(@C("struct utimbuf") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.utimbuf$actime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void actime$set(@C("struct utimbuf") MemorySegment seg, @C("time_t") long x) {
            fuse_h_constants_1.utimbuf$actime$VH().set(seg, x);
        }
        public static void actime$set(@C("struct utimbuf") MemorySegment seg, long index, @C("time_t") long x) {
            fuse_h_constants_1.utimbuf$actime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle modtime$VH() {
            return fuse_h_constants_1.utimbuf$modtime$VH();
        }
        public static  @C("time_t") long modtime$get(@C("struct utimbuf") MemorySegment seg) {
            return (long)fuse_h_constants_1.utimbuf$modtime$VH().get(seg);
        }
        public static  @C("time_t") long modtime$get(@C("struct utimbuf") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.utimbuf$modtime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void modtime$set(@C("struct utimbuf") MemorySegment seg, @C("time_t") long x) {
            fuse_h_constants_1.utimbuf$modtime$VH().set(seg, x);
        }
        public static void modtime$set(@C("struct utimbuf") MemorySegment seg, long index, @C("time_t") long x) {
            fuse_h_constants_1.utimbuf$modtime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct utimbuf") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct utimbuf") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct utimbuf[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct utimbuf[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct utimbuf*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct utimbuf*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct utimbuf") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct statvfs")public static class statvfs {

        /* package-private */ statvfs() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_1.statvfs$struct$LAYOUT();
        }
        public static VarHandle f_bsize$VH() {
            return fuse_h_constants_1.statvfs$f_bsize$VH();
        }
        public static  @C("unsigned long") long f_bsize$get(@C("struct statvfs") MemorySegment seg) {
            return (long)fuse_h_constants_1.statvfs$f_bsize$VH().get(seg);
        }
        public static  @C("unsigned long") long f_bsize$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.statvfs$f_bsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bsize$set(@C("struct statvfs") MemorySegment seg, @C("unsigned long") long x) {
            fuse_h_constants_1.statvfs$f_bsize$VH().set(seg, x);
        }
        public static void f_bsize$set(@C("struct statvfs") MemorySegment seg, long index, @C("unsigned long") long x) {
            fuse_h_constants_1.statvfs$f_bsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_frsize$VH() {
            return fuse_h_constants_1.statvfs$f_frsize$VH();
        }
        public static  @C("unsigned long") long f_frsize$get(@C("struct statvfs") MemorySegment seg) {
            return (long)fuse_h_constants_1.statvfs$f_frsize$VH().get(seg);
        }
        public static  @C("unsigned long") long f_frsize$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_1.statvfs$f_frsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_frsize$set(@C("struct statvfs") MemorySegment seg, @C("unsigned long") long x) {
            fuse_h_constants_1.statvfs$f_frsize$VH().set(seg, x);
        }
        public static void f_frsize$set(@C("struct statvfs") MemorySegment seg, long index, @C("unsigned long") long x) {
            fuse_h_constants_1.statvfs$f_frsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_blocks$VH() {
            return fuse_h_constants_1.statvfs$f_blocks$VH();
        }
        public static  @C("fsblkcnt_t") int f_blocks$get(@C("struct statvfs") MemorySegment seg) {
            return (int)fuse_h_constants_1.statvfs$f_blocks$VH().get(seg);
        }
        public static  @C("fsblkcnt_t") int f_blocks$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.statvfs$f_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_blocks$set(@C("struct statvfs") MemorySegment seg, @C("fsblkcnt_t") int x) {
            fuse_h_constants_1.statvfs$f_blocks$VH().set(seg, x);
        }
        public static void f_blocks$set(@C("struct statvfs") MemorySegment seg, long index, @C("fsblkcnt_t") int x) {
            fuse_h_constants_1.statvfs$f_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_bfree$VH() {
            return fuse_h_constants_1.statvfs$f_bfree$VH();
        }
        public static  @C("fsblkcnt_t") int f_bfree$get(@C("struct statvfs") MemorySegment seg) {
            return (int)fuse_h_constants_1.statvfs$f_bfree$VH().get(seg);
        }
        public static  @C("fsblkcnt_t") int f_bfree$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.statvfs$f_bfree$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bfree$set(@C("struct statvfs") MemorySegment seg, @C("fsblkcnt_t") int x) {
            fuse_h_constants_1.statvfs$f_bfree$VH().set(seg, x);
        }
        public static void f_bfree$set(@C("struct statvfs") MemorySegment seg, long index, @C("fsblkcnt_t") int x) {
            fuse_h_constants_1.statvfs$f_bfree$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_bavail$VH() {
            return fuse_h_constants_2.statvfs$f_bavail$VH();
        }
        public static  @C("fsblkcnt_t") int f_bavail$get(@C("struct statvfs") MemorySegment seg) {
            return (int)fuse_h_constants_2.statvfs$f_bavail$VH().get(seg);
        }
        public static  @C("fsblkcnt_t") int f_bavail$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.statvfs$f_bavail$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bavail$set(@C("struct statvfs") MemorySegment seg, @C("fsblkcnt_t") int x) {
            fuse_h_constants_2.statvfs$f_bavail$VH().set(seg, x);
        }
        public static void f_bavail$set(@C("struct statvfs") MemorySegment seg, long index, @C("fsblkcnt_t") int x) {
            fuse_h_constants_2.statvfs$f_bavail$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_files$VH() {
            return fuse_h_constants_2.statvfs$f_files$VH();
        }
        public static  @C("fsfilcnt_t") int f_files$get(@C("struct statvfs") MemorySegment seg) {
            return (int)fuse_h_constants_2.statvfs$f_files$VH().get(seg);
        }
        public static  @C("fsfilcnt_t") int f_files$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.statvfs$f_files$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_files$set(@C("struct statvfs") MemorySegment seg, @C("fsfilcnt_t") int x) {
            fuse_h_constants_2.statvfs$f_files$VH().set(seg, x);
        }
        public static void f_files$set(@C("struct statvfs") MemorySegment seg, long index, @C("fsfilcnt_t") int x) {
            fuse_h_constants_2.statvfs$f_files$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_ffree$VH() {
            return fuse_h_constants_2.statvfs$f_ffree$VH();
        }
        public static  @C("fsfilcnt_t") int f_ffree$get(@C("struct statvfs") MemorySegment seg) {
            return (int)fuse_h_constants_2.statvfs$f_ffree$VH().get(seg);
        }
        public static  @C("fsfilcnt_t") int f_ffree$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.statvfs$f_ffree$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_ffree$set(@C("struct statvfs") MemorySegment seg, @C("fsfilcnt_t") int x) {
            fuse_h_constants_2.statvfs$f_ffree$VH().set(seg, x);
        }
        public static void f_ffree$set(@C("struct statvfs") MemorySegment seg, long index, @C("fsfilcnt_t") int x) {
            fuse_h_constants_2.statvfs$f_ffree$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_favail$VH() {
            return fuse_h_constants_2.statvfs$f_favail$VH();
        }
        public static  @C("fsfilcnt_t") int f_favail$get(@C("struct statvfs") MemorySegment seg) {
            return (int)fuse_h_constants_2.statvfs$f_favail$VH().get(seg);
        }
        public static  @C("fsfilcnt_t") int f_favail$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.statvfs$f_favail$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_favail$set(@C("struct statvfs") MemorySegment seg, @C("fsfilcnt_t") int x) {
            fuse_h_constants_2.statvfs$f_favail$VH().set(seg, x);
        }
        public static void f_favail$set(@C("struct statvfs") MemorySegment seg, long index, @C("fsfilcnt_t") int x) {
            fuse_h_constants_2.statvfs$f_favail$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_fsid$VH() {
            return fuse_h_constants_2.statvfs$f_fsid$VH();
        }
        public static  @C("unsigned long") long f_fsid$get(@C("struct statvfs") MemorySegment seg) {
            return (long)fuse_h_constants_2.statvfs$f_fsid$VH().get(seg);
        }
        public static  @C("unsigned long") long f_fsid$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.statvfs$f_fsid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_fsid$set(@C("struct statvfs") MemorySegment seg, @C("unsigned long") long x) {
            fuse_h_constants_2.statvfs$f_fsid$VH().set(seg, x);
        }
        public static void f_fsid$set(@C("struct statvfs") MemorySegment seg, long index, @C("unsigned long") long x) {
            fuse_h_constants_2.statvfs$f_fsid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_flag$VH() {
            return fuse_h_constants_2.statvfs$f_flag$VH();
        }
        public static  @C("unsigned long") long f_flag$get(@C("struct statvfs") MemorySegment seg) {
            return (long)fuse_h_constants_2.statvfs$f_flag$VH().get(seg);
        }
        public static  @C("unsigned long") long f_flag$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.statvfs$f_flag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_flag$set(@C("struct statvfs") MemorySegment seg, @C("unsigned long") long x) {
            fuse_h_constants_2.statvfs$f_flag$VH().set(seg, x);
        }
        public static void f_flag$set(@C("struct statvfs") MemorySegment seg, long index, @C("unsigned long") long x) {
            fuse_h_constants_2.statvfs$f_flag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_namemax$VH() {
            return fuse_h_constants_2.statvfs$f_namemax$VH();
        }
        public static  @C("unsigned long") long f_namemax$get(@C("struct statvfs") MemorySegment seg) {
            return (long)fuse_h_constants_2.statvfs$f_namemax$VH().get(seg);
        }
        public static  @C("unsigned long") long f_namemax$get(@C("struct statvfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.statvfs$f_namemax$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_namemax$set(@C("struct statvfs") MemorySegment seg, @C("unsigned long") long x) {
            fuse_h_constants_2.statvfs$f_namemax$VH().set(seg, x);
        }
        public static void f_namemax$set(@C("struct statvfs") MemorySegment seg, long index, @C("unsigned long") long x) {
            fuse_h_constants_2.statvfs$f_namemax$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct statvfs") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct statvfs") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct statvfs[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct statvfs[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct statvfs*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct statvfs*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct statvfs") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct iovec")public static class iovec {

        /* package-private */ iovec() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.iovec$struct$LAYOUT();
        }
        public static VarHandle iov_base$VH() {
            return fuse_h_constants_2.iovec$iov_base$VH();
        }
        public static  @C("void*") MemoryAddress iov_base$get(@C("struct iovec") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.iovec$iov_base$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress iov_base$get(@C("struct iovec") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.iovec$iov_base$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void iov_base$set(@C("struct iovec") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_2.iovec$iov_base$VH().set(seg, x);
        }
        public static void iov_base$set(@C("struct iovec") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_2.iovec$iov_base$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle iov_len$VH() {
            return fuse_h_constants_2.iovec$iov_len$VH();
        }
        public static  @C("size_t") long iov_len$get(@C("struct iovec") MemorySegment seg) {
            return (long)fuse_h_constants_2.iovec$iov_len$VH().get(seg);
        }
        public static  @C("size_t") long iov_len$get(@C("struct iovec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.iovec$iov_len$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void iov_len$set(@C("struct iovec") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_2.iovec$iov_len$VH().set(seg, x);
        }
        public static void iov_len$set(@C("struct iovec") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_2.iovec$iov_len$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct iovec") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct iovec") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct iovec[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct iovec[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct iovec*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct iovec*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct iovec") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_i386_thread_state")public static class __darwin_i386_thread_state {

        /* package-private */ __darwin_i386_thread_state() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_i386_thread_state$struct$LAYOUT();
        }
        public static VarHandle __eax$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__eax$VH();
        }
        public static  @C("unsigned int") int __eax$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__eax$VH().get(seg);
        }
        public static  @C("unsigned int") int __eax$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__eax$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __eax$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__eax$VH().set(seg, x);
        }
        public static void __eax$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__eax$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __ebx$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__ebx$VH();
        }
        public static  @C("unsigned int") int __ebx$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__ebx$VH().get(seg);
        }
        public static  @C("unsigned int") int __ebx$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__ebx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __ebx$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__ebx$VH().set(seg, x);
        }
        public static void __ebx$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__ebx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __ecx$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__ecx$VH();
        }
        public static  @C("unsigned int") int __ecx$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__ecx$VH().get(seg);
        }
        public static  @C("unsigned int") int __ecx$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__ecx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __ecx$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__ecx$VH().set(seg, x);
        }
        public static void __ecx$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__ecx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __edx$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__edx$VH();
        }
        public static  @C("unsigned int") int __edx$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__edx$VH().get(seg);
        }
        public static  @C("unsigned int") int __edx$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__edx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __edx$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__edx$VH().set(seg, x);
        }
        public static void __edx$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__edx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __edi$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__edi$VH();
        }
        public static  @C("unsigned int") int __edi$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__edi$VH().get(seg);
        }
        public static  @C("unsigned int") int __edi$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__edi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __edi$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__edi$VH().set(seg, x);
        }
        public static void __edi$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__edi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __esi$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__esi$VH();
        }
        public static  @C("unsigned int") int __esi$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__esi$VH().get(seg);
        }
        public static  @C("unsigned int") int __esi$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__esi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __esi$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__esi$VH().set(seg, x);
        }
        public static void __esi$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__esi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __ebp$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__ebp$VH();
        }
        public static  @C("unsigned int") int __ebp$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__ebp$VH().get(seg);
        }
        public static  @C("unsigned int") int __ebp$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__ebp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __ebp$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__ebp$VH().set(seg, x);
        }
        public static void __ebp$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__ebp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __esp$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__esp$VH();
        }
        public static  @C("unsigned int") int __esp$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__esp$VH().get(seg);
        }
        public static  @C("unsigned int") int __esp$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__esp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __esp$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__esp$VH().set(seg, x);
        }
        public static void __esp$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__esp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __ss$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__ss$VH();
        }
        public static  @C("unsigned int") int __ss$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__ss$VH().get(seg);
        }
        public static  @C("unsigned int") int __ss$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__ss$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __ss$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__ss$VH().set(seg, x);
        }
        public static void __ss$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__ss$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __eflags$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__eflags$VH();
        }
        public static  @C("unsigned int") int __eflags$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__eflags$VH().get(seg);
        }
        public static  @C("unsigned int") int __eflags$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__eflags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __eflags$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__eflags$VH().set(seg, x);
        }
        public static void __eflags$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__eflags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __eip$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__eip$VH();
        }
        public static  @C("unsigned int") int __eip$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__eip$VH().get(seg);
        }
        public static  @C("unsigned int") int __eip$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__eip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __eip$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__eip$VH().set(seg, x);
        }
        public static void __eip$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__eip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __cs$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__cs$VH();
        }
        public static  @C("unsigned int") int __cs$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__cs$VH().get(seg);
        }
        public static  @C("unsigned int") int __cs$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__cs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __cs$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__cs$VH().set(seg, x);
        }
        public static void __cs$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__cs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __ds$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__ds$VH();
        }
        public static  @C("unsigned int") int __ds$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__ds$VH().get(seg);
        }
        public static  @C("unsigned int") int __ds$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__ds$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __ds$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__ds$VH().set(seg, x);
        }
        public static void __ds$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__ds$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __es$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__es$VH();
        }
        public static  @C("unsigned int") int __es$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__es$VH().get(seg);
        }
        public static  @C("unsigned int") int __es$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__es$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __es$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__es$VH().set(seg, x);
        }
        public static void __es$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__es$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fs$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__fs$VH();
        }
        public static  @C("unsigned int") int __fs$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__fs$VH().get(seg);
        }
        public static  @C("unsigned int") int __fs$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__fs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fs$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__fs$VH().set(seg, x);
        }
        public static void __fs$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__fs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __gs$VH() {
            return fuse_h_constants_2.__darwin_i386_thread_state$__gs$VH();
        }
        public static  @C("unsigned int") int __gs$get(@C("struct __darwin_i386_thread_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__gs$VH().get(seg);
        }
        public static  @C("unsigned int") int __gs$get(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_thread_state$__gs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __gs$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__gs$VH().set(seg, x);
        }
        public static void __gs$set(@C("struct __darwin_i386_thread_state") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_i386_thread_state$__gs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_i386_thread_state") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_i386_thread_state") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_i386_thread_state[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_i386_thread_state[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_i386_thread_state*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_i386_thread_state*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_i386_thread_state") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_fp_control")public static class __darwin_fp_control {

        /* package-private */ __darwin_fp_control() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_fp_control$struct$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_fp_control") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_fp_control") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_fp_control[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_fp_control[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_fp_control*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_fp_control*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_fp_control") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_fp_control")public static class __darwin_fp_control_t extends __darwin_fp_control {

        /* package-private */ __darwin_fp_control_t() {}
    }

    @C("struct __darwin_fp_status")public static class __darwin_fp_status {

        /* package-private */ __darwin_fp_status() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_fp_status$struct$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_fp_status") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_fp_status") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_fp_status[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_fp_status[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_fp_status*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_fp_status*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_fp_status") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_fp_status")public static class __darwin_fp_status_t extends __darwin_fp_status {

        /* package-private */ __darwin_fp_status_t() {}
    }

    @C("struct __darwin_mmst_reg")public static class __darwin_mmst_reg {

        /* package-private */ __darwin_mmst_reg() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_mmst_reg$struct$LAYOUT();
        }
        public static MemorySegment __mmst_reg$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 10));
        }
        public static MemorySegment __mmst_rsrv$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(10, 6));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_mmst_reg") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_mmst_reg") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_mmst_reg[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_mmst_reg[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_mmst_reg*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_mmst_reg*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_mmst_reg") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_xmm_reg")public static class __darwin_xmm_reg {

        /* package-private */ __darwin_xmm_reg() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_xmm_reg$struct$LAYOUT();
        }
        public static MemorySegment __xmm_reg$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_xmm_reg") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_xmm_reg") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_xmm_reg[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_xmm_reg[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_xmm_reg*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_xmm_reg*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_xmm_reg") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_ymm_reg")public static class __darwin_ymm_reg {

        /* package-private */ __darwin_ymm_reg() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_ymm_reg$struct$LAYOUT();
        }
        public static MemorySegment __ymm_reg$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_ymm_reg") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_ymm_reg") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_ymm_reg[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_ymm_reg[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_ymm_reg*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_ymm_reg*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_ymm_reg") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_zmm_reg")public static class __darwin_zmm_reg {

        /* package-private */ __darwin_zmm_reg() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_zmm_reg$struct$LAYOUT();
        }
        public static MemorySegment __zmm_reg$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_zmm_reg") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_zmm_reg") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_zmm_reg[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_zmm_reg[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_zmm_reg*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_zmm_reg*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_zmm_reg") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_opmask_reg")public static class __darwin_opmask_reg {

        /* package-private */ __darwin_opmask_reg() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_opmask_reg$struct$LAYOUT();
        }
        public static MemorySegment __opmask_reg$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_opmask_reg") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_opmask_reg") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_opmask_reg[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_opmask_reg[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_opmask_reg*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_opmask_reg*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_opmask_reg") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_i386_float_state")public static class __darwin_i386_float_state {

        /* package-private */ __darwin_i386_float_state() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_i386_float_state$struct$LAYOUT();
        }
        public static MemorySegment __fpu_reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment __fpu_fcw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 2));
        }
        public static MemorySegment __fpu_fsw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(10, 2));
        }
        public static VarHandle __fpu_ftw$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_ftw$VH();
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_i386_float_state$__fpu_ftw$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_i386_float_state$__fpu_ftw$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ftw$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_ftw$VH().set(seg, x);
        }
        public static void __fpu_ftw$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_ftw$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv1$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv1$VH();
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv1$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv1$VH().set(seg, x);
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_fop$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_fop$VH();
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_float_state$__fpu_fop$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_float_state$__fpu_fop$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_fop$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_fop$VH().set(seg, x);
        }
        public static void __fpu_fop$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_fop$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ip$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_ip$VH();
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_float_state$__fpu_ip$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_float_state$__fpu_ip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ip$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_ip$VH().set(seg, x);
        }
        public static void __fpu_ip$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_ip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_cs$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_cs$VH();
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_float_state$__fpu_cs$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_float_state$__fpu_cs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_cs$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_cs$VH().set(seg, x);
        }
        public static void __fpu_cs$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_cs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv2$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv2$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv2$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv2$VH().set(seg, x);
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_dp$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_dp$VH();
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_float_state$__fpu_dp$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_float_state$__fpu_dp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_dp$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_dp$VH().set(seg, x);
        }
        public static void __fpu_dp$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_dp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ds$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_ds$VH();
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_float_state$__fpu_ds$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_float_state$__fpu_ds$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ds$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_ds$VH().set(seg, x);
        }
        public static void __fpu_ds$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_ds$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv3$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv3$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv3$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv3$VH().set(seg, x);
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_rsrv3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsr$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_mxcsr$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_float_state$__fpu_mxcsr$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_float_state$__fpu_mxcsr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_mxcsr$VH().set(seg, x);
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_mxcsr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsrmask$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_mxcsrmask$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_float_state$__fpu_mxcsrmask$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_float_state$__fpu_mxcsrmask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_mxcsrmask$VH().set(seg, x);
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_mxcsrmask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __fpu_stmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static MemorySegment __fpu_stmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));
        }
        public static MemorySegment __fpu_stmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment __fpu_stmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 16));
        }
        public static MemorySegment __fpu_stmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(104, 16));
        }
        public static MemorySegment __fpu_stmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(120, 16));
        }
        public static MemorySegment __fpu_stmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 16));
        }
        public static MemorySegment __fpu_stmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(152, 16));
        }
        public static MemorySegment __fpu_xmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(168, 16));
        }
        public static MemorySegment __fpu_xmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 16));
        }
        public static MemorySegment __fpu_xmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(200, 16));
        }
        public static MemorySegment __fpu_xmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(216, 16));
        }
        public static MemorySegment __fpu_xmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(232, 16));
        }
        public static MemorySegment __fpu_xmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(248, 16));
        }
        public static MemorySegment __fpu_xmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(264, 16));
        }
        public static MemorySegment __fpu_xmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(280, 16));
        }
        public static MemorySegment __fpu_rsrv4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(296, 224));
        }
        public static VarHandle __fpu_reserved1$VH() {
            return fuse_h_constants_2.__darwin_i386_float_state$__fpu_reserved1$VH();
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_i386_float_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_float_state$__fpu_reserved1$VH().get(seg);
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_i386_float_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_float_state$__fpu_reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_i386_float_state") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_reserved1$VH().set(seg, x);
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_i386_float_state") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__darwin_i386_float_state$__fpu_reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_i386_float_state") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_i386_float_state") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_i386_float_state[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_i386_float_state[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_i386_float_state*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_i386_float_state*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_i386_float_state") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_i386_avx_state")public static class __darwin_i386_avx_state {

        /* package-private */ __darwin_i386_avx_state() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_i386_avx_state$struct$LAYOUT();
        }
        public static MemorySegment __fpu_reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment __fpu_fcw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 2));
        }
        public static MemorySegment __fpu_fsw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(10, 2));
        }
        public static VarHandle __fpu_ftw$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ftw$VH();
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ftw$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ftw$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ftw$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ftw$VH().set(seg, x);
        }
        public static void __fpu_ftw$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ftw$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv1$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv1$VH();
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv1$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv1$VH().set(seg, x);
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_fop$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_fop$VH();
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_fop$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_fop$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_fop$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_fop$VH().set(seg, x);
        }
        public static void __fpu_fop$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_fop$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ip$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ip$VH();
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ip$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ip$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ip$VH().set(seg, x);
        }
        public static void __fpu_ip$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_cs$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_cs$VH();
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_cs$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_cs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_cs$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_cs$VH().set(seg, x);
        }
        public static void __fpu_cs$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_cs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv2$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv2$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv2$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv2$VH().set(seg, x);
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_dp$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_dp$VH();
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_dp$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_dp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_dp$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_dp$VH().set(seg, x);
        }
        public static void __fpu_dp$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_dp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ds$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ds$VH();
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ds$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ds$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ds$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ds$VH().set(seg, x);
        }
        public static void __fpu_ds$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_ds$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv3$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv3$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv3$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv3$VH().set(seg, x);
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_rsrv3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsr$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_mxcsr$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_mxcsr$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_mxcsr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_mxcsr$VH().set(seg, x);
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_mxcsr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsrmask$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_mxcsrmask$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_mxcsrmask$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_mxcsrmask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_mxcsrmask$VH().set(seg, x);
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_mxcsrmask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __fpu_stmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static MemorySegment __fpu_stmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));
        }
        public static MemorySegment __fpu_stmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment __fpu_stmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 16));
        }
        public static MemorySegment __fpu_stmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(104, 16));
        }
        public static MemorySegment __fpu_stmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(120, 16));
        }
        public static MemorySegment __fpu_stmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 16));
        }
        public static MemorySegment __fpu_stmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(152, 16));
        }
        public static MemorySegment __fpu_xmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(168, 16));
        }
        public static MemorySegment __fpu_xmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 16));
        }
        public static MemorySegment __fpu_xmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(200, 16));
        }
        public static MemorySegment __fpu_xmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(216, 16));
        }
        public static MemorySegment __fpu_xmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(232, 16));
        }
        public static MemorySegment __fpu_xmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(248, 16));
        }
        public static MemorySegment __fpu_xmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(264, 16));
        }
        public static MemorySegment __fpu_xmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(280, 16));
        }
        public static MemorySegment __fpu_rsrv4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(296, 224));
        }
        public static VarHandle __fpu_reserved1$VH() {
            return fuse_h_constants_2.__darwin_i386_avx_state$__fpu_reserved1$VH();
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_i386_avx_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_reserved1$VH().get(seg);
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_avx_state$__fpu_reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_reserved1$VH().set(seg, x);
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_i386_avx_state") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__darwin_i386_avx_state$__fpu_reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __avx_reserved1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(524, 64));
        }
        public static MemorySegment __fpu_ymmh0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(588, 16));
        }
        public static MemorySegment __fpu_ymmh1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(604, 16));
        }
        public static MemorySegment __fpu_ymmh2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(620, 16));
        }
        public static MemorySegment __fpu_ymmh3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(636, 16));
        }
        public static MemorySegment __fpu_ymmh4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(652, 16));
        }
        public static MemorySegment __fpu_ymmh5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(668, 16));
        }
        public static MemorySegment __fpu_ymmh6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(684, 16));
        }
        public static MemorySegment __fpu_ymmh7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(700, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_i386_avx_state") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_i386_avx_state") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_i386_avx_state[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_i386_avx_state[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_i386_avx_state*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_i386_avx_state*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_i386_avx_state") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_i386_avx512_state")public static class __darwin_i386_avx512_state {

        /* package-private */ __darwin_i386_avx512_state() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$struct$LAYOUT();
        }
        public static MemorySegment __fpu_reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment __fpu_fcw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 2));
        }
        public static MemorySegment __fpu_fsw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(10, 2));
        }
        public static VarHandle __fpu_ftw$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ftw$VH();
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ftw$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ftw$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ftw$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ftw$VH().set(seg, x);
        }
        public static void __fpu_ftw$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ftw$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv1$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv1$VH();
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv1$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv1$VH().set(seg, x);
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_fop$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_fop$VH();
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_fop$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_fop$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_fop$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_fop$VH().set(seg, x);
        }
        public static void __fpu_fop$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_fop$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ip$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ip$VH();
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ip$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ip$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ip$VH().set(seg, x);
        }
        public static void __fpu_ip$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_cs$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_cs$VH();
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_cs$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_cs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_cs$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_cs$VH().set(seg, x);
        }
        public static void __fpu_cs$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_cs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv2$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv2$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv2$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv2$VH().set(seg, x);
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_dp$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_dp$VH();
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_dp$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_dp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_dp$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_dp$VH().set(seg, x);
        }
        public static void __fpu_dp$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_dp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ds$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ds$VH();
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ds$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ds$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ds$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ds$VH().set(seg, x);
        }
        public static void __fpu_ds$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_ds$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv3$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv3$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv3$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv3$VH().set(seg, x);
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_rsrv3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsr$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_mxcsr$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_mxcsr$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_mxcsr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_mxcsr$VH().set(seg, x);
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_mxcsr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsrmask$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_mxcsrmask$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_mxcsrmask$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_mxcsrmask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_mxcsrmask$VH().set(seg, x);
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_mxcsrmask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __fpu_stmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static MemorySegment __fpu_stmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));
        }
        public static MemorySegment __fpu_stmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment __fpu_stmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 16));
        }
        public static MemorySegment __fpu_stmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(104, 16));
        }
        public static MemorySegment __fpu_stmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(120, 16));
        }
        public static MemorySegment __fpu_stmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 16));
        }
        public static MemorySegment __fpu_stmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(152, 16));
        }
        public static MemorySegment __fpu_xmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(168, 16));
        }
        public static MemorySegment __fpu_xmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 16));
        }
        public static MemorySegment __fpu_xmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(200, 16));
        }
        public static MemorySegment __fpu_xmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(216, 16));
        }
        public static MemorySegment __fpu_xmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(232, 16));
        }
        public static MemorySegment __fpu_xmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(248, 16));
        }
        public static MemorySegment __fpu_xmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(264, 16));
        }
        public static MemorySegment __fpu_xmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(280, 16));
        }
        public static MemorySegment __fpu_rsrv4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(296, 224));
        }
        public static VarHandle __fpu_reserved1$VH() {
            return fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_reserved1$VH();
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_reserved1$VH().get(seg);
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_reserved1$VH().set(seg, x);
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_i386_avx512_state") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__darwin_i386_avx512_state$__fpu_reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __avx_reserved1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(524, 64));
        }
        public static MemorySegment __fpu_ymmh0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(588, 16));
        }
        public static MemorySegment __fpu_ymmh1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(604, 16));
        }
        public static MemorySegment __fpu_ymmh2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(620, 16));
        }
        public static MemorySegment __fpu_ymmh3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(636, 16));
        }
        public static MemorySegment __fpu_ymmh4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(652, 16));
        }
        public static MemorySegment __fpu_ymmh5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(668, 16));
        }
        public static MemorySegment __fpu_ymmh6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(684, 16));
        }
        public static MemorySegment __fpu_ymmh7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(700, 16));
        }
        public static MemorySegment __fpu_k0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(716, 8));
        }
        public static MemorySegment __fpu_k1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(724, 8));
        }
        public static MemorySegment __fpu_k2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(732, 8));
        }
        public static MemorySegment __fpu_k3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(740, 8));
        }
        public static MemorySegment __fpu_k4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(748, 8));
        }
        public static MemorySegment __fpu_k5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(756, 8));
        }
        public static MemorySegment __fpu_k6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(764, 8));
        }
        public static MemorySegment __fpu_k7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(772, 8));
        }
        public static MemorySegment __fpu_zmmh0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(780, 32));
        }
        public static MemorySegment __fpu_zmmh1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(812, 32));
        }
        public static MemorySegment __fpu_zmmh2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(844, 32));
        }
        public static MemorySegment __fpu_zmmh3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(876, 32));
        }
        public static MemorySegment __fpu_zmmh4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(908, 32));
        }
        public static MemorySegment __fpu_zmmh5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(940, 32));
        }
        public static MemorySegment __fpu_zmmh6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(972, 32));
        }
        public static MemorySegment __fpu_zmmh7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1004, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_i386_avx512_state") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_i386_avx512_state") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_i386_avx512_state[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_i386_avx512_state[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_i386_avx512_state*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_i386_avx512_state*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_i386_avx512_state") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_i386_exception_state")public static class __darwin_i386_exception_state {

        /* package-private */ __darwin_i386_exception_state() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_i386_exception_state$struct$LAYOUT();
        }
        public static VarHandle __trapno$VH() {
            return fuse_h_constants_2.__darwin_i386_exception_state$__trapno$VH();
        }
        public static  @C("__uint16_t") short __trapno$get(@C("struct __darwin_i386_exception_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_exception_state$__trapno$VH().get(seg);
        }
        public static  @C("__uint16_t") short __trapno$get(@C("struct __darwin_i386_exception_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_exception_state$__trapno$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __trapno$set(@C("struct __darwin_i386_exception_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_exception_state$__trapno$VH().set(seg, x);
        }
        public static void __trapno$set(@C("struct __darwin_i386_exception_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_exception_state$__trapno$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __cpu$VH() {
            return fuse_h_constants_2.__darwin_i386_exception_state$__cpu$VH();
        }
        public static  @C("__uint16_t") short __cpu$get(@C("struct __darwin_i386_exception_state") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_i386_exception_state$__cpu$VH().get(seg);
        }
        public static  @C("__uint16_t") short __cpu$get(@C("struct __darwin_i386_exception_state") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_i386_exception_state$__cpu$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __cpu$set(@C("struct __darwin_i386_exception_state") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_exception_state$__cpu$VH().set(seg, x);
        }
        public static void __cpu$set(@C("struct __darwin_i386_exception_state") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_i386_exception_state$__cpu$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __err$VH() {
            return fuse_h_constants_2.__darwin_i386_exception_state$__err$VH();
        }
        public static  @C("__uint32_t") int __err$get(@C("struct __darwin_i386_exception_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_exception_state$__err$VH().get(seg);
        }
        public static  @C("__uint32_t") int __err$get(@C("struct __darwin_i386_exception_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_exception_state$__err$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __err$set(@C("struct __darwin_i386_exception_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_exception_state$__err$VH().set(seg, x);
        }
        public static void __err$set(@C("struct __darwin_i386_exception_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_exception_state$__err$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __faultvaddr$VH() {
            return fuse_h_constants_2.__darwin_i386_exception_state$__faultvaddr$VH();
        }
        public static  @C("__uint32_t") int __faultvaddr$get(@C("struct __darwin_i386_exception_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_i386_exception_state$__faultvaddr$VH().get(seg);
        }
        public static  @C("__uint32_t") int __faultvaddr$get(@C("struct __darwin_i386_exception_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_i386_exception_state$__faultvaddr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __faultvaddr$set(@C("struct __darwin_i386_exception_state") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_exception_state$__faultvaddr$VH().set(seg, x);
        }
        public static void __faultvaddr$set(@C("struct __darwin_i386_exception_state") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_i386_exception_state$__faultvaddr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_i386_exception_state") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_i386_exception_state") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_i386_exception_state[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_i386_exception_state[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_i386_exception_state*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_i386_exception_state*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_i386_exception_state") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_x86_debug_state32")public static class __darwin_x86_debug_state32 {

        /* package-private */ __darwin_x86_debug_state32() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_x86_debug_state32$struct$LAYOUT();
        }
        public static VarHandle __dr0$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state32$__dr0$VH();
        }
        public static  @C("unsigned int") int __dr0$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr0$VH().get(seg);
        }
        public static  @C("unsigned int") int __dr0$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr0$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr0$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr0$VH().set(seg, x);
        }
        public static void __dr0$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr0$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr1$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state32$__dr1$VH();
        }
        public static  @C("unsigned int") int __dr1$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr1$VH().get(seg);
        }
        public static  @C("unsigned int") int __dr1$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr1$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr1$VH().set(seg, x);
        }
        public static void __dr1$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr2$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state32$__dr2$VH();
        }
        public static  @C("unsigned int") int __dr2$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr2$VH().get(seg);
        }
        public static  @C("unsigned int") int __dr2$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr2$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr2$VH().set(seg, x);
        }
        public static void __dr2$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr3$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state32$__dr3$VH();
        }
        public static  @C("unsigned int") int __dr3$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr3$VH().get(seg);
        }
        public static  @C("unsigned int") int __dr3$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr3$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr3$VH().set(seg, x);
        }
        public static void __dr3$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr4$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state32$__dr4$VH();
        }
        public static  @C("unsigned int") int __dr4$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr4$VH().get(seg);
        }
        public static  @C("unsigned int") int __dr4$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr4$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr4$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr4$VH().set(seg, x);
        }
        public static void __dr4$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr4$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr5$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state32$__dr5$VH();
        }
        public static  @C("unsigned int") int __dr5$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr5$VH().get(seg);
        }
        public static  @C("unsigned int") int __dr5$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr5$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr5$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr5$VH().set(seg, x);
        }
        public static void __dr5$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr5$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr6$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state32$__dr6$VH();
        }
        public static  @C("unsigned int") int __dr6$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr6$VH().get(seg);
        }
        public static  @C("unsigned int") int __dr6$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr6$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr6$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr6$VH().set(seg, x);
        }
        public static void __dr6$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr6$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr7$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state32$__dr7$VH();
        }
        public static  @C("unsigned int") int __dr7$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr7$VH().get(seg);
        }
        public static  @C("unsigned int") int __dr7$get(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_debug_state32$__dr7$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr7$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr7$VH().set(seg, x);
        }
        public static void __dr7$set(@C("struct __darwin_x86_debug_state32") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_2.__darwin_x86_debug_state32$__dr7$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_x86_debug_state32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_x86_debug_state32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_x86_debug_state32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_x86_debug_state32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_x86_debug_state32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_x86_debug_state32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_x86_debug_state32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __x86_instruction_state")public static class __x86_instruction_state {

        /* package-private */ __x86_instruction_state() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__x86_instruction_state$struct$LAYOUT();
        }
        public static VarHandle __insn_stream_valid_bytes$VH() {
            return fuse_h_constants_2.__x86_instruction_state$__insn_stream_valid_bytes$VH();
        }
        public static  @C("int") int __insn_stream_valid_bytes$get(@C("struct __x86_instruction_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__x86_instruction_state$__insn_stream_valid_bytes$VH().get(seg);
        }
        public static  @C("int") int __insn_stream_valid_bytes$get(@C("struct __x86_instruction_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__x86_instruction_state$__insn_stream_valid_bytes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __insn_stream_valid_bytes$set(@C("struct __x86_instruction_state") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__x86_instruction_state$__insn_stream_valid_bytes$VH().set(seg, x);
        }
        public static void __insn_stream_valid_bytes$set(@C("struct __x86_instruction_state") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__x86_instruction_state$__insn_stream_valid_bytes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __insn_offset$VH() {
            return fuse_h_constants_2.__x86_instruction_state$__insn_offset$VH();
        }
        public static  @C("int") int __insn_offset$get(@C("struct __x86_instruction_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__x86_instruction_state$__insn_offset$VH().get(seg);
        }
        public static  @C("int") int __insn_offset$get(@C("struct __x86_instruction_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__x86_instruction_state$__insn_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __insn_offset$set(@C("struct __x86_instruction_state") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__x86_instruction_state$__insn_offset$VH().set(seg, x);
        }
        public static void __insn_offset$set(@C("struct __x86_instruction_state") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__x86_instruction_state$__insn_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __out_of_synch$VH() {
            return fuse_h_constants_2.__x86_instruction_state$__out_of_synch$VH();
        }
        public static  @C("int") int __out_of_synch$get(@C("struct __x86_instruction_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__x86_instruction_state$__out_of_synch$VH().get(seg);
        }
        public static  @C("int") int __out_of_synch$get(@C("struct __x86_instruction_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__x86_instruction_state$__out_of_synch$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __out_of_synch$set(@C("struct __x86_instruction_state") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__x86_instruction_state$__out_of_synch$VH().set(seg, x);
        }
        public static void __out_of_synch$set(@C("struct __x86_instruction_state") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__x86_instruction_state$__out_of_synch$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __insn_bytes$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 2380));
        }
        public static MemorySegment __insn_cacheline$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2392, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __x86_instruction_state") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __x86_instruction_state") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __x86_instruction_state[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __x86_instruction_state[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __x86_instruction_state*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __x86_instruction_state*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __x86_instruction_state") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __last_branch_record")public static class __last_branch_record {

        /* package-private */ __last_branch_record() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__last_branch_record$struct$LAYOUT();
        }
        public static VarHandle __from_ip$VH() {
            return fuse_h_constants_2.__last_branch_record$__from_ip$VH();
        }
        public static  @C("__uint64_t") long __from_ip$get(@C("struct __last_branch_record") MemorySegment seg) {
            return (long)fuse_h_constants_2.__last_branch_record$__from_ip$VH().get(seg);
        }
        public static  @C("__uint64_t") long __from_ip$get(@C("struct __last_branch_record") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__last_branch_record$__from_ip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __from_ip$set(@C("struct __last_branch_record") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__last_branch_record$__from_ip$VH().set(seg, x);
        }
        public static void __from_ip$set(@C("struct __last_branch_record") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__last_branch_record$__from_ip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __to_ip$VH() {
            return fuse_h_constants_2.__last_branch_record$__to_ip$VH();
        }
        public static  @C("__uint64_t") long __to_ip$get(@C("struct __last_branch_record") MemorySegment seg) {
            return (long)fuse_h_constants_2.__last_branch_record$__to_ip$VH().get(seg);
        }
        public static  @C("__uint64_t") long __to_ip$get(@C("struct __last_branch_record") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__last_branch_record$__to_ip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __to_ip$set(@C("struct __last_branch_record") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__last_branch_record$__to_ip$VH().set(seg, x);
        }
        public static void __to_ip$set(@C("struct __last_branch_record") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__last_branch_record$__to_ip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __last_branch_record") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __last_branch_record") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __last_branch_record[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __last_branch_record[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __last_branch_record*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __last_branch_record*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __last_branch_record") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __last_branch_state")public static class __last_branch_state {

        /* package-private */ __last_branch_state() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__last_branch_state$struct$LAYOUT();
        }
        public static VarHandle __lbr_count$VH() {
            return fuse_h_constants_2.__last_branch_state$__lbr_count$VH();
        }
        public static  @C("int") int __lbr_count$get(@C("struct __last_branch_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__last_branch_state$__lbr_count$VH().get(seg);
        }
        public static  @C("int") int __lbr_count$get(@C("struct __last_branch_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__last_branch_state$__lbr_count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __lbr_count$set(@C("struct __last_branch_state") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__last_branch_state$__lbr_count$VH().set(seg, x);
        }
        public static void __lbr_count$set(@C("struct __last_branch_state") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__last_branch_state$__lbr_count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __lbrs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 768));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __last_branch_state") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __last_branch_state") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __last_branch_state[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __last_branch_state[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __last_branch_state*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __last_branch_state*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __last_branch_state") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __x86_pagein_state")public static class __x86_pagein_state {

        /* package-private */ __x86_pagein_state() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__x86_pagein_state$struct$LAYOUT();
        }
        public static VarHandle __pagein_error$VH() {
            return fuse_h_constants_2.__x86_pagein_state$__pagein_error$VH();
        }
        public static  @C("int") int __pagein_error$get(@C("struct __x86_pagein_state") MemorySegment seg) {
            return (int)fuse_h_constants_2.__x86_pagein_state$__pagein_error$VH().get(seg);
        }
        public static  @C("int") int __pagein_error$get(@C("struct __x86_pagein_state") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__x86_pagein_state$__pagein_error$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __pagein_error$set(@C("struct __x86_pagein_state") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__x86_pagein_state$__pagein_error$VH().set(seg, x);
        }
        public static void __pagein_error$set(@C("struct __x86_pagein_state") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__x86_pagein_state$__pagein_error$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __x86_pagein_state") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __x86_pagein_state") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __x86_pagein_state[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __x86_pagein_state[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __x86_pagein_state*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __x86_pagein_state*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __x86_pagein_state") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_x86_thread_state64")public static class __darwin_x86_thread_state64 {

        /* package-private */ __darwin_x86_thread_state64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$struct$LAYOUT();
        }
        public static VarHandle __rax$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__rax$VH();
        }
        public static  @C("__uint64_t") long __rax$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rax$VH().get(seg);
        }
        public static  @C("__uint64_t") long __rax$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rax$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __rax$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rax$VH().set(seg, x);
        }
        public static void __rax$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rax$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __rbx$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__rbx$VH();
        }
        public static  @C("__uint64_t") long __rbx$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rbx$VH().get(seg);
        }
        public static  @C("__uint64_t") long __rbx$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rbx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __rbx$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rbx$VH().set(seg, x);
        }
        public static void __rbx$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rbx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __rcx$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__rcx$VH();
        }
        public static  @C("__uint64_t") long __rcx$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rcx$VH().get(seg);
        }
        public static  @C("__uint64_t") long __rcx$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rcx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __rcx$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rcx$VH().set(seg, x);
        }
        public static void __rcx$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rcx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __rdx$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__rdx$VH();
        }
        public static  @C("__uint64_t") long __rdx$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rdx$VH().get(seg);
        }
        public static  @C("__uint64_t") long __rdx$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rdx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __rdx$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rdx$VH().set(seg, x);
        }
        public static void __rdx$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rdx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __rdi$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__rdi$VH();
        }
        public static  @C("__uint64_t") long __rdi$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rdi$VH().get(seg);
        }
        public static  @C("__uint64_t") long __rdi$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rdi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __rdi$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rdi$VH().set(seg, x);
        }
        public static void __rdi$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rdi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __rsi$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__rsi$VH();
        }
        public static  @C("__uint64_t") long __rsi$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rsi$VH().get(seg);
        }
        public static  @C("__uint64_t") long __rsi$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rsi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __rsi$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rsi$VH().set(seg, x);
        }
        public static void __rsi$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rsi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __rbp$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__rbp$VH();
        }
        public static  @C("__uint64_t") long __rbp$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rbp$VH().get(seg);
        }
        public static  @C("__uint64_t") long __rbp$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rbp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __rbp$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rbp$VH().set(seg, x);
        }
        public static void __rbp$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rbp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __rsp$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__rsp$VH();
        }
        public static  @C("__uint64_t") long __rsp$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rsp$VH().get(seg);
        }
        public static  @C("__uint64_t") long __rsp$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rsp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __rsp$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rsp$VH().set(seg, x);
        }
        public static void __rsp$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rsp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __r8$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__r8$VH();
        }
        public static  @C("__uint64_t") long __r8$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r8$VH().get(seg);
        }
        public static  @C("__uint64_t") long __r8$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r8$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __r8$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r8$VH().set(seg, x);
        }
        public static void __r8$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r8$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __r9$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__r9$VH();
        }
        public static  @C("__uint64_t") long __r9$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r9$VH().get(seg);
        }
        public static  @C("__uint64_t") long __r9$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r9$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __r9$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r9$VH().set(seg, x);
        }
        public static void __r9$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r9$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __r10$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__r10$VH();
        }
        public static  @C("__uint64_t") long __r10$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r10$VH().get(seg);
        }
        public static  @C("__uint64_t") long __r10$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r10$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __r10$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r10$VH().set(seg, x);
        }
        public static void __r10$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r10$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __r11$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__r11$VH();
        }
        public static  @C("__uint64_t") long __r11$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r11$VH().get(seg);
        }
        public static  @C("__uint64_t") long __r11$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r11$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __r11$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r11$VH().set(seg, x);
        }
        public static void __r11$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r11$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __r12$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__r12$VH();
        }
        public static  @C("__uint64_t") long __r12$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r12$VH().get(seg);
        }
        public static  @C("__uint64_t") long __r12$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r12$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __r12$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r12$VH().set(seg, x);
        }
        public static void __r12$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r12$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __r13$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__r13$VH();
        }
        public static  @C("__uint64_t") long __r13$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r13$VH().get(seg);
        }
        public static  @C("__uint64_t") long __r13$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r13$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __r13$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r13$VH().set(seg, x);
        }
        public static void __r13$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r13$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __r14$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__r14$VH();
        }
        public static  @C("__uint64_t") long __r14$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r14$VH().get(seg);
        }
        public static  @C("__uint64_t") long __r14$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r14$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __r14$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r14$VH().set(seg, x);
        }
        public static void __r14$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r14$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __r15$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__r15$VH();
        }
        public static  @C("__uint64_t") long __r15$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r15$VH().get(seg);
        }
        public static  @C("__uint64_t") long __r15$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__r15$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __r15$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r15$VH().set(seg, x);
        }
        public static void __r15$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__r15$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __rip$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__rip$VH();
        }
        public static  @C("__uint64_t") long __rip$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rip$VH().get(seg);
        }
        public static  @C("__uint64_t") long __rip$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __rip$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rip$VH().set(seg, x);
        }
        public static void __rip$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __rflags$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__rflags$VH();
        }
        public static  @C("__uint64_t") long __rflags$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rflags$VH().get(seg);
        }
        public static  @C("__uint64_t") long __rflags$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__rflags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __rflags$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rflags$VH().set(seg, x);
        }
        public static void __rflags$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__rflags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __cs$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__cs$VH();
        }
        public static  @C("__uint64_t") long __cs$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__cs$VH().get(seg);
        }
        public static  @C("__uint64_t") long __cs$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__cs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __cs$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__cs$VH().set(seg, x);
        }
        public static void __cs$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__cs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fs$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__fs$VH();
        }
        public static  @C("__uint64_t") long __fs$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__fs$VH().get(seg);
        }
        public static  @C("__uint64_t") long __fs$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__fs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fs$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__fs$VH().set(seg, x);
        }
        public static void __fs$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__fs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __gs$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_state64$__gs$VH();
        }
        public static  @C("__uint64_t") long __gs$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__gs$VH().get(seg);
        }
        public static  @C("__uint64_t") long __gs$get(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_state64$__gs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __gs$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__gs$VH().set(seg, x);
        }
        public static void __gs$set(@C("struct __darwin_x86_thread_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_state64$__gs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_x86_thread_state64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_x86_thread_state64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_x86_thread_state64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_x86_thread_state64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_x86_thread_state64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_x86_thread_state64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_x86_thread_state64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_x86_thread_full_state64")public static class __darwin_x86_thread_full_state64 {

        /* package-private */ __darwin_x86_thread_full_state64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_x86_thread_full_state64$struct$LAYOUT();
        }
        public static MemorySegment __ss64$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 168));
        }
        public static VarHandle __ds$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_full_state64$__ds$VH();
        }
        public static  @C("__uint64_t") long __ds$get(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_full_state64$__ds$VH().get(seg);
        }
        public static  @C("__uint64_t") long __ds$get(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_full_state64$__ds$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __ds$set(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_full_state64$__ds$VH().set(seg, x);
        }
        public static void __ds$set(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_full_state64$__ds$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __es$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_full_state64$__es$VH();
        }
        public static  @C("__uint64_t") long __es$get(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_full_state64$__es$VH().get(seg);
        }
        public static  @C("__uint64_t") long __es$get(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_full_state64$__es$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __es$set(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_full_state64$__es$VH().set(seg, x);
        }
        public static void __es$set(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_full_state64$__es$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __ss$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_full_state64$__ss$VH();
        }
        public static  @C("__uint64_t") long __ss$get(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_full_state64$__ss$VH().get(seg);
        }
        public static  @C("__uint64_t") long __ss$get(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_full_state64$__ss$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __ss$set(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_full_state64$__ss$VH().set(seg, x);
        }
        public static void __ss$set(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_full_state64$__ss$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __gsbase$VH() {
            return fuse_h_constants_2.__darwin_x86_thread_full_state64$__gsbase$VH();
        }
        public static  @C("__uint64_t") long __gsbase$get(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_full_state64$__gsbase$VH().get(seg);
        }
        public static  @C("__uint64_t") long __gsbase$get(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_thread_full_state64$__gsbase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __gsbase$set(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_full_state64$__gsbase$VH().set(seg, x);
        }
        public static void __gsbase$set(@C("struct __darwin_x86_thread_full_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_thread_full_state64$__gsbase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_x86_thread_full_state64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_x86_thread_full_state64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_x86_thread_full_state64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_x86_thread_full_state64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_x86_thread_full_state64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_x86_thread_full_state64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_x86_thread_full_state64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_x86_float_state64")public static class __darwin_x86_float_state64 {

        /* package-private */ __darwin_x86_float_state64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_x86_float_state64$struct$LAYOUT();
        }
        public static MemorySegment __fpu_reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment __fpu_fcw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 2));
        }
        public static MemorySegment __fpu_fsw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(10, 2));
        }
        public static VarHandle __fpu_ftw$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ftw$VH();
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ftw$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ftw$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ftw$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ftw$VH().set(seg, x);
        }
        public static void __fpu_ftw$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ftw$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv1$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv1$VH();
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv1$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv1$VH().set(seg, x);
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_fop$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_fop$VH();
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_fop$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_fop$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_fop$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_fop$VH().set(seg, x);
        }
        public static void __fpu_fop$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_fop$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ip$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ip$VH();
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ip$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ip$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ip$VH().set(seg, x);
        }
        public static void __fpu_ip$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_cs$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_cs$VH();
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_cs$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_cs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_cs$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_cs$VH().set(seg, x);
        }
        public static void __fpu_cs$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_cs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv2$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv2$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv2$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv2$VH().set(seg, x);
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_dp$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_dp$VH();
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_dp$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_dp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_dp$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_dp$VH().set(seg, x);
        }
        public static void __fpu_dp$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_dp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ds$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ds$VH();
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ds$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ds$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ds$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ds$VH().set(seg, x);
        }
        public static void __fpu_ds$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_ds$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv3$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv3$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv3$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv3$VH().set(seg, x);
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_rsrv3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsr$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_mxcsr$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_mxcsr$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_mxcsr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_mxcsr$VH().set(seg, x);
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_mxcsr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsrmask$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_mxcsrmask$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_mxcsrmask$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_mxcsrmask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_mxcsrmask$VH().set(seg, x);
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_mxcsrmask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __fpu_stmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static MemorySegment __fpu_stmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));
        }
        public static MemorySegment __fpu_stmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment __fpu_stmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 16));
        }
        public static MemorySegment __fpu_stmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(104, 16));
        }
        public static MemorySegment __fpu_stmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(120, 16));
        }
        public static MemorySegment __fpu_stmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 16));
        }
        public static MemorySegment __fpu_stmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(152, 16));
        }
        public static MemorySegment __fpu_xmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(168, 16));
        }
        public static MemorySegment __fpu_xmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 16));
        }
        public static MemorySegment __fpu_xmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(200, 16));
        }
        public static MemorySegment __fpu_xmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(216, 16));
        }
        public static MemorySegment __fpu_xmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(232, 16));
        }
        public static MemorySegment __fpu_xmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(248, 16));
        }
        public static MemorySegment __fpu_xmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(264, 16));
        }
        public static MemorySegment __fpu_xmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(280, 16));
        }
        public static MemorySegment __fpu_xmm8$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(296, 16));
        }
        public static MemorySegment __fpu_xmm9$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(312, 16));
        }
        public static MemorySegment __fpu_xmm10$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(328, 16));
        }
        public static MemorySegment __fpu_xmm11$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(344, 16));
        }
        public static MemorySegment __fpu_xmm12$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(360, 16));
        }
        public static MemorySegment __fpu_xmm13$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(376, 16));
        }
        public static MemorySegment __fpu_xmm14$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(392, 16));
        }
        public static MemorySegment __fpu_xmm15$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(408, 16));
        }
        public static MemorySegment __fpu_rsrv4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(424, 96));
        }
        public static VarHandle __fpu_reserved1$VH() {
            return fuse_h_constants_2.__darwin_x86_float_state64$__fpu_reserved1$VH();
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_x86_float_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_reserved1$VH().get(seg);
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_float_state64$__fpu_reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_reserved1$VH().set(seg, x);
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_x86_float_state64") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__darwin_x86_float_state64$__fpu_reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_x86_float_state64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_x86_float_state64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_x86_float_state64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_x86_float_state64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_x86_float_state64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_x86_float_state64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_x86_float_state64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_x86_avx_state64")public static class __darwin_x86_avx_state64 {

        /* package-private */ __darwin_x86_avx_state64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$struct$LAYOUT();
        }
        public static MemorySegment __fpu_reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment __fpu_fcw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 2));
        }
        public static MemorySegment __fpu_fsw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(10, 2));
        }
        public static VarHandle __fpu_ftw$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ftw$VH();
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ftw$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ftw$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ftw$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ftw$VH().set(seg, x);
        }
        public static void __fpu_ftw$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ftw$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv1$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv1$VH();
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv1$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv1$VH().set(seg, x);
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_fop$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_fop$VH();
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_fop$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_fop$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_fop$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_fop$VH().set(seg, x);
        }
        public static void __fpu_fop$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_fop$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ip$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ip$VH();
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ip$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ip$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ip$VH().set(seg, x);
        }
        public static void __fpu_ip$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_cs$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_cs$VH();
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_cs$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_cs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_cs$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_cs$VH().set(seg, x);
        }
        public static void __fpu_cs$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_cs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv2$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv2$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv2$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv2$VH().set(seg, x);
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_dp$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_dp$VH();
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_dp$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_dp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_dp$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_dp$VH().set(seg, x);
        }
        public static void __fpu_dp$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_dp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ds$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ds$VH();
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ds$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ds$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ds$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ds$VH().set(seg, x);
        }
        public static void __fpu_ds$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_ds$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv3$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv3$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv3$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv3$VH().set(seg, x);
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_rsrv3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsr$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_mxcsr$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_mxcsr$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_mxcsr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_mxcsr$VH().set(seg, x);
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_mxcsr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsrmask$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_mxcsrmask$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_mxcsrmask$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_mxcsrmask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_mxcsrmask$VH().set(seg, x);
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_mxcsrmask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __fpu_stmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static MemorySegment __fpu_stmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));
        }
        public static MemorySegment __fpu_stmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment __fpu_stmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 16));
        }
        public static MemorySegment __fpu_stmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(104, 16));
        }
        public static MemorySegment __fpu_stmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(120, 16));
        }
        public static MemorySegment __fpu_stmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 16));
        }
        public static MemorySegment __fpu_stmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(152, 16));
        }
        public static MemorySegment __fpu_xmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(168, 16));
        }
        public static MemorySegment __fpu_xmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 16));
        }
        public static MemorySegment __fpu_xmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(200, 16));
        }
        public static MemorySegment __fpu_xmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(216, 16));
        }
        public static MemorySegment __fpu_xmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(232, 16));
        }
        public static MemorySegment __fpu_xmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(248, 16));
        }
        public static MemorySegment __fpu_xmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(264, 16));
        }
        public static MemorySegment __fpu_xmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(280, 16));
        }
        public static MemorySegment __fpu_xmm8$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(296, 16));
        }
        public static MemorySegment __fpu_xmm9$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(312, 16));
        }
        public static MemorySegment __fpu_xmm10$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(328, 16));
        }
        public static MemorySegment __fpu_xmm11$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(344, 16));
        }
        public static MemorySegment __fpu_xmm12$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(360, 16));
        }
        public static MemorySegment __fpu_xmm13$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(376, 16));
        }
        public static MemorySegment __fpu_xmm14$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(392, 16));
        }
        public static MemorySegment __fpu_xmm15$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(408, 16));
        }
        public static MemorySegment __fpu_rsrv4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(424, 96));
        }
        public static VarHandle __fpu_reserved1$VH() {
            return fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_reserved1$VH();
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_reserved1$VH().get(seg);
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_reserved1$VH().set(seg, x);
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_x86_avx_state64") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__darwin_x86_avx_state64$__fpu_reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __avx_reserved1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(524, 64));
        }
        public static MemorySegment __fpu_ymmh0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(588, 16));
        }
        public static MemorySegment __fpu_ymmh1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(604, 16));
        }
        public static MemorySegment __fpu_ymmh2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(620, 16));
        }
        public static MemorySegment __fpu_ymmh3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(636, 16));
        }
        public static MemorySegment __fpu_ymmh4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(652, 16));
        }
        public static MemorySegment __fpu_ymmh5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(668, 16));
        }
        public static MemorySegment __fpu_ymmh6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(684, 16));
        }
        public static MemorySegment __fpu_ymmh7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(700, 16));
        }
        public static MemorySegment __fpu_ymmh8$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(716, 16));
        }
        public static MemorySegment __fpu_ymmh9$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(732, 16));
        }
        public static MemorySegment __fpu_ymmh10$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(748, 16));
        }
        public static MemorySegment __fpu_ymmh11$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(764, 16));
        }
        public static MemorySegment __fpu_ymmh12$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(780, 16));
        }
        public static MemorySegment __fpu_ymmh13$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(796, 16));
        }
        public static MemorySegment __fpu_ymmh14$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(812, 16));
        }
        public static MemorySegment __fpu_ymmh15$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(828, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_x86_avx_state64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_x86_avx_state64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_x86_avx_state64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_x86_avx_state64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_x86_avx_state64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_x86_avx_state64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_x86_avx_state64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_x86_avx512_state64")public static class __darwin_x86_avx512_state64 {

        /* package-private */ __darwin_x86_avx512_state64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$struct$LAYOUT();
        }
        public static MemorySegment __fpu_reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment __fpu_fcw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 2));
        }
        public static MemorySegment __fpu_fsw$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(10, 2));
        }
        public static VarHandle __fpu_ftw$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ftw$VH();
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ftw$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_ftw$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ftw$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ftw$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ftw$VH().set(seg, x);
        }
        public static void __fpu_ftw$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ftw$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv1$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv1$VH();
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (byte)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv1$VH().get(seg);
        }
        public static  @C("__uint8_t") byte __fpu_rsrv1$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv1$VH().set(seg, x);
        }
        public static void __fpu_rsrv1$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint8_t") byte x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_fop$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_fop$VH();
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_fop$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_fop$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_fop$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_fop$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_fop$VH().set(seg, x);
        }
        public static void __fpu_fop$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_fop$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ip$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ip$VH();
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ip$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_ip$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ip$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ip$VH().set(seg, x);
        }
        public static void __fpu_ip$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_cs$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_cs$VH();
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_cs$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_cs$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_cs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_cs$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_cs$VH().set(seg, x);
        }
        public static void __fpu_cs$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_cs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv2$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv2$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv2$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv2$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv2$VH().set(seg, x);
        }
        public static void __fpu_rsrv2$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_dp$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_dp$VH();
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_dp$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_dp$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_dp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_dp$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_dp$VH().set(seg, x);
        }
        public static void __fpu_dp$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_dp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_ds$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ds$VH();
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ds$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_ds$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ds$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_ds$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ds$VH().set(seg, x);
        }
        public static void __fpu_ds$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_ds$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_rsrv3$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv3$VH();
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv3$VH().get(seg);
        }
        public static  @C("__uint16_t") short __fpu_rsrv3$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv3$VH().set(seg, x);
        }
        public static void __fpu_rsrv3$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_rsrv3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsr$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_mxcsr$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_mxcsr$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsr$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_mxcsr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_mxcsr$VH().set(seg, x);
        }
        public static void __fpu_mxcsr$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_mxcsr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __fpu_mxcsrmask$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_mxcsrmask$VH();
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_mxcsrmask$VH().get(seg);
        }
        public static  @C("__uint32_t") int __fpu_mxcsrmask$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_mxcsrmask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_mxcsrmask$VH().set(seg, x);
        }
        public static void __fpu_mxcsrmask$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_mxcsrmask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __fpu_stmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static MemorySegment __fpu_stmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));
        }
        public static MemorySegment __fpu_stmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment __fpu_stmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 16));
        }
        public static MemorySegment __fpu_stmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(104, 16));
        }
        public static MemorySegment __fpu_stmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(120, 16));
        }
        public static MemorySegment __fpu_stmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 16));
        }
        public static MemorySegment __fpu_stmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(152, 16));
        }
        public static MemorySegment __fpu_xmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(168, 16));
        }
        public static MemorySegment __fpu_xmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 16));
        }
        public static MemorySegment __fpu_xmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(200, 16));
        }
        public static MemorySegment __fpu_xmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(216, 16));
        }
        public static MemorySegment __fpu_xmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(232, 16));
        }
        public static MemorySegment __fpu_xmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(248, 16));
        }
        public static MemorySegment __fpu_xmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(264, 16));
        }
        public static MemorySegment __fpu_xmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(280, 16));
        }
        public static MemorySegment __fpu_xmm8$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(296, 16));
        }
        public static MemorySegment __fpu_xmm9$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(312, 16));
        }
        public static MemorySegment __fpu_xmm10$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(328, 16));
        }
        public static MemorySegment __fpu_xmm11$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(344, 16));
        }
        public static MemorySegment __fpu_xmm12$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(360, 16));
        }
        public static MemorySegment __fpu_xmm13$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(376, 16));
        }
        public static MemorySegment __fpu_xmm14$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(392, 16));
        }
        public static MemorySegment __fpu_xmm15$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(408, 16));
        }
        public static MemorySegment __fpu_rsrv4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(424, 96));
        }
        public static VarHandle __fpu_reserved1$VH() {
            return fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_reserved1$VH();
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_reserved1$VH().get(seg);
        }
        public static  @C("int") int __fpu_reserved1$get(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_reserved1$VH().set(seg, x);
        }
        public static void __fpu_reserved1$set(@C("struct __darwin_x86_avx512_state64") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__darwin_x86_avx512_state64$__fpu_reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __avx_reserved1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(524, 64));
        }
        public static MemorySegment __fpu_ymmh0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(588, 16));
        }
        public static MemorySegment __fpu_ymmh1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(604, 16));
        }
        public static MemorySegment __fpu_ymmh2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(620, 16));
        }
        public static MemorySegment __fpu_ymmh3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(636, 16));
        }
        public static MemorySegment __fpu_ymmh4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(652, 16));
        }
        public static MemorySegment __fpu_ymmh5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(668, 16));
        }
        public static MemorySegment __fpu_ymmh6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(684, 16));
        }
        public static MemorySegment __fpu_ymmh7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(700, 16));
        }
        public static MemorySegment __fpu_ymmh8$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(716, 16));
        }
        public static MemorySegment __fpu_ymmh9$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(732, 16));
        }
        public static MemorySegment __fpu_ymmh10$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(748, 16));
        }
        public static MemorySegment __fpu_ymmh11$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(764, 16));
        }
        public static MemorySegment __fpu_ymmh12$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(780, 16));
        }
        public static MemorySegment __fpu_ymmh13$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(796, 16));
        }
        public static MemorySegment __fpu_ymmh14$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(812, 16));
        }
        public static MemorySegment __fpu_ymmh15$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(828, 16));
        }
        public static MemorySegment __fpu_k0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(844, 8));
        }
        public static MemorySegment __fpu_k1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(852, 8));
        }
        public static MemorySegment __fpu_k2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(860, 8));
        }
        public static MemorySegment __fpu_k3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(868, 8));
        }
        public static MemorySegment __fpu_k4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(876, 8));
        }
        public static MemorySegment __fpu_k5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(884, 8));
        }
        public static MemorySegment __fpu_k6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(892, 8));
        }
        public static MemorySegment __fpu_k7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(900, 8));
        }
        public static MemorySegment __fpu_zmmh0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(908, 32));
        }
        public static MemorySegment __fpu_zmmh1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(940, 32));
        }
        public static MemorySegment __fpu_zmmh2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(972, 32));
        }
        public static MemorySegment __fpu_zmmh3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1004, 32));
        }
        public static MemorySegment __fpu_zmmh4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1036, 32));
        }
        public static MemorySegment __fpu_zmmh5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1068, 32));
        }
        public static MemorySegment __fpu_zmmh6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1100, 32));
        }
        public static MemorySegment __fpu_zmmh7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1132, 32));
        }
        public static MemorySegment __fpu_zmmh8$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1164, 32));
        }
        public static MemorySegment __fpu_zmmh9$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1196, 32));
        }
        public static MemorySegment __fpu_zmmh10$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1228, 32));
        }
        public static MemorySegment __fpu_zmmh11$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1260, 32));
        }
        public static MemorySegment __fpu_zmmh12$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1292, 32));
        }
        public static MemorySegment __fpu_zmmh13$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1324, 32));
        }
        public static MemorySegment __fpu_zmmh14$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1356, 32));
        }
        public static MemorySegment __fpu_zmmh15$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1388, 32));
        }
        public static MemorySegment __fpu_zmm16$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1420, 64));
        }
        public static MemorySegment __fpu_zmm17$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1484, 64));
        }
        public static MemorySegment __fpu_zmm18$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1548, 64));
        }
        public static MemorySegment __fpu_zmm19$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1612, 64));
        }
        public static MemorySegment __fpu_zmm20$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1676, 64));
        }
        public static MemorySegment __fpu_zmm21$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1740, 64));
        }
        public static MemorySegment __fpu_zmm22$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1804, 64));
        }
        public static MemorySegment __fpu_zmm23$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1868, 64));
        }
        public static MemorySegment __fpu_zmm24$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1932, 64));
        }
        public static MemorySegment __fpu_zmm25$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1996, 64));
        }
        public static MemorySegment __fpu_zmm26$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2060, 64));
        }
        public static MemorySegment __fpu_zmm27$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2124, 64));
        }
        public static MemorySegment __fpu_zmm28$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2188, 64));
        }
        public static MemorySegment __fpu_zmm29$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2252, 64));
        }
        public static MemorySegment __fpu_zmm30$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2316, 64));
        }
        public static MemorySegment __fpu_zmm31$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2380, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_x86_avx512_state64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_x86_avx512_state64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_x86_avx512_state64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_x86_avx512_state64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_x86_avx512_state64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_x86_avx512_state64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_x86_avx512_state64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_x86_exception_state64")public static class __darwin_x86_exception_state64 {

        /* package-private */ __darwin_x86_exception_state64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_x86_exception_state64$struct$LAYOUT();
        }
        public static VarHandle __trapno$VH() {
            return fuse_h_constants_2.__darwin_x86_exception_state64$__trapno$VH();
        }
        public static  @C("__uint16_t") short __trapno$get(@C("struct __darwin_x86_exception_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_exception_state64$__trapno$VH().get(seg);
        }
        public static  @C("__uint16_t") short __trapno$get(@C("struct __darwin_x86_exception_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_exception_state64$__trapno$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __trapno$set(@C("struct __darwin_x86_exception_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_exception_state64$__trapno$VH().set(seg, x);
        }
        public static void __trapno$set(@C("struct __darwin_x86_exception_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_exception_state64$__trapno$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __cpu$VH() {
            return fuse_h_constants_2.__darwin_x86_exception_state64$__cpu$VH();
        }
        public static  @C("__uint16_t") short __cpu$get(@C("struct __darwin_x86_exception_state64") MemorySegment seg) {
            return (short)fuse_h_constants_2.__darwin_x86_exception_state64$__cpu$VH().get(seg);
        }
        public static  @C("__uint16_t") short __cpu$get(@C("struct __darwin_x86_exception_state64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_2.__darwin_x86_exception_state64$__cpu$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __cpu$set(@C("struct __darwin_x86_exception_state64") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_exception_state64$__cpu$VH().set(seg, x);
        }
        public static void __cpu$set(@C("struct __darwin_x86_exception_state64") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_2.__darwin_x86_exception_state64$__cpu$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __err$VH() {
            return fuse_h_constants_2.__darwin_x86_exception_state64$__err$VH();
        }
        public static  @C("__uint32_t") int __err$get(@C("struct __darwin_x86_exception_state64") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_x86_exception_state64$__err$VH().get(seg);
        }
        public static  @C("__uint32_t") int __err$get(@C("struct __darwin_x86_exception_state64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_x86_exception_state64$__err$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __err$set(@C("struct __darwin_x86_exception_state64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_exception_state64$__err$VH().set(seg, x);
        }
        public static void __err$set(@C("struct __darwin_x86_exception_state64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_2.__darwin_x86_exception_state64$__err$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __faultvaddr$VH() {
            return fuse_h_constants_2.__darwin_x86_exception_state64$__faultvaddr$VH();
        }
        public static  @C("__uint64_t") long __faultvaddr$get(@C("struct __darwin_x86_exception_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_exception_state64$__faultvaddr$VH().get(seg);
        }
        public static  @C("__uint64_t") long __faultvaddr$get(@C("struct __darwin_x86_exception_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_exception_state64$__faultvaddr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __faultvaddr$set(@C("struct __darwin_x86_exception_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_exception_state64$__faultvaddr$VH().set(seg, x);
        }
        public static void __faultvaddr$set(@C("struct __darwin_x86_exception_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_exception_state64$__faultvaddr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_x86_exception_state64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_x86_exception_state64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_x86_exception_state64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_x86_exception_state64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_x86_exception_state64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_x86_exception_state64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_x86_exception_state64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_x86_debug_state64")public static class __darwin_x86_debug_state64 {

        /* package-private */ __darwin_x86_debug_state64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_x86_debug_state64$struct$LAYOUT();
        }
        public static VarHandle __dr0$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state64$__dr0$VH();
        }
        public static  @C("__uint64_t") long __dr0$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr0$VH().get(seg);
        }
        public static  @C("__uint64_t") long __dr0$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr0$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr0$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr0$VH().set(seg, x);
        }
        public static void __dr0$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr0$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr1$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state64$__dr1$VH();
        }
        public static  @C("__uint64_t") long __dr1$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr1$VH().get(seg);
        }
        public static  @C("__uint64_t") long __dr1$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr1$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr1$VH().set(seg, x);
        }
        public static void __dr1$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr2$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state64$__dr2$VH();
        }
        public static  @C("__uint64_t") long __dr2$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr2$VH().get(seg);
        }
        public static  @C("__uint64_t") long __dr2$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr2$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr2$VH().set(seg, x);
        }
        public static void __dr2$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr3$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state64$__dr3$VH();
        }
        public static  @C("__uint64_t") long __dr3$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr3$VH().get(seg);
        }
        public static  @C("__uint64_t") long __dr3$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr3$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr3$VH().set(seg, x);
        }
        public static void __dr3$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr4$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state64$__dr4$VH();
        }
        public static  @C("__uint64_t") long __dr4$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr4$VH().get(seg);
        }
        public static  @C("__uint64_t") long __dr4$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr4$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr4$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr4$VH().set(seg, x);
        }
        public static void __dr4$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr4$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr5$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state64$__dr5$VH();
        }
        public static  @C("__uint64_t") long __dr5$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr5$VH().get(seg);
        }
        public static  @C("__uint64_t") long __dr5$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr5$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr5$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr5$VH().set(seg, x);
        }
        public static void __dr5$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr5$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr6$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state64$__dr6$VH();
        }
        public static  @C("__uint64_t") long __dr6$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr6$VH().get(seg);
        }
        public static  @C("__uint64_t") long __dr6$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr6$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr6$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr6$VH().set(seg, x);
        }
        public static void __dr6$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr6$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __dr7$VH() {
            return fuse_h_constants_2.__darwin_x86_debug_state64$__dr7$VH();
        }
        public static  @C("__uint64_t") long __dr7$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr7$VH().get(seg);
        }
        public static  @C("__uint64_t") long __dr7$get(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_x86_debug_state64$__dr7$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __dr7$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr7$VH().set(seg, x);
        }
        public static void __dr7$set(@C("struct __darwin_x86_debug_state64") MemorySegment seg, long index, @C("__uint64_t") long x) {
            fuse_h_constants_2.__darwin_x86_debug_state64$__dr7$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_x86_debug_state64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_x86_debug_state64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_x86_debug_state64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_x86_debug_state64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_x86_debug_state64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_x86_debug_state64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_x86_debug_state64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_x86_cpmu_state64")public static class __darwin_x86_cpmu_state64 {

        /* package-private */ __darwin_x86_cpmu_state64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_x86_cpmu_state64$struct$LAYOUT();
        }
        public static MemorySegment __ctrs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 128));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_x86_cpmu_state64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_x86_cpmu_state64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_x86_cpmu_state64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_x86_cpmu_state64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_x86_cpmu_state64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_x86_cpmu_state64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_x86_cpmu_state64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_mcontext32")public static class __darwin_mcontext32 {

        /* package-private */ __darwin_mcontext32() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_mcontext32$struct$LAYOUT();
        }
        public static MemorySegment __es$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 12));
        }
        public static MemorySegment __ss$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 64));
        }
        public static MemorySegment __fs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(76, 524));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_mcontext32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_mcontext32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_mcontext32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_mcontext32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_mcontext32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_mcontext32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_mcontext32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_mcontext_avx32")public static class __darwin_mcontext_avx32 {

        /* package-private */ __darwin_mcontext_avx32() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_mcontext_avx32$struct$LAYOUT();
        }
        public static MemorySegment __es$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 12));
        }
        public static MemorySegment __ss$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 64));
        }
        public static MemorySegment __fs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(76, 716));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_mcontext_avx32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_mcontext_avx32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_mcontext_avx32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_mcontext_avx512_32")public static class __darwin_mcontext_avx512_32 {

        /* package-private */ __darwin_mcontext_avx512_32() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_mcontext_avx512_32$struct$LAYOUT();
        }
        public static MemorySegment __es$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 12));
        }
        public static MemorySegment __ss$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 64));
        }
        public static MemorySegment __fs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(76, 1036));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_mcontext_avx512_32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx512_32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx512_32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_mcontext_avx512_32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_mcontext_avx512_32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx512_32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx512_32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_mcontext64")public static class __darwin_mcontext64 {

        /* package-private */ __darwin_mcontext64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_mcontext64$struct$LAYOUT();
        }
        public static MemorySegment __es$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment __ss$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 168));
        }
        public static MemorySegment __fs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 524));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_mcontext64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_mcontext64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_mcontext64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_mcontext64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_mcontext64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_mcontext64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_mcontext64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_mcontext64_full")public static class __darwin_mcontext64_full {

        /* package-private */ __darwin_mcontext64_full() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_mcontext64_full$struct$LAYOUT();
        }
        public static MemorySegment __es$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment __ss$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 200));
        }
        public static MemorySegment __fs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(216, 524));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_mcontext64_full") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_mcontext64_full") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_mcontext64_full[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_mcontext64_full[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_mcontext64_full*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_mcontext64_full*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_mcontext64_full") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_mcontext_avx64")public static class __darwin_mcontext_avx64 {

        /* package-private */ __darwin_mcontext_avx64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_mcontext_avx64$struct$LAYOUT();
        }
        public static MemorySegment __es$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment __ss$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 168));
        }
        public static MemorySegment __fs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 844));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_mcontext_avx64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_mcontext_avx64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_mcontext_avx64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_mcontext_avx64_full")public static class __darwin_mcontext_avx64_full {

        /* package-private */ __darwin_mcontext_avx64_full() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_mcontext_avx64_full$struct$LAYOUT();
        }
        public static MemorySegment __es$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment __ss$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 200));
        }
        public static MemorySegment __fs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(216, 844));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_mcontext_avx64_full") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx64_full") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx64_full[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_mcontext_avx64_full[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_mcontext_avx64_full*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx64_full*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx64_full") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_mcontext_avx512_64")public static class __darwin_mcontext_avx512_64 {

        /* package-private */ __darwin_mcontext_avx512_64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_mcontext_avx512_64$struct$LAYOUT();
        }
        public static MemorySegment __es$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment __ss$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 168));
        }
        public static MemorySegment __fs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 2444));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_mcontext_avx512_64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx512_64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx512_64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_mcontext_avx512_64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_mcontext_avx512_64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx512_64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx512_64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_mcontext_avx512_64_full")public static class __darwin_mcontext_avx512_64_full {

        /* package-private */ __darwin_mcontext_avx512_64_full() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_mcontext_avx512_64_full$struct$LAYOUT();
        }
        public static MemorySegment __es$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment __ss$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 200));
        }
        public static MemorySegment __fs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(216, 2444));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_mcontext_avx512_64_full") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx512_64_full") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_mcontext_avx512_64_full[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_mcontext_avx512_64_full[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_mcontext_avx512_64_full*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx512_64_full*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_mcontext_avx512_64_full") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_sigaltstack")public static class __darwin_sigaltstack {

        /* package-private */ __darwin_sigaltstack() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_sigaltstack$struct$LAYOUT();
        }
        public static VarHandle ss_sp$VH() {
            return fuse_h_constants_2.__darwin_sigaltstack$ss_sp$VH();
        }
        public static  @C("void*") MemoryAddress ss_sp$get(@C("struct __darwin_sigaltstack") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__darwin_sigaltstack$ss_sp$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress ss_sp$get(@C("struct __darwin_sigaltstack") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__darwin_sigaltstack$ss_sp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ss_sp$set(@C("struct __darwin_sigaltstack") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_2.__darwin_sigaltstack$ss_sp$VH().set(seg, x);
        }
        public static void ss_sp$set(@C("struct __darwin_sigaltstack") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_2.__darwin_sigaltstack$ss_sp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ss_size$VH() {
            return fuse_h_constants_2.__darwin_sigaltstack$ss_size$VH();
        }
        public static  @C("__darwin_size_t") long ss_size$get(@C("struct __darwin_sigaltstack") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_sigaltstack$ss_size$VH().get(seg);
        }
        public static  @C("__darwin_size_t") long ss_size$get(@C("struct __darwin_sigaltstack") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_sigaltstack$ss_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ss_size$set(@C("struct __darwin_sigaltstack") MemorySegment seg, @C("__darwin_size_t") long x) {
            fuse_h_constants_2.__darwin_sigaltstack$ss_size$VH().set(seg, x);
        }
        public static void ss_size$set(@C("struct __darwin_sigaltstack") MemorySegment seg, long index, @C("__darwin_size_t") long x) {
            fuse_h_constants_2.__darwin_sigaltstack$ss_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ss_flags$VH() {
            return fuse_h_constants_2.__darwin_sigaltstack$ss_flags$VH();
        }
        public static  @C("int") int ss_flags$get(@C("struct __darwin_sigaltstack") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_sigaltstack$ss_flags$VH().get(seg);
        }
        public static  @C("int") int ss_flags$get(@C("struct __darwin_sigaltstack") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_sigaltstack$ss_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ss_flags$set(@C("struct __darwin_sigaltstack") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__darwin_sigaltstack$ss_flags$VH().set(seg, x);
        }
        public static void ss_flags$set(@C("struct __darwin_sigaltstack") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__darwin_sigaltstack$ss_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_sigaltstack") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_sigaltstack") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_sigaltstack[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_sigaltstack[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_sigaltstack*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_sigaltstack*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_sigaltstack") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_sigaltstack")public static class stack_t extends __darwin_sigaltstack {

        /* package-private */ stack_t() {}
    }

    @C("struct __darwin_ucontext")public static class __darwin_ucontext {

        /* package-private */ __darwin_ucontext() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__darwin_ucontext$struct$LAYOUT();
        }
        public static VarHandle uc_onstack$VH() {
            return fuse_h_constants_2.__darwin_ucontext$uc_onstack$VH();
        }
        public static  @C("int") int uc_onstack$get(@C("struct __darwin_ucontext") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_ucontext$uc_onstack$VH().get(seg);
        }
        public static  @C("int") int uc_onstack$get(@C("struct __darwin_ucontext") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_ucontext$uc_onstack$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void uc_onstack$set(@C("struct __darwin_ucontext") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__darwin_ucontext$uc_onstack$VH().set(seg, x);
        }
        public static void uc_onstack$set(@C("struct __darwin_ucontext") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__darwin_ucontext$uc_onstack$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle uc_sigmask$VH() {
            return fuse_h_constants_2.__darwin_ucontext$uc_sigmask$VH();
        }
        public static  @C("__darwin_sigset_t") int uc_sigmask$get(@C("struct __darwin_ucontext") MemorySegment seg) {
            return (int)fuse_h_constants_2.__darwin_ucontext$uc_sigmask$VH().get(seg);
        }
        public static  @C("__darwin_sigset_t") int uc_sigmask$get(@C("struct __darwin_ucontext") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__darwin_ucontext$uc_sigmask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void uc_sigmask$set(@C("struct __darwin_ucontext") MemorySegment seg, @C("__darwin_sigset_t") int x) {
            fuse_h_constants_2.__darwin_ucontext$uc_sigmask$VH().set(seg, x);
        }
        public static void uc_sigmask$set(@C("struct __darwin_ucontext") MemorySegment seg, long index, @C("__darwin_sigset_t") int x) {
            fuse_h_constants_2.__darwin_ucontext$uc_sigmask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment uc_stack$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 24));
        }
        public static VarHandle uc_link$VH() {
            return fuse_h_constants_2.__darwin_ucontext$uc_link$VH();
        }
        public static  @C("struct __darwin_ucontext*") MemoryAddress uc_link$get(@C("struct __darwin_ucontext") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__darwin_ucontext$uc_link$VH().get(seg);
        }
        public static  @C("struct __darwin_ucontext*") MemoryAddress uc_link$get(@C("struct __darwin_ucontext") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__darwin_ucontext$uc_link$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void uc_link$set(@C("struct __darwin_ucontext") MemorySegment seg, @C("struct __darwin_ucontext*") MemoryAddress x) {
            fuse_h_constants_2.__darwin_ucontext$uc_link$VH().set(seg, x);
        }
        public static void uc_link$set(@C("struct __darwin_ucontext") MemorySegment seg, long index, @C("struct __darwin_ucontext*") MemoryAddress x) {
            fuse_h_constants_2.__darwin_ucontext$uc_link$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle uc_mcsize$VH() {
            return fuse_h_constants_2.__darwin_ucontext$uc_mcsize$VH();
        }
        public static  @C("__darwin_size_t") long uc_mcsize$get(@C("struct __darwin_ucontext") MemorySegment seg) {
            return (long)fuse_h_constants_2.__darwin_ucontext$uc_mcsize$VH().get(seg);
        }
        public static  @C("__darwin_size_t") long uc_mcsize$get(@C("struct __darwin_ucontext") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__darwin_ucontext$uc_mcsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void uc_mcsize$set(@C("struct __darwin_ucontext") MemorySegment seg, @C("__darwin_size_t") long x) {
            fuse_h_constants_2.__darwin_ucontext$uc_mcsize$VH().set(seg, x);
        }
        public static void uc_mcsize$set(@C("struct __darwin_ucontext") MemorySegment seg, long index, @C("__darwin_size_t") long x) {
            fuse_h_constants_2.__darwin_ucontext$uc_mcsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle uc_mcontext$VH() {
            return fuse_h_constants_2.__darwin_ucontext$uc_mcontext$VH();
        }
        public static  @C("struct __darwin_mcontext64*") MemoryAddress uc_mcontext$get(@C("struct __darwin_ucontext") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__darwin_ucontext$uc_mcontext$VH().get(seg);
        }
        public static  @C("struct __darwin_mcontext64*") MemoryAddress uc_mcontext$get(@C("struct __darwin_ucontext") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__darwin_ucontext$uc_mcontext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void uc_mcontext$set(@C("struct __darwin_ucontext") MemorySegment seg, @C("struct __darwin_mcontext64*") MemoryAddress x) {
            fuse_h_constants_2.__darwin_ucontext$uc_mcontext$VH().set(seg, x);
        }
        public static void uc_mcontext$set(@C("struct __darwin_ucontext") MemorySegment seg, long index, @C("struct __darwin_mcontext64*") MemoryAddress x) {
            fuse_h_constants_2.__darwin_ucontext$uc_mcontext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __darwin_ucontext") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __darwin_ucontext") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __darwin_ucontext[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __darwin_ucontext[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __darwin_ucontext*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __darwin_ucontext*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __darwin_ucontext") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __darwin_ucontext")public static class ucontext_t extends __darwin_ucontext {

        /* package-private */ ucontext_t() {}
    }

    @C("union sigval")public static class sigval {

        /* package-private */ sigval() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.sigval$union$LAYOUT();
        }
        public static VarHandle sival_int$VH() {
            return fuse_h_constants_2.sigval$sival_int$VH();
        }
        public static  @C("int") int sival_int$get(@C("union sigval") MemorySegment seg) {
            return (int)fuse_h_constants_2.sigval$sival_int$VH().get(seg);
        }
        public static  @C("int") int sival_int$get(@C("union sigval") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.sigval$sival_int$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sival_int$set(@C("union sigval") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.sigval$sival_int$VH().set(seg, x);
        }
        public static void sival_int$set(@C("union sigval") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.sigval$sival_int$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sival_ptr$VH() {
            return fuse_h_constants_2.sigval$sival_ptr$VH();
        }
        public static  @C("void*") MemoryAddress sival_ptr$get(@C("union sigval") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.sigval$sival_ptr$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress sival_ptr$get(@C("union sigval") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.sigval$sival_ptr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sival_ptr$set(@C("union sigval") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_2.sigval$sival_ptr$VH().set(seg, x);
        }
        public static void sival_ptr$set(@C("union sigval") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_2.sigval$sival_ptr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union sigval") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union sigval") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union sigval[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union sigval[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union sigval*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union sigval*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union sigval") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct sigevent")public static class sigevent {

        /* package-private */ sigevent() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.sigevent$struct$LAYOUT();
        }
        public static VarHandle sigev_notify$VH() {
            return fuse_h_constants_2.sigevent$sigev_notify$VH();
        }
        public static  @C("int") int sigev_notify$get(@C("struct sigevent") MemorySegment seg) {
            return (int)fuse_h_constants_2.sigevent$sigev_notify$VH().get(seg);
        }
        public static  @C("int") int sigev_notify$get(@C("struct sigevent") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.sigevent$sigev_notify$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sigev_notify$set(@C("struct sigevent") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.sigevent$sigev_notify$VH().set(seg, x);
        }
        public static void sigev_notify$set(@C("struct sigevent") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.sigevent$sigev_notify$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sigev_signo$VH() {
            return fuse_h_constants_2.sigevent$sigev_signo$VH();
        }
        public static  @C("int") int sigev_signo$get(@C("struct sigevent") MemorySegment seg) {
            return (int)fuse_h_constants_2.sigevent$sigev_signo$VH().get(seg);
        }
        public static  @C("int") int sigev_signo$get(@C("struct sigevent") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.sigevent$sigev_signo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sigev_signo$set(@C("struct sigevent") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.sigevent$sigev_signo$VH().set(seg, x);
        }
        public static void sigev_signo$set(@C("struct sigevent") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.sigevent$sigev_signo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment sigev_value$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static interface sigev_notify_function {

            void apply(jdk.incubator.foreign.MemorySegment x0);
            public static  @C("void(*)(union sigval)") MemorySegment allocate(sigev_notify_function fi) {
                return RuntimeHelper.upcallStub(sigev_notify_function.class, fi, fuse_h_constants_2.sigev_notify_function$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;)V");
            }
            public static  @C("void(*)(union sigval)") MemorySegment allocate(sigev_notify_function fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle sigev_notify_function$VH() {
            return fuse_h_constants_2.sigevent$sigev_notify_function$VH();
        }
        public static  @C("void(*)(union sigval)") MemoryAddress sigev_notify_function$get(@C("struct sigevent") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.sigevent$sigev_notify_function$VH().get(seg);
        }
        public static  @C("void(*)(union sigval)") MemoryAddress sigev_notify_function$get(@C("struct sigevent") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.sigevent$sigev_notify_function$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sigev_notify_function$set(@C("struct sigevent") MemorySegment seg, @C("void(*)(union sigval)") MemoryAddress x) {
            fuse_h_constants_2.sigevent$sigev_notify_function$VH().set(seg, x);
        }
        public static void sigev_notify_function$set(@C("struct sigevent") MemorySegment seg, long index, @C("void(*)(union sigval)") MemoryAddress x) {
            fuse_h_constants_2.sigevent$sigev_notify_function$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sigev_notify_attributes$VH() {
            return fuse_h_constants_2.sigevent$sigev_notify_attributes$VH();
        }
        public static  @C("pthread_attr_t*") MemoryAddress sigev_notify_attributes$get(@C("struct sigevent") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.sigevent$sigev_notify_attributes$VH().get(seg);
        }
        public static  @C("pthread_attr_t*") MemoryAddress sigev_notify_attributes$get(@C("struct sigevent") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.sigevent$sigev_notify_attributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sigev_notify_attributes$set(@C("struct sigevent") MemorySegment seg, @C("pthread_attr_t*") MemoryAddress x) {
            fuse_h_constants_2.sigevent$sigev_notify_attributes$VH().set(seg, x);
        }
        public static void sigev_notify_attributes$set(@C("struct sigevent") MemorySegment seg, long index, @C("pthread_attr_t*") MemoryAddress x) {
            fuse_h_constants_2.sigevent$sigev_notify_attributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct sigevent") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct sigevent") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct sigevent[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct sigevent[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct sigevent*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct sigevent*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct sigevent") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __siginfo")public static class __siginfo {

        /* package-private */ __siginfo() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__siginfo$struct$LAYOUT();
        }
        public static VarHandle si_signo$VH() {
            return fuse_h_constants_2.__siginfo$si_signo$VH();
        }
        public static  @C("int") int si_signo$get(@C("struct __siginfo") MemorySegment seg) {
            return (int)fuse_h_constants_2.__siginfo$si_signo$VH().get(seg);
        }
        public static  @C("int") int si_signo$get(@C("struct __siginfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__siginfo$si_signo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void si_signo$set(@C("struct __siginfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__siginfo$si_signo$VH().set(seg, x);
        }
        public static void si_signo$set(@C("struct __siginfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__siginfo$si_signo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle si_errno$VH() {
            return fuse_h_constants_2.__siginfo$si_errno$VH();
        }
        public static  @C("int") int si_errno$get(@C("struct __siginfo") MemorySegment seg) {
            return (int)fuse_h_constants_2.__siginfo$si_errno$VH().get(seg);
        }
        public static  @C("int") int si_errno$get(@C("struct __siginfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__siginfo$si_errno$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void si_errno$set(@C("struct __siginfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__siginfo$si_errno$VH().set(seg, x);
        }
        public static void si_errno$set(@C("struct __siginfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__siginfo$si_errno$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle si_code$VH() {
            return fuse_h_constants_2.__siginfo$si_code$VH();
        }
        public static  @C("int") int si_code$get(@C("struct __siginfo") MemorySegment seg) {
            return (int)fuse_h_constants_2.__siginfo$si_code$VH().get(seg);
        }
        public static  @C("int") int si_code$get(@C("struct __siginfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__siginfo$si_code$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void si_code$set(@C("struct __siginfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__siginfo$si_code$VH().set(seg, x);
        }
        public static void si_code$set(@C("struct __siginfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__siginfo$si_code$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle si_pid$VH() {
            return fuse_h_constants_2.__siginfo$si_pid$VH();
        }
        public static  @C("pid_t") int si_pid$get(@C("struct __siginfo") MemorySegment seg) {
            return (int)fuse_h_constants_2.__siginfo$si_pid$VH().get(seg);
        }
        public static  @C("pid_t") int si_pid$get(@C("struct __siginfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__siginfo$si_pid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void si_pid$set(@C("struct __siginfo") MemorySegment seg, @C("pid_t") int x) {
            fuse_h_constants_2.__siginfo$si_pid$VH().set(seg, x);
        }
        public static void si_pid$set(@C("struct __siginfo") MemorySegment seg, long index, @C("pid_t") int x) {
            fuse_h_constants_2.__siginfo$si_pid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle si_uid$VH() {
            return fuse_h_constants_2.__siginfo$si_uid$VH();
        }
        public static  @C("uid_t") int si_uid$get(@C("struct __siginfo") MemorySegment seg) {
            return (int)fuse_h_constants_2.__siginfo$si_uid$VH().get(seg);
        }
        public static  @C("uid_t") int si_uid$get(@C("struct __siginfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__siginfo$si_uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void si_uid$set(@C("struct __siginfo") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_2.__siginfo$si_uid$VH().set(seg, x);
        }
        public static void si_uid$set(@C("struct __siginfo") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_2.__siginfo$si_uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle si_status$VH() {
            return fuse_h_constants_2.__siginfo$si_status$VH();
        }
        public static  @C("int") int si_status$get(@C("struct __siginfo") MemorySegment seg) {
            return (int)fuse_h_constants_2.__siginfo$si_status$VH().get(seg);
        }
        public static  @C("int") int si_status$get(@C("struct __siginfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__siginfo$si_status$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void si_status$set(@C("struct __siginfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__siginfo$si_status$VH().set(seg, x);
        }
        public static void si_status$set(@C("struct __siginfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__siginfo$si_status$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle si_addr$VH() {
            return fuse_h_constants_2.__siginfo$si_addr$VH();
        }
        public static  @C("void*") MemoryAddress si_addr$get(@C("struct __siginfo") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__siginfo$si_addr$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress si_addr$get(@C("struct __siginfo") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__siginfo$si_addr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void si_addr$set(@C("struct __siginfo") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_2.__siginfo$si_addr$VH().set(seg, x);
        }
        public static void si_addr$set(@C("struct __siginfo") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_2.__siginfo$si_addr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment si_value$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
        }
        public static VarHandle si_band$VH() {
            return fuse_h_constants_2.__siginfo$si_band$VH();
        }
        public static  @C("long") long si_band$get(@C("struct __siginfo") MemorySegment seg) {
            return (long)fuse_h_constants_2.__siginfo$si_band$VH().get(seg);
        }
        public static  @C("long") long si_band$get(@C("struct __siginfo") MemorySegment seg, long index) {
            return (long)fuse_h_constants_2.__siginfo$si_band$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void si_band$set(@C("struct __siginfo") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_2.__siginfo$si_band$VH().set(seg, x);
        }
        public static void si_band$set(@C("struct __siginfo") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_2.__siginfo$si_band$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment __pad$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 56));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __siginfo") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __siginfo") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __siginfo[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __siginfo[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __siginfo*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __siginfo*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __siginfo") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __siginfo")public static class siginfo_t extends __siginfo {

        /* package-private */ siginfo_t() {}
    }

    @C("union __sigaction_u")public static class __sigaction_u {

        /* package-private */ __sigaction_u() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__sigaction_u$union$LAYOUT();
        }
        public static interface __sa_handler {

            void apply(int x0);
            public static  @C("void(*)(int)") MemorySegment allocate(__sa_handler fi) {
                return RuntimeHelper.upcallStub(__sa_handler.class, fi, fuse_h_constants_2.__sa_handler$FUNC(), "(I)V");
            }
            public static  @C("void(*)(int)") MemorySegment allocate(__sa_handler fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle __sa_handler$VH() {
            return fuse_h_constants_2.__sigaction_u$__sa_handler$VH();
        }
        public static  @C("void(*)(int)") MemoryAddress __sa_handler$get(@C("union __sigaction_u") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__sigaction_u$__sa_handler$VH().get(seg);
        }
        public static  @C("void(*)(int)") MemoryAddress __sa_handler$get(@C("union __sigaction_u") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__sigaction_u$__sa_handler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sa_handler$set(@C("union __sigaction_u") MemorySegment seg, @C("void(*)(int)") MemoryAddress x) {
            fuse_h_constants_2.__sigaction_u$__sa_handler$VH().set(seg, x);
        }
        public static void __sa_handler$set(@C("union __sigaction_u") MemorySegment seg, long index, @C("void(*)(int)") MemoryAddress x) {
            fuse_h_constants_2.__sigaction_u$__sa_handler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface __sa_sigaction {

            void apply(int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("void(*)(int,struct __siginfo*,void*)") MemorySegment allocate(__sa_sigaction fi) {
                return RuntimeHelper.upcallStub(__sa_sigaction.class, fi, fuse_h_constants_2.__sa_sigaction$FUNC(), "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
            }
            public static  @C("void(*)(int,struct __siginfo*,void*)") MemorySegment allocate(__sa_sigaction fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle __sa_sigaction$VH() {
            return fuse_h_constants_2.__sigaction_u$__sa_sigaction$VH();
        }
        public static  @C("void(*)(int,struct __siginfo*,void*)") MemoryAddress __sa_sigaction$get(@C("union __sigaction_u") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__sigaction_u$__sa_sigaction$VH().get(seg);
        }
        public static  @C("void(*)(int,struct __siginfo*,void*)") MemoryAddress __sa_sigaction$get(@C("union __sigaction_u") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__sigaction_u$__sa_sigaction$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __sa_sigaction$set(@C("union __sigaction_u") MemorySegment seg, @C("void(*)(int,struct __siginfo*,void*)") MemoryAddress x) {
            fuse_h_constants_2.__sigaction_u$__sa_sigaction$VH().set(seg, x);
        }
        public static void __sa_sigaction$set(@C("union __sigaction_u") MemorySegment seg, long index, @C("void(*)(int,struct __siginfo*,void*)") MemoryAddress x) {
            fuse_h_constants_2.__sigaction_u$__sa_sigaction$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union __sigaction_u") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union __sigaction_u") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union __sigaction_u[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union __sigaction_u[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union __sigaction_u*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union __sigaction_u*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union __sigaction_u") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct __sigaction")public static class __sigaction {

        /* package-private */ __sigaction() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.__sigaction$struct$LAYOUT();
        }
        public static MemorySegment __sigaction_u$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static interface sa_tramp {

            void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("void(*)(void*,int,int,siginfo_t*,void*)") MemorySegment allocate(sa_tramp fi) {
                return RuntimeHelper.upcallStub(sa_tramp.class, fi, fuse_h_constants_2.sa_tramp$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
            }
            public static  @C("void(*)(void*,int,int,siginfo_t*,void*)") MemorySegment allocate(sa_tramp fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle sa_tramp$VH() {
            return fuse_h_constants_2.__sigaction$sa_tramp$VH();
        }
        public static  @C("void(*)(void*,int,int,siginfo_t*,void*)") MemoryAddress sa_tramp$get(@C("struct __sigaction") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__sigaction$sa_tramp$VH().get(seg);
        }
        public static  @C("void(*)(void*,int,int,siginfo_t*,void*)") MemoryAddress sa_tramp$get(@C("struct __sigaction") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.__sigaction$sa_tramp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sa_tramp$set(@C("struct __sigaction") MemorySegment seg, @C("void(*)(void*,int,int,siginfo_t*,void*)") MemoryAddress x) {
            fuse_h_constants_2.__sigaction$sa_tramp$VH().set(seg, x);
        }
        public static void sa_tramp$set(@C("struct __sigaction") MemorySegment seg, long index, @C("void(*)(void*,int,int,siginfo_t*,void*)") MemoryAddress x) {
            fuse_h_constants_2.__sigaction$sa_tramp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sa_mask$VH() {
            return fuse_h_constants_2.__sigaction$sa_mask$VH();
        }
        public static  @C("sigset_t") int sa_mask$get(@C("struct __sigaction") MemorySegment seg) {
            return (int)fuse_h_constants_2.__sigaction$sa_mask$VH().get(seg);
        }
        public static  @C("sigset_t") int sa_mask$get(@C("struct __sigaction") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__sigaction$sa_mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sa_mask$set(@C("struct __sigaction") MemorySegment seg, @C("sigset_t") int x) {
            fuse_h_constants_2.__sigaction$sa_mask$VH().set(seg, x);
        }
        public static void sa_mask$set(@C("struct __sigaction") MemorySegment seg, long index, @C("sigset_t") int x) {
            fuse_h_constants_2.__sigaction$sa_mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sa_flags$VH() {
            return fuse_h_constants_2.__sigaction$sa_flags$VH();
        }
        public static  @C("int") int sa_flags$get(@C("struct __sigaction") MemorySegment seg) {
            return (int)fuse_h_constants_2.__sigaction$sa_flags$VH().get(seg);
        }
        public static  @C("int") int sa_flags$get(@C("struct __sigaction") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.__sigaction$sa_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sa_flags$set(@C("struct __sigaction") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.__sigaction$sa_flags$VH().set(seg, x);
        }
        public static void sa_flags$set(@C("struct __sigaction") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.__sigaction$sa_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct __sigaction") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct __sigaction") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct __sigaction[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct __sigaction[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct __sigaction*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct __sigaction*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct __sigaction") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct sigaction")public static class sigaction {

        /* package-private */ sigaction() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.sigaction$struct$LAYOUT();
        }
        public static MemorySegment __sigaction_u$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static VarHandle sa_mask$VH() {
            return fuse_h_constants_2.sigaction$sa_mask$VH();
        }
        public static  @C("sigset_t") int sa_mask$get(@C("struct sigaction") MemorySegment seg) {
            return (int)fuse_h_constants_2.sigaction$sa_mask$VH().get(seg);
        }
        public static  @C("sigset_t") int sa_mask$get(@C("struct sigaction") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.sigaction$sa_mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sa_mask$set(@C("struct sigaction") MemorySegment seg, @C("sigset_t") int x) {
            fuse_h_constants_2.sigaction$sa_mask$VH().set(seg, x);
        }
        public static void sa_mask$set(@C("struct sigaction") MemorySegment seg, long index, @C("sigset_t") int x) {
            fuse_h_constants_2.sigaction$sa_mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sa_flags$VH() {
            return fuse_h_constants_2.sigaction$sa_flags$VH();
        }
        public static  @C("int") int sa_flags$get(@C("struct sigaction") MemorySegment seg) {
            return (int)fuse_h_constants_2.sigaction$sa_flags$VH().get(seg);
        }
        public static  @C("int") int sa_flags$get(@C("struct sigaction") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.sigaction$sa_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sa_flags$set(@C("struct sigaction") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.sigaction$sa_flags$VH().set(seg, x);
        }
        public static void sa_flags$set(@C("struct sigaction") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.sigaction$sa_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct sigaction") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct sigaction") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct sigaction[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct sigaction[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct sigaction*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct sigaction*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct sigaction") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct sigvec")public static class sigvec {

        /* package-private */ sigvec() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.sigvec$struct$LAYOUT();
        }
        public static interface sv_handler {

            void apply(int x0);
            public static  @C("void(*)(int)") MemorySegment allocate(sv_handler fi) {
                return RuntimeHelper.upcallStub(sv_handler.class, fi, fuse_h_constants_2.sv_handler$FUNC(), "(I)V");
            }
            public static  @C("void(*)(int)") MemorySegment allocate(sv_handler fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle sv_handler$VH() {
            return fuse_h_constants_2.sigvec$sv_handler$VH();
        }
        public static  @C("void(*)(int)") MemoryAddress sv_handler$get(@C("struct sigvec") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.sigvec$sv_handler$VH().get(seg);
        }
        public static  @C("void(*)(int)") MemoryAddress sv_handler$get(@C("struct sigvec") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.sigvec$sv_handler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sv_handler$set(@C("struct sigvec") MemorySegment seg, @C("void(*)(int)") MemoryAddress x) {
            fuse_h_constants_2.sigvec$sv_handler$VH().set(seg, x);
        }
        public static void sv_handler$set(@C("struct sigvec") MemorySegment seg, long index, @C("void(*)(int)") MemoryAddress x) {
            fuse_h_constants_2.sigvec$sv_handler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sv_mask$VH() {
            return fuse_h_constants_2.sigvec$sv_mask$VH();
        }
        public static  @C("int") int sv_mask$get(@C("struct sigvec") MemorySegment seg) {
            return (int)fuse_h_constants_2.sigvec$sv_mask$VH().get(seg);
        }
        public static  @C("int") int sv_mask$get(@C("struct sigvec") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.sigvec$sv_mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sv_mask$set(@C("struct sigvec") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.sigvec$sv_mask$VH().set(seg, x);
        }
        public static void sv_mask$set(@C("struct sigvec") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.sigvec$sv_mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sv_flags$VH() {
            return fuse_h_constants_2.sigvec$sv_flags$VH();
        }
        public static  @C("int") int sv_flags$get(@C("struct sigvec") MemorySegment seg) {
            return (int)fuse_h_constants_2.sigvec$sv_flags$VH().get(seg);
        }
        public static  @C("int") int sv_flags$get(@C("struct sigvec") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.sigvec$sv_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sv_flags$set(@C("struct sigvec") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.sigvec$sv_flags$VH().set(seg, x);
        }
        public static void sv_flags$set(@C("struct sigvec") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.sigvec$sv_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct sigvec") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct sigvec") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct sigvec[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct sigvec[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct sigvec*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct sigvec*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct sigvec") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct sigstack")public static class sigstack {

        /* package-private */ sigstack() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_2.sigstack$struct$LAYOUT();
        }
        public static VarHandle ss_sp$VH() {
            return fuse_h_constants_2.sigstack$ss_sp$VH();
        }
        public static  @C("char*") MemoryAddress ss_sp$get(@C("struct sigstack") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.sigstack$ss_sp$VH().get(seg);
        }
        public static  @C("char*") MemoryAddress ss_sp$get(@C("struct sigstack") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.sigstack$ss_sp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ss_sp$set(@C("struct sigstack") MemorySegment seg, @C("char*") MemoryAddress x) {
            fuse_h_constants_2.sigstack$ss_sp$VH().set(seg, x);
        }
        public static void ss_sp$set(@C("struct sigstack") MemorySegment seg, long index, @C("char*") MemoryAddress x) {
            fuse_h_constants_2.sigstack$ss_sp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ss_onstack$VH() {
            return fuse_h_constants_2.sigstack$ss_onstack$VH();
        }
        public static  @C("int") int ss_onstack$get(@C("struct sigstack") MemorySegment seg) {
            return (int)fuse_h_constants_2.sigstack$ss_onstack$VH().get(seg);
        }
        public static  @C("int") int ss_onstack$get(@C("struct sigstack") MemorySegment seg, long index) {
            return (int)fuse_h_constants_2.sigstack$ss_onstack$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ss_onstack$set(@C("struct sigstack") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_2.sigstack$ss_onstack$VH().set(seg, x);
        }
        public static void ss_onstack$set(@C("struct sigstack") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_2.sigstack$ss_onstack$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct sigstack") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct sigstack") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct sigstack[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct sigstack[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct sigstack*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct sigstack*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct sigstack") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static interface signal$x0 {

        void apply(int x0);
        public static  @C("void(*)(int)") MemorySegment allocate(signal$x0 fi) {
            return RuntimeHelper.upcallStub(signal$x0.class, fi, fuse_h_constants_2.signal$x0$FUNC(), "(I)V");
        }
        public static  @C("void(*)(int)") MemorySegment allocate(signal$x0 fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    @C("struct au_tid")public static class au_tid {

        /* package-private */ au_tid() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.au_tid$struct$LAYOUT();
        }
        public static VarHandle port$VH() {
            return fuse_h_constants_3.au_tid$port$VH();
        }
        public static  @C("dev_t") int port$get(@C("struct au_tid") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_tid$port$VH().get(seg);
        }
        public static  @C("dev_t") int port$get(@C("struct au_tid") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_tid$port$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void port$set(@C("struct au_tid") MemorySegment seg, @C("dev_t") int x) {
            fuse_h_constants_3.au_tid$port$VH().set(seg, x);
        }
        public static void port$set(@C("struct au_tid") MemorySegment seg, long index, @C("dev_t") int x) {
            fuse_h_constants_3.au_tid$port$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle machine$VH() {
            return fuse_h_constants_3.au_tid$machine$VH();
        }
        public static  @C("u_int32_t") int machine$get(@C("struct au_tid") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_tid$machine$VH().get(seg);
        }
        public static  @C("u_int32_t") int machine$get(@C("struct au_tid") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_tid$machine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void machine$set(@C("struct au_tid") MemorySegment seg, @C("u_int32_t") int x) {
            fuse_h_constants_3.au_tid$machine$VH().set(seg, x);
        }
        public static void machine$set(@C("struct au_tid") MemorySegment seg, long index, @C("u_int32_t") int x) {
            fuse_h_constants_3.au_tid$machine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct au_tid") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct au_tid") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct au_tid[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct au_tid[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct au_tid*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct au_tid*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct au_tid") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct au_tid")public static class au_tid_t extends au_tid {

        /* package-private */ au_tid_t() {}
    }

    @C("struct au_tid_addr")public static class au_tid_addr {

        /* package-private */ au_tid_addr() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.au_tid_addr$struct$LAYOUT();
        }
        public static VarHandle at_port$VH() {
            return fuse_h_constants_3.au_tid_addr$at_port$VH();
        }
        public static  @C("dev_t") int at_port$get(@C("struct au_tid_addr") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_tid_addr$at_port$VH().get(seg);
        }
        public static  @C("dev_t") int at_port$get(@C("struct au_tid_addr") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_tid_addr$at_port$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void at_port$set(@C("struct au_tid_addr") MemorySegment seg, @C("dev_t") int x) {
            fuse_h_constants_3.au_tid_addr$at_port$VH().set(seg, x);
        }
        public static void at_port$set(@C("struct au_tid_addr") MemorySegment seg, long index, @C("dev_t") int x) {
            fuse_h_constants_3.au_tid_addr$at_port$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle at_type$VH() {
            return fuse_h_constants_3.au_tid_addr$at_type$VH();
        }
        public static  @C("u_int32_t") int at_type$get(@C("struct au_tid_addr") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_tid_addr$at_type$VH().get(seg);
        }
        public static  @C("u_int32_t") int at_type$get(@C("struct au_tid_addr") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_tid_addr$at_type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void at_type$set(@C("struct au_tid_addr") MemorySegment seg, @C("u_int32_t") int x) {
            fuse_h_constants_3.au_tid_addr$at_type$VH().set(seg, x);
        }
        public static void at_type$set(@C("struct au_tid_addr") MemorySegment seg, long index, @C("u_int32_t") int x) {
            fuse_h_constants_3.au_tid_addr$at_type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment at_addr$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct au_tid_addr") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct au_tid_addr") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct au_tid_addr[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct au_tid_addr[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct au_tid_addr*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct au_tid_addr*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct au_tid_addr") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct au_tid_addr")public static class au_tid_addr_t extends au_tid_addr {

        /* package-private */ au_tid_addr_t() {}
    }

    @C("struct au_mask")public static class au_mask {

        /* package-private */ au_mask() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.au_mask$struct$LAYOUT();
        }
        public static VarHandle am_success$VH() {
            return fuse_h_constants_3.au_mask$am_success$VH();
        }
        public static  @C("unsigned int") int am_success$get(@C("struct au_mask") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_mask$am_success$VH().get(seg);
        }
        public static  @C("unsigned int") int am_success$get(@C("struct au_mask") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_mask$am_success$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void am_success$set(@C("struct au_mask") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_3.au_mask$am_success$VH().set(seg, x);
        }
        public static void am_success$set(@C("struct au_mask") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_3.au_mask$am_success$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle am_failure$VH() {
            return fuse_h_constants_3.au_mask$am_failure$VH();
        }
        public static  @C("unsigned int") int am_failure$get(@C("struct au_mask") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_mask$am_failure$VH().get(seg);
        }
        public static  @C("unsigned int") int am_failure$get(@C("struct au_mask") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_mask$am_failure$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void am_failure$set(@C("struct au_mask") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_3.au_mask$am_failure$VH().set(seg, x);
        }
        public static void am_failure$set(@C("struct au_mask") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_3.au_mask$am_failure$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct au_mask") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct au_mask") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct au_mask[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct au_mask[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct au_mask*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct au_mask*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct au_mask") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct au_mask")public static class au_mask_t extends au_mask {

        /* package-private */ au_mask_t() {}
    }

    @C("struct auditinfo")public static class auditinfo {

        /* package-private */ auditinfo() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.auditinfo$struct$LAYOUT();
        }
        public static VarHandle ai_auid$VH() {
            return fuse_h_constants_3.auditinfo$ai_auid$VH();
        }
        public static  @C("au_id_t") int ai_auid$get(@C("struct auditinfo") MemorySegment seg) {
            return (int)fuse_h_constants_3.auditinfo$ai_auid$VH().get(seg);
        }
        public static  @C("au_id_t") int ai_auid$get(@C("struct auditinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.auditinfo$ai_auid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ai_auid$set(@C("struct auditinfo") MemorySegment seg, @C("au_id_t") int x) {
            fuse_h_constants_3.auditinfo$ai_auid$VH().set(seg, x);
        }
        public static void ai_auid$set(@C("struct auditinfo") MemorySegment seg, long index, @C("au_id_t") int x) {
            fuse_h_constants_3.auditinfo$ai_auid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ai_mask$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 8));
        }
        public static MemorySegment ai_termid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 8));
        }
        public static VarHandle ai_asid$VH() {
            return fuse_h_constants_3.auditinfo$ai_asid$VH();
        }
        public static  @C("au_asid_t") int ai_asid$get(@C("struct auditinfo") MemorySegment seg) {
            return (int)fuse_h_constants_3.auditinfo$ai_asid$VH().get(seg);
        }
        public static  @C("au_asid_t") int ai_asid$get(@C("struct auditinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.auditinfo$ai_asid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ai_asid$set(@C("struct auditinfo") MemorySegment seg, @C("au_asid_t") int x) {
            fuse_h_constants_3.auditinfo$ai_asid$VH().set(seg, x);
        }
        public static void ai_asid$set(@C("struct auditinfo") MemorySegment seg, long index, @C("au_asid_t") int x) {
            fuse_h_constants_3.auditinfo$ai_asid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct auditinfo") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct auditinfo") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct auditinfo[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct auditinfo[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct auditinfo*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct auditinfo*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct auditinfo") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct auditinfo")public static class auditinfo_t extends auditinfo {

        /* package-private */ auditinfo_t() {}
    }

    @C("struct auditinfo_addr")public static class auditinfo_addr {

        /* package-private */ auditinfo_addr() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.auditinfo_addr$struct$LAYOUT();
        }
        public static VarHandle ai_auid$VH() {
            return fuse_h_constants_3.auditinfo_addr$ai_auid$VH();
        }
        public static  @C("au_id_t") int ai_auid$get(@C("struct auditinfo_addr") MemorySegment seg) {
            return (int)fuse_h_constants_3.auditinfo_addr$ai_auid$VH().get(seg);
        }
        public static  @C("au_id_t") int ai_auid$get(@C("struct auditinfo_addr") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.auditinfo_addr$ai_auid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ai_auid$set(@C("struct auditinfo_addr") MemorySegment seg, @C("au_id_t") int x) {
            fuse_h_constants_3.auditinfo_addr$ai_auid$VH().set(seg, x);
        }
        public static void ai_auid$set(@C("struct auditinfo_addr") MemorySegment seg, long index, @C("au_id_t") int x) {
            fuse_h_constants_3.auditinfo_addr$ai_auid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ai_mask$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 8));
        }
        public static MemorySegment ai_termid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 24));
        }
        public static VarHandle ai_asid$VH() {
            return fuse_h_constants_3.auditinfo_addr$ai_asid$VH();
        }
        public static  @C("au_asid_t") int ai_asid$get(@C("struct auditinfo_addr") MemorySegment seg) {
            return (int)fuse_h_constants_3.auditinfo_addr$ai_asid$VH().get(seg);
        }
        public static  @C("au_asid_t") int ai_asid$get(@C("struct auditinfo_addr") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.auditinfo_addr$ai_asid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ai_asid$set(@C("struct auditinfo_addr") MemorySegment seg, @C("au_asid_t") int x) {
            fuse_h_constants_3.auditinfo_addr$ai_asid$VH().set(seg, x);
        }
        public static void ai_asid$set(@C("struct auditinfo_addr") MemorySegment seg, long index, @C("au_asid_t") int x) {
            fuse_h_constants_3.auditinfo_addr$ai_asid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ai_flags$VH() {
            return fuse_h_constants_3.auditinfo_addr$ai_flags$VH();
        }
        public static  @C("au_asflgs_t") long ai_flags$get(@C("struct auditinfo_addr") MemorySegment seg) {
            return (long)fuse_h_constants_3.auditinfo_addr$ai_flags$VH().get(seg);
        }
        public static  @C("au_asflgs_t") long ai_flags$get(@C("struct auditinfo_addr") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.auditinfo_addr$ai_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ai_flags$set(@C("struct auditinfo_addr") MemorySegment seg, @C("au_asflgs_t") long x) {
            fuse_h_constants_3.auditinfo_addr$ai_flags$VH().set(seg, x);
        }
        public static void ai_flags$set(@C("struct auditinfo_addr") MemorySegment seg, long index, @C("au_asflgs_t") long x) {
            fuse_h_constants_3.auditinfo_addr$ai_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct auditinfo_addr") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct auditinfo_addr") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct auditinfo_addr[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct auditinfo_addr[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct auditinfo_addr*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct auditinfo_addr*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct auditinfo_addr") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct auditinfo_addr")public static class auditinfo_addr_t extends auditinfo_addr {

        /* package-private */ auditinfo_addr_t() {}
    }

    @C("struct auditpinfo")public static class auditpinfo {

        /* package-private */ auditpinfo() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.auditpinfo$struct$LAYOUT();
        }
        public static VarHandle ap_pid$VH() {
            return fuse_h_constants_3.auditpinfo$ap_pid$VH();
        }
        public static  @C("pid_t") int ap_pid$get(@C("struct auditpinfo") MemorySegment seg) {
            return (int)fuse_h_constants_3.auditpinfo$ap_pid$VH().get(seg);
        }
        public static  @C("pid_t") int ap_pid$get(@C("struct auditpinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.auditpinfo$ap_pid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ap_pid$set(@C("struct auditpinfo") MemorySegment seg, @C("pid_t") int x) {
            fuse_h_constants_3.auditpinfo$ap_pid$VH().set(seg, x);
        }
        public static void ap_pid$set(@C("struct auditpinfo") MemorySegment seg, long index, @C("pid_t") int x) {
            fuse_h_constants_3.auditpinfo$ap_pid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ap_auid$VH() {
            return fuse_h_constants_3.auditpinfo$ap_auid$VH();
        }
        public static  @C("au_id_t") int ap_auid$get(@C("struct auditpinfo") MemorySegment seg) {
            return (int)fuse_h_constants_3.auditpinfo$ap_auid$VH().get(seg);
        }
        public static  @C("au_id_t") int ap_auid$get(@C("struct auditpinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.auditpinfo$ap_auid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ap_auid$set(@C("struct auditpinfo") MemorySegment seg, @C("au_id_t") int x) {
            fuse_h_constants_3.auditpinfo$ap_auid$VH().set(seg, x);
        }
        public static void ap_auid$set(@C("struct auditpinfo") MemorySegment seg, long index, @C("au_id_t") int x) {
            fuse_h_constants_3.auditpinfo$ap_auid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ap_mask$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment ap_termid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static VarHandle ap_asid$VH() {
            return fuse_h_constants_3.auditpinfo$ap_asid$VH();
        }
        public static  @C("au_asid_t") int ap_asid$get(@C("struct auditpinfo") MemorySegment seg) {
            return (int)fuse_h_constants_3.auditpinfo$ap_asid$VH().get(seg);
        }
        public static  @C("au_asid_t") int ap_asid$get(@C("struct auditpinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.auditpinfo$ap_asid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ap_asid$set(@C("struct auditpinfo") MemorySegment seg, @C("au_asid_t") int x) {
            fuse_h_constants_3.auditpinfo$ap_asid$VH().set(seg, x);
        }
        public static void ap_asid$set(@C("struct auditpinfo") MemorySegment seg, long index, @C("au_asid_t") int x) {
            fuse_h_constants_3.auditpinfo$ap_asid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct auditpinfo") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct auditpinfo") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct auditpinfo[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct auditpinfo[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct auditpinfo*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct auditpinfo*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct auditpinfo") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct auditpinfo")public static class auditpinfo_t extends auditpinfo {

        /* package-private */ auditpinfo_t() {}
    }

    @C("struct auditpinfo_addr")public static class auditpinfo_addr {

        /* package-private */ auditpinfo_addr() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.auditpinfo_addr$struct$LAYOUT();
        }
        public static VarHandle ap_pid$VH() {
            return fuse_h_constants_3.auditpinfo_addr$ap_pid$VH();
        }
        public static  @C("pid_t") int ap_pid$get(@C("struct auditpinfo_addr") MemorySegment seg) {
            return (int)fuse_h_constants_3.auditpinfo_addr$ap_pid$VH().get(seg);
        }
        public static  @C("pid_t") int ap_pid$get(@C("struct auditpinfo_addr") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.auditpinfo_addr$ap_pid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ap_pid$set(@C("struct auditpinfo_addr") MemorySegment seg, @C("pid_t") int x) {
            fuse_h_constants_3.auditpinfo_addr$ap_pid$VH().set(seg, x);
        }
        public static void ap_pid$set(@C("struct auditpinfo_addr") MemorySegment seg, long index, @C("pid_t") int x) {
            fuse_h_constants_3.auditpinfo_addr$ap_pid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ap_auid$VH() {
            return fuse_h_constants_3.auditpinfo_addr$ap_auid$VH();
        }
        public static  @C("au_id_t") int ap_auid$get(@C("struct auditpinfo_addr") MemorySegment seg) {
            return (int)fuse_h_constants_3.auditpinfo_addr$ap_auid$VH().get(seg);
        }
        public static  @C("au_id_t") int ap_auid$get(@C("struct auditpinfo_addr") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.auditpinfo_addr$ap_auid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ap_auid$set(@C("struct auditpinfo_addr") MemorySegment seg, @C("au_id_t") int x) {
            fuse_h_constants_3.auditpinfo_addr$ap_auid$VH().set(seg, x);
        }
        public static void ap_auid$set(@C("struct auditpinfo_addr") MemorySegment seg, long index, @C("au_id_t") int x) {
            fuse_h_constants_3.auditpinfo_addr$ap_auid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ap_mask$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment ap_termid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 24));
        }
        public static VarHandle ap_asid$VH() {
            return fuse_h_constants_3.auditpinfo_addr$ap_asid$VH();
        }
        public static  @C("au_asid_t") int ap_asid$get(@C("struct auditpinfo_addr") MemorySegment seg) {
            return (int)fuse_h_constants_3.auditpinfo_addr$ap_asid$VH().get(seg);
        }
        public static  @C("au_asid_t") int ap_asid$get(@C("struct auditpinfo_addr") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.auditpinfo_addr$ap_asid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ap_asid$set(@C("struct auditpinfo_addr") MemorySegment seg, @C("au_asid_t") int x) {
            fuse_h_constants_3.auditpinfo_addr$ap_asid$VH().set(seg, x);
        }
        public static void ap_asid$set(@C("struct auditpinfo_addr") MemorySegment seg, long index, @C("au_asid_t") int x) {
            fuse_h_constants_3.auditpinfo_addr$ap_asid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ap_flags$VH() {
            return fuse_h_constants_3.auditpinfo_addr$ap_flags$VH();
        }
        public static  @C("au_asflgs_t") long ap_flags$get(@C("struct auditpinfo_addr") MemorySegment seg) {
            return (long)fuse_h_constants_3.auditpinfo_addr$ap_flags$VH().get(seg);
        }
        public static  @C("au_asflgs_t") long ap_flags$get(@C("struct auditpinfo_addr") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.auditpinfo_addr$ap_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ap_flags$set(@C("struct auditpinfo_addr") MemorySegment seg, @C("au_asflgs_t") long x) {
            fuse_h_constants_3.auditpinfo_addr$ap_flags$VH().set(seg, x);
        }
        public static void ap_flags$set(@C("struct auditpinfo_addr") MemorySegment seg, long index, @C("au_asflgs_t") long x) {
            fuse_h_constants_3.auditpinfo_addr$ap_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct auditpinfo_addr") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct auditpinfo_addr") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct auditpinfo_addr[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct auditpinfo_addr[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct auditpinfo_addr*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct auditpinfo_addr*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct auditpinfo_addr") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct auditpinfo_addr")public static class auditpinfo_addr_t extends auditpinfo_addr {

        /* package-private */ auditpinfo_addr_t() {}
    }

    @C("struct au_session")public static class au_session {

        /* package-private */ au_session() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.au_session$struct$LAYOUT();
        }
        public static VarHandle as_aia_p$VH() {
            return fuse_h_constants_3.au_session$as_aia_p$VH();
        }
        public static  @C("auditinfo_addr_t*") MemoryAddress as_aia_p$get(@C("struct au_session") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.au_session$as_aia_p$VH().get(seg);
        }
        public static  @C("auditinfo_addr_t*") MemoryAddress as_aia_p$get(@C("struct au_session") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.au_session$as_aia_p$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_aia_p$set(@C("struct au_session") MemorySegment seg, @C("auditinfo_addr_t*") MemoryAddress x) {
            fuse_h_constants_3.au_session$as_aia_p$VH().set(seg, x);
        }
        public static void as_aia_p$set(@C("struct au_session") MemorySegment seg, long index, @C("auditinfo_addr_t*") MemoryAddress x) {
            fuse_h_constants_3.au_session$as_aia_p$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment as_mask$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct au_session") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct au_session") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct au_session[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct au_session[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct au_session*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct au_session*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct au_session") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct au_session")public static class au_session_t extends au_session {

        /* package-private */ au_session_t() {}
    }

    @C("struct au_expire_after")public static class au_expire_after {

        /* package-private */ au_expire_after() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.au_expire_after$struct$LAYOUT();
        }
        public static VarHandle age$VH() {
            return fuse_h_constants_3.au_expire_after$age$VH();
        }
        public static  @C("time_t") long age$get(@C("struct au_expire_after") MemorySegment seg) {
            return (long)fuse_h_constants_3.au_expire_after$age$VH().get(seg);
        }
        public static  @C("time_t") long age$get(@C("struct au_expire_after") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.au_expire_after$age$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void age$set(@C("struct au_expire_after") MemorySegment seg, @C("time_t") long x) {
            fuse_h_constants_3.au_expire_after$age$VH().set(seg, x);
        }
        public static void age$set(@C("struct au_expire_after") MemorySegment seg, long index, @C("time_t") long x) {
            fuse_h_constants_3.au_expire_after$age$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle size$VH() {
            return fuse_h_constants_3.au_expire_after$size$VH();
        }
        public static  @C("size_t") long size$get(@C("struct au_expire_after") MemorySegment seg) {
            return (long)fuse_h_constants_3.au_expire_after$size$VH().get(seg);
        }
        public static  @C("size_t") long size$get(@C("struct au_expire_after") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.au_expire_after$size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void size$set(@C("struct au_expire_after") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_3.au_expire_after$size$VH().set(seg, x);
        }
        public static void size$set(@C("struct au_expire_after") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_3.au_expire_after$size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle op_type$VH() {
            return fuse_h_constants_3.au_expire_after$op_type$VH();
        }
        public static  @C("unsigned char") byte op_type$get(@C("struct au_expire_after") MemorySegment seg) {
            return (byte)fuse_h_constants_3.au_expire_after$op_type$VH().get(seg);
        }
        public static  @C("unsigned char") byte op_type$get(@C("struct au_expire_after") MemorySegment seg, long index) {
            return (byte)fuse_h_constants_3.au_expire_after$op_type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void op_type$set(@C("struct au_expire_after") MemorySegment seg, @C("unsigned char") byte x) {
            fuse_h_constants_3.au_expire_after$op_type$VH().set(seg, x);
        }
        public static void op_type$set(@C("struct au_expire_after") MemorySegment seg, long index, @C("unsigned char") byte x) {
            fuse_h_constants_3.au_expire_after$op_type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct au_expire_after") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct au_expire_after") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct au_expire_after[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct au_expire_after[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct au_expire_after*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct au_expire_after*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct au_expire_after") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct au_expire_after")public static class au_expire_after_t extends au_expire_after {

        /* package-private */ au_expire_after_t() {}
    }

    @C("struct au_qctrl")public static class au_qctrl {

        /* package-private */ au_qctrl() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.au_qctrl$struct$LAYOUT();
        }
        public static VarHandle aq_hiwater$VH() {
            return fuse_h_constants_3.au_qctrl$aq_hiwater$VH();
        }
        public static  @C("int") int aq_hiwater$get(@C("struct au_qctrl") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_qctrl$aq_hiwater$VH().get(seg);
        }
        public static  @C("int") int aq_hiwater$get(@C("struct au_qctrl") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_qctrl$aq_hiwater$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void aq_hiwater$set(@C("struct au_qctrl") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.au_qctrl$aq_hiwater$VH().set(seg, x);
        }
        public static void aq_hiwater$set(@C("struct au_qctrl") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.au_qctrl$aq_hiwater$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle aq_lowater$VH() {
            return fuse_h_constants_3.au_qctrl$aq_lowater$VH();
        }
        public static  @C("int") int aq_lowater$get(@C("struct au_qctrl") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_qctrl$aq_lowater$VH().get(seg);
        }
        public static  @C("int") int aq_lowater$get(@C("struct au_qctrl") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_qctrl$aq_lowater$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void aq_lowater$set(@C("struct au_qctrl") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.au_qctrl$aq_lowater$VH().set(seg, x);
        }
        public static void aq_lowater$set(@C("struct au_qctrl") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.au_qctrl$aq_lowater$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle aq_bufsz$VH() {
            return fuse_h_constants_3.au_qctrl$aq_bufsz$VH();
        }
        public static  @C("int") int aq_bufsz$get(@C("struct au_qctrl") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_qctrl$aq_bufsz$VH().get(seg);
        }
        public static  @C("int") int aq_bufsz$get(@C("struct au_qctrl") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_qctrl$aq_bufsz$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void aq_bufsz$set(@C("struct au_qctrl") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.au_qctrl$aq_bufsz$VH().set(seg, x);
        }
        public static void aq_bufsz$set(@C("struct au_qctrl") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.au_qctrl$aq_bufsz$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle aq_delay$VH() {
            return fuse_h_constants_3.au_qctrl$aq_delay$VH();
        }
        public static  @C("int") int aq_delay$get(@C("struct au_qctrl") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_qctrl$aq_delay$VH().get(seg);
        }
        public static  @C("int") int aq_delay$get(@C("struct au_qctrl") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_qctrl$aq_delay$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void aq_delay$set(@C("struct au_qctrl") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.au_qctrl$aq_delay$VH().set(seg, x);
        }
        public static void aq_delay$set(@C("struct au_qctrl") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.au_qctrl$aq_delay$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle aq_minfree$VH() {
            return fuse_h_constants_3.au_qctrl$aq_minfree$VH();
        }
        public static  @C("int") int aq_minfree$get(@C("struct au_qctrl") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_qctrl$aq_minfree$VH().get(seg);
        }
        public static  @C("int") int aq_minfree$get(@C("struct au_qctrl") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_qctrl$aq_minfree$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void aq_minfree$set(@C("struct au_qctrl") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.au_qctrl$aq_minfree$VH().set(seg, x);
        }
        public static void aq_minfree$set(@C("struct au_qctrl") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.au_qctrl$aq_minfree$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct au_qctrl") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct au_qctrl") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct au_qctrl[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct au_qctrl[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct au_qctrl*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct au_qctrl*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct au_qctrl") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct au_qctrl")public static class au_qctrl_t extends au_qctrl {

        /* package-private */ au_qctrl_t() {}
    }

    @C("struct audit_stat")public static class audit_stat {

        /* package-private */ audit_stat() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.audit_stat$struct$LAYOUT();
        }
        public static VarHandle as_version$VH() {
            return fuse_h_constants_3.audit_stat$as_version$VH();
        }
        public static  @C("unsigned int") int as_version$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_version$VH().get(seg);
        }
        public static  @C("unsigned int") int as_version$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_version$set(@C("struct audit_stat") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_3.audit_stat$as_version$VH().set(seg, x);
        }
        public static void as_version$set(@C("struct audit_stat") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_3.audit_stat$as_version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_numevent$VH() {
            return fuse_h_constants_3.audit_stat$as_numevent$VH();
        }
        public static  @C("unsigned int") int as_numevent$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_numevent$VH().get(seg);
        }
        public static  @C("unsigned int") int as_numevent$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_numevent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_numevent$set(@C("struct audit_stat") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_3.audit_stat$as_numevent$VH().set(seg, x);
        }
        public static void as_numevent$set(@C("struct audit_stat") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_3.audit_stat$as_numevent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_generated$VH() {
            return fuse_h_constants_3.audit_stat$as_generated$VH();
        }
        public static  @C("int") int as_generated$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_generated$VH().get(seg);
        }
        public static  @C("int") int as_generated$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_generated$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_generated$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_generated$VH().set(seg, x);
        }
        public static void as_generated$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_generated$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_nonattrib$VH() {
            return fuse_h_constants_3.audit_stat$as_nonattrib$VH();
        }
        public static  @C("int") int as_nonattrib$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_nonattrib$VH().get(seg);
        }
        public static  @C("int") int as_nonattrib$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_nonattrib$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_nonattrib$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_nonattrib$VH().set(seg, x);
        }
        public static void as_nonattrib$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_nonattrib$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_kernel$VH() {
            return fuse_h_constants_3.audit_stat$as_kernel$VH();
        }
        public static  @C("int") int as_kernel$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_kernel$VH().get(seg);
        }
        public static  @C("int") int as_kernel$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_kernel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_kernel$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_kernel$VH().set(seg, x);
        }
        public static void as_kernel$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_kernel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_audit$VH() {
            return fuse_h_constants_3.audit_stat$as_audit$VH();
        }
        public static  @C("int") int as_audit$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_audit$VH().get(seg);
        }
        public static  @C("int") int as_audit$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_audit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_audit$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_audit$VH().set(seg, x);
        }
        public static void as_audit$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_audit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_auditctl$VH() {
            return fuse_h_constants_3.audit_stat$as_auditctl$VH();
        }
        public static  @C("int") int as_auditctl$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_auditctl$VH().get(seg);
        }
        public static  @C("int") int as_auditctl$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_auditctl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_auditctl$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_auditctl$VH().set(seg, x);
        }
        public static void as_auditctl$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_auditctl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_enqueue$VH() {
            return fuse_h_constants_3.audit_stat$as_enqueue$VH();
        }
        public static  @C("int") int as_enqueue$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_enqueue$VH().get(seg);
        }
        public static  @C("int") int as_enqueue$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_enqueue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_enqueue$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_enqueue$VH().set(seg, x);
        }
        public static void as_enqueue$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_enqueue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_written$VH() {
            return fuse_h_constants_3.audit_stat$as_written$VH();
        }
        public static  @C("int") int as_written$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_written$VH().get(seg);
        }
        public static  @C("int") int as_written$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_written$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_written$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_written$VH().set(seg, x);
        }
        public static void as_written$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_written$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_wblocked$VH() {
            return fuse_h_constants_3.audit_stat$as_wblocked$VH();
        }
        public static  @C("int") int as_wblocked$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_wblocked$VH().get(seg);
        }
        public static  @C("int") int as_wblocked$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_wblocked$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_wblocked$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_wblocked$VH().set(seg, x);
        }
        public static void as_wblocked$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_wblocked$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_rblocked$VH() {
            return fuse_h_constants_3.audit_stat$as_rblocked$VH();
        }
        public static  @C("int") int as_rblocked$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_rblocked$VH().get(seg);
        }
        public static  @C("int") int as_rblocked$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_rblocked$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_rblocked$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_rblocked$VH().set(seg, x);
        }
        public static void as_rblocked$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_rblocked$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_dropped$VH() {
            return fuse_h_constants_3.audit_stat$as_dropped$VH();
        }
        public static  @C("int") int as_dropped$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_dropped$VH().get(seg);
        }
        public static  @C("int") int as_dropped$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_dropped$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_dropped$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_dropped$VH().set(seg, x);
        }
        public static void as_dropped$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_dropped$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_totalsize$VH() {
            return fuse_h_constants_3.audit_stat$as_totalsize$VH();
        }
        public static  @C("int") int as_totalsize$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_totalsize$VH().get(seg);
        }
        public static  @C("int") int as_totalsize$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_totalsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_totalsize$set(@C("struct audit_stat") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_totalsize$VH().set(seg, x);
        }
        public static void as_totalsize$set(@C("struct audit_stat") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.audit_stat$as_totalsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle as_memused$VH() {
            return fuse_h_constants_3.audit_stat$as_memused$VH();
        }
        public static  @C("unsigned int") int as_memused$get(@C("struct audit_stat") MemorySegment seg) {
            return (int)fuse_h_constants_3.audit_stat$as_memused$VH().get(seg);
        }
        public static  @C("unsigned int") int as_memused$get(@C("struct audit_stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.audit_stat$as_memused$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_memused$set(@C("struct audit_stat") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_3.audit_stat$as_memused$VH().set(seg, x);
        }
        public static void as_memused$set(@C("struct audit_stat") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_3.audit_stat$as_memused$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct audit_stat") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct audit_stat") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct audit_stat[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct audit_stat[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct audit_stat*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct audit_stat*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct audit_stat") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct audit_stat")public static class au_stat_t extends audit_stat {

        /* package-private */ au_stat_t() {}
    }

    @C("struct audit_fstat")public static class audit_fstat {

        /* package-private */ audit_fstat() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.audit_fstat$struct$LAYOUT();
        }
        public static VarHandle af_filesz$VH() {
            return fuse_h_constants_3.audit_fstat$af_filesz$VH();
        }
        public static  @C("u_int64_t") long af_filesz$get(@C("struct audit_fstat") MemorySegment seg) {
            return (long)fuse_h_constants_3.audit_fstat$af_filesz$VH().get(seg);
        }
        public static  @C("u_int64_t") long af_filesz$get(@C("struct audit_fstat") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.audit_fstat$af_filesz$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void af_filesz$set(@C("struct audit_fstat") MemorySegment seg, @C("u_int64_t") long x) {
            fuse_h_constants_3.audit_fstat$af_filesz$VH().set(seg, x);
        }
        public static void af_filesz$set(@C("struct audit_fstat") MemorySegment seg, long index, @C("u_int64_t") long x) {
            fuse_h_constants_3.audit_fstat$af_filesz$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle af_currsz$VH() {
            return fuse_h_constants_3.audit_fstat$af_currsz$VH();
        }
        public static  @C("u_int64_t") long af_currsz$get(@C("struct audit_fstat") MemorySegment seg) {
            return (long)fuse_h_constants_3.audit_fstat$af_currsz$VH().get(seg);
        }
        public static  @C("u_int64_t") long af_currsz$get(@C("struct audit_fstat") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.audit_fstat$af_currsz$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void af_currsz$set(@C("struct audit_fstat") MemorySegment seg, @C("u_int64_t") long x) {
            fuse_h_constants_3.audit_fstat$af_currsz$VH().set(seg, x);
        }
        public static void af_currsz$set(@C("struct audit_fstat") MemorySegment seg, long index, @C("u_int64_t") long x) {
            fuse_h_constants_3.audit_fstat$af_currsz$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct audit_fstat") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct audit_fstat") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct audit_fstat[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct audit_fstat[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct audit_fstat*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct audit_fstat*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct audit_fstat") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct audit_fstat")public static class au_fstat_t extends audit_fstat {

        /* package-private */ au_fstat_t() {}
    }

    @C("struct au_evclass_map")public static class au_evclass_map {

        /* package-private */ au_evclass_map() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.au_evclass_map$struct$LAYOUT();
        }
        public static VarHandle ec_number$VH() {
            return fuse_h_constants_3.au_evclass_map$ec_number$VH();
        }
        public static  @C("au_event_t") short ec_number$get(@C("struct au_evclass_map") MemorySegment seg) {
            return (short)fuse_h_constants_3.au_evclass_map$ec_number$VH().get(seg);
        }
        public static  @C("au_event_t") short ec_number$get(@C("struct au_evclass_map") MemorySegment seg, long index) {
            return (short)fuse_h_constants_3.au_evclass_map$ec_number$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ec_number$set(@C("struct au_evclass_map") MemorySegment seg, @C("au_event_t") short x) {
            fuse_h_constants_3.au_evclass_map$ec_number$VH().set(seg, x);
        }
        public static void ec_number$set(@C("struct au_evclass_map") MemorySegment seg, long index, @C("au_event_t") short x) {
            fuse_h_constants_3.au_evclass_map$ec_number$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ec_class$VH() {
            return fuse_h_constants_3.au_evclass_map$ec_class$VH();
        }
        public static  @C("au_class_t") int ec_class$get(@C("struct au_evclass_map") MemorySegment seg) {
            return (int)fuse_h_constants_3.au_evclass_map$ec_class$VH().get(seg);
        }
        public static  @C("au_class_t") int ec_class$get(@C("struct au_evclass_map") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.au_evclass_map$ec_class$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ec_class$set(@C("struct au_evclass_map") MemorySegment seg, @C("au_class_t") int x) {
            fuse_h_constants_3.au_evclass_map$ec_class$VH().set(seg, x);
        }
        public static void ec_class$set(@C("struct au_evclass_map") MemorySegment seg, long index, @C("au_class_t") int x) {
            fuse_h_constants_3.au_evclass_map$ec_class$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct au_evclass_map") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct au_evclass_map") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct au_evclass_map[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct au_evclass_map[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct au_evclass_map*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct au_evclass_map*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct au_evclass_map") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct au_evclass_map")public static class au_evclass_map_t extends au_evclass_map {

        /* package-private */ au_evclass_map_t() {}
    }

    @C("struct mach_port_status")public static class mach_port_status {

        /* package-private */ mach_port_status() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.mach_port_status$struct$LAYOUT();
        }
        public static VarHandle mps_pset$VH() {
            return fuse_h_constants_3.mach_port_status$mps_pset$VH();
        }
        public static  @C("mach_port_rights_t") int mps_pset$get(@C("struct mach_port_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_status$mps_pset$VH().get(seg);
        }
        public static  @C("mach_port_rights_t") int mps_pset$get(@C("struct mach_port_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_status$mps_pset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mps_pset$set(@C("struct mach_port_status") MemorySegment seg, @C("mach_port_rights_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_pset$VH().set(seg, x);
        }
        public static void mps_pset$set(@C("struct mach_port_status") MemorySegment seg, long index, @C("mach_port_rights_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_pset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mps_seqno$VH() {
            return fuse_h_constants_3.mach_port_status$mps_seqno$VH();
        }
        public static  @C("mach_port_seqno_t") int mps_seqno$get(@C("struct mach_port_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_status$mps_seqno$VH().get(seg);
        }
        public static  @C("mach_port_seqno_t") int mps_seqno$get(@C("struct mach_port_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_status$mps_seqno$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mps_seqno$set(@C("struct mach_port_status") MemorySegment seg, @C("mach_port_seqno_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_seqno$VH().set(seg, x);
        }
        public static void mps_seqno$set(@C("struct mach_port_status") MemorySegment seg, long index, @C("mach_port_seqno_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_seqno$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mps_mscount$VH() {
            return fuse_h_constants_3.mach_port_status$mps_mscount$VH();
        }
        public static  @C("mach_port_mscount_t") int mps_mscount$get(@C("struct mach_port_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_status$mps_mscount$VH().get(seg);
        }
        public static  @C("mach_port_mscount_t") int mps_mscount$get(@C("struct mach_port_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_status$mps_mscount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mps_mscount$set(@C("struct mach_port_status") MemorySegment seg, @C("mach_port_mscount_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_mscount$VH().set(seg, x);
        }
        public static void mps_mscount$set(@C("struct mach_port_status") MemorySegment seg, long index, @C("mach_port_mscount_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_mscount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mps_qlimit$VH() {
            return fuse_h_constants_3.mach_port_status$mps_qlimit$VH();
        }
        public static  @C("mach_port_msgcount_t") int mps_qlimit$get(@C("struct mach_port_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_status$mps_qlimit$VH().get(seg);
        }
        public static  @C("mach_port_msgcount_t") int mps_qlimit$get(@C("struct mach_port_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_status$mps_qlimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mps_qlimit$set(@C("struct mach_port_status") MemorySegment seg, @C("mach_port_msgcount_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_qlimit$VH().set(seg, x);
        }
        public static void mps_qlimit$set(@C("struct mach_port_status") MemorySegment seg, long index, @C("mach_port_msgcount_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_qlimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mps_msgcount$VH() {
            return fuse_h_constants_3.mach_port_status$mps_msgcount$VH();
        }
        public static  @C("mach_port_msgcount_t") int mps_msgcount$get(@C("struct mach_port_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_status$mps_msgcount$VH().get(seg);
        }
        public static  @C("mach_port_msgcount_t") int mps_msgcount$get(@C("struct mach_port_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_status$mps_msgcount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mps_msgcount$set(@C("struct mach_port_status") MemorySegment seg, @C("mach_port_msgcount_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_msgcount$VH().set(seg, x);
        }
        public static void mps_msgcount$set(@C("struct mach_port_status") MemorySegment seg, long index, @C("mach_port_msgcount_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_msgcount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mps_sorights$VH() {
            return fuse_h_constants_3.mach_port_status$mps_sorights$VH();
        }
        public static  @C("mach_port_rights_t") int mps_sorights$get(@C("struct mach_port_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_status$mps_sorights$VH().get(seg);
        }
        public static  @C("mach_port_rights_t") int mps_sorights$get(@C("struct mach_port_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_status$mps_sorights$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mps_sorights$set(@C("struct mach_port_status") MemorySegment seg, @C("mach_port_rights_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_sorights$VH().set(seg, x);
        }
        public static void mps_sorights$set(@C("struct mach_port_status") MemorySegment seg, long index, @C("mach_port_rights_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_sorights$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mps_srights$VH() {
            return fuse_h_constants_3.mach_port_status$mps_srights$VH();
        }
        public static  @C("boolean_t") int mps_srights$get(@C("struct mach_port_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_status$mps_srights$VH().get(seg);
        }
        public static  @C("boolean_t") int mps_srights$get(@C("struct mach_port_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_status$mps_srights$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mps_srights$set(@C("struct mach_port_status") MemorySegment seg, @C("boolean_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_srights$VH().set(seg, x);
        }
        public static void mps_srights$set(@C("struct mach_port_status") MemorySegment seg, long index, @C("boolean_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_srights$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mps_pdrequest$VH() {
            return fuse_h_constants_3.mach_port_status$mps_pdrequest$VH();
        }
        public static  @C("boolean_t") int mps_pdrequest$get(@C("struct mach_port_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_status$mps_pdrequest$VH().get(seg);
        }
        public static  @C("boolean_t") int mps_pdrequest$get(@C("struct mach_port_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_status$mps_pdrequest$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mps_pdrequest$set(@C("struct mach_port_status") MemorySegment seg, @C("boolean_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_pdrequest$VH().set(seg, x);
        }
        public static void mps_pdrequest$set(@C("struct mach_port_status") MemorySegment seg, long index, @C("boolean_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_pdrequest$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mps_nsrequest$VH() {
            return fuse_h_constants_3.mach_port_status$mps_nsrequest$VH();
        }
        public static  @C("boolean_t") int mps_nsrequest$get(@C("struct mach_port_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_status$mps_nsrequest$VH().get(seg);
        }
        public static  @C("boolean_t") int mps_nsrequest$get(@C("struct mach_port_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_status$mps_nsrequest$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mps_nsrequest$set(@C("struct mach_port_status") MemorySegment seg, @C("boolean_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_nsrequest$VH().set(seg, x);
        }
        public static void mps_nsrequest$set(@C("struct mach_port_status") MemorySegment seg, long index, @C("boolean_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_nsrequest$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mps_flags$VH() {
            return fuse_h_constants_3.mach_port_status$mps_flags$VH();
        }
        public static  @C("natural_t") int mps_flags$get(@C("struct mach_port_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_status$mps_flags$VH().get(seg);
        }
        public static  @C("natural_t") int mps_flags$get(@C("struct mach_port_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_status$mps_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mps_flags$set(@C("struct mach_port_status") MemorySegment seg, @C("natural_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_flags$VH().set(seg, x);
        }
        public static void mps_flags$set(@C("struct mach_port_status") MemorySegment seg, long index, @C("natural_t") int x) {
            fuse_h_constants_3.mach_port_status$mps_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct mach_port_status") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct mach_port_status") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct mach_port_status[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct mach_port_status[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct mach_port_status*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct mach_port_status*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct mach_port_status") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct mach_port_status")public static class mach_port_status_t extends mach_port_status {

        /* package-private */ mach_port_status_t() {}
    }

    @C("struct mach_port_limits")public static class mach_port_limits {

        /* package-private */ mach_port_limits() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.mach_port_limits$struct$LAYOUT();
        }
        public static VarHandle mpl_qlimit$VH() {
            return fuse_h_constants_3.mach_port_limits$mpl_qlimit$VH();
        }
        public static  @C("mach_port_msgcount_t") int mpl_qlimit$get(@C("struct mach_port_limits") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_limits$mpl_qlimit$VH().get(seg);
        }
        public static  @C("mach_port_msgcount_t") int mpl_qlimit$get(@C("struct mach_port_limits") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_limits$mpl_qlimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mpl_qlimit$set(@C("struct mach_port_limits") MemorySegment seg, @C("mach_port_msgcount_t") int x) {
            fuse_h_constants_3.mach_port_limits$mpl_qlimit$VH().set(seg, x);
        }
        public static void mpl_qlimit$set(@C("struct mach_port_limits") MemorySegment seg, long index, @C("mach_port_msgcount_t") int x) {
            fuse_h_constants_3.mach_port_limits$mpl_qlimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct mach_port_limits") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct mach_port_limits") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct mach_port_limits[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct mach_port_limits[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct mach_port_limits*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct mach_port_limits*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct mach_port_limits") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct mach_port_limits")public static class mach_port_limits_t extends mach_port_limits {

        /* package-private */ mach_port_limits_t() {}
    }

    @C("struct mach_port_info_ext")public static class mach_port_info_ext {

        /* package-private */ mach_port_info_ext() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.mach_port_info_ext$struct$LAYOUT();
        }
        public static MemorySegment mpie_status$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 40));
        }
        public static VarHandle mpie_boost_cnt$VH() {
            return fuse_h_constants_3.mach_port_info_ext$mpie_boost_cnt$VH();
        }
        public static  @C("mach_port_msgcount_t") int mpie_boost_cnt$get(@C("struct mach_port_info_ext") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_info_ext$mpie_boost_cnt$VH().get(seg);
        }
        public static  @C("mach_port_msgcount_t") int mpie_boost_cnt$get(@C("struct mach_port_info_ext") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_info_ext$mpie_boost_cnt$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mpie_boost_cnt$set(@C("struct mach_port_info_ext") MemorySegment seg, @C("mach_port_msgcount_t") int x) {
            fuse_h_constants_3.mach_port_info_ext$mpie_boost_cnt$VH().set(seg, x);
        }
        public static void mpie_boost_cnt$set(@C("struct mach_port_info_ext") MemorySegment seg, long index, @C("mach_port_msgcount_t") int x) {
            fuse_h_constants_3.mach_port_info_ext$mpie_boost_cnt$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(44, 24));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct mach_port_info_ext") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct mach_port_info_ext") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct mach_port_info_ext[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct mach_port_info_ext[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct mach_port_info_ext*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct mach_port_info_ext*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct mach_port_info_ext") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct mach_port_info_ext")public static class mach_port_info_ext_t extends mach_port_info_ext {

        /* package-private */ mach_port_info_ext_t() {}
    }

    @C("struct mach_port_qos")public static class mach_port_qos {

        /* package-private */ mach_port_qos() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.mach_port_qos$struct$LAYOUT();
        }
        public static VarHandle len$VH() {
            return fuse_h_constants_3.mach_port_qos$len$VH();
        }
        public static  @C("natural_t") int len$get(@C("struct mach_port_qos") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_qos$len$VH().get(seg);
        }
        public static  @C("natural_t") int len$get(@C("struct mach_port_qos") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_qos$len$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void len$set(@C("struct mach_port_qos") MemorySegment seg, @C("natural_t") int x) {
            fuse_h_constants_3.mach_port_qos$len$VH().set(seg, x);
        }
        public static void len$set(@C("struct mach_port_qos") MemorySegment seg, long index, @C("natural_t") int x) {
            fuse_h_constants_3.mach_port_qos$len$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct mach_port_qos") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct mach_port_qos") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct mach_port_qos[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct mach_port_qos[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct mach_port_qos*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct mach_port_qos*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct mach_port_qos") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct mach_port_qos")public static class mach_port_qos_t extends mach_port_qos {

        /* package-private */ mach_port_qos_t() {}
    }

    @C("struct mach_port_options")public static class mach_port_options {

        /* package-private */ mach_port_options() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.mach_port_options$struct$LAYOUT();
        }
        public static VarHandle flags$VH() {
            return fuse_h_constants_3.mach_port_options$flags$VH();
        }
        public static  @C("uint32_t") int flags$get(@C("struct mach_port_options") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_options$flags$VH().get(seg);
        }
        public static  @C("uint32_t") int flags$get(@C("struct mach_port_options") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_options$flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flags$set(@C("struct mach_port_options") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.mach_port_options$flags$VH().set(seg, x);
        }
        public static void flags$set(@C("struct mach_port_options") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.mach_port_options$flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment mpl$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 4));
        }
        public static MemorySegment reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));
        }
        public static VarHandle work_interval_port$VH() {
            return fuse_h_constants_3.mach_port_options$work_interval_port$VH();
        }
        public static  @C("mach_port_name_t") int work_interval_port$get(@C("struct mach_port_options") MemorySegment seg) {
            return (int)fuse_h_constants_3.mach_port_options$work_interval_port$VH().get(seg);
        }
        public static  @C("mach_port_name_t") int work_interval_port$get(@C("struct mach_port_options") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.mach_port_options$work_interval_port$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void work_interval_port$set(@C("struct mach_port_options") MemorySegment seg, @C("mach_port_name_t") int x) {
            fuse_h_constants_3.mach_port_options$work_interval_port$VH().set(seg, x);
        }
        public static void work_interval_port$set(@C("struct mach_port_options") MemorySegment seg, long index, @C("mach_port_name_t") int x) {
            fuse_h_constants_3.mach_port_options$work_interval_port$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct mach_port_options") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct mach_port_options") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct mach_port_options[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct mach_port_options[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct mach_port_options*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct mach_port_options*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct mach_port_options") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct mach_port_options")public static class mach_port_options_t extends mach_port_options {

        /* package-private */ mach_port_options_t() {}
    }

    @C("struct xucred")public static class xucred {

        /* package-private */ xucred() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.xucred$struct$LAYOUT();
        }
        public static VarHandle cr_version$VH() {
            return fuse_h_constants_3.xucred$cr_version$VH();
        }
        public static  @C("u_int") int cr_version$get(@C("struct xucred") MemorySegment seg) {
            return (int)fuse_h_constants_3.xucred$cr_version$VH().get(seg);
        }
        public static  @C("u_int") int cr_version$get(@C("struct xucred") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.xucred$cr_version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cr_version$set(@C("struct xucred") MemorySegment seg, @C("u_int") int x) {
            fuse_h_constants_3.xucred$cr_version$VH().set(seg, x);
        }
        public static void cr_version$set(@C("struct xucred") MemorySegment seg, long index, @C("u_int") int x) {
            fuse_h_constants_3.xucred$cr_version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cr_uid$VH() {
            return fuse_h_constants_3.xucred$cr_uid$VH();
        }
        public static  @C("uid_t") int cr_uid$get(@C("struct xucred") MemorySegment seg) {
            return (int)fuse_h_constants_3.xucred$cr_uid$VH().get(seg);
        }
        public static  @C("uid_t") int cr_uid$get(@C("struct xucred") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.xucred$cr_uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cr_uid$set(@C("struct xucred") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_3.xucred$cr_uid$VH().set(seg, x);
        }
        public static void cr_uid$set(@C("struct xucred") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_3.xucred$cr_uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cr_ngroups$VH() {
            return fuse_h_constants_3.xucred$cr_ngroups$VH();
        }
        public static  @C("short") short cr_ngroups$get(@C("struct xucred") MemorySegment seg) {
            return (short)fuse_h_constants_3.xucred$cr_ngroups$VH().get(seg);
        }
        public static  @C("short") short cr_ngroups$get(@C("struct xucred") MemorySegment seg, long index) {
            return (short)fuse_h_constants_3.xucred$cr_ngroups$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cr_ngroups$set(@C("struct xucred") MemorySegment seg, @C("short") short x) {
            fuse_h_constants_3.xucred$cr_ngroups$VH().set(seg, x);
        }
        public static void cr_ngroups$set(@C("struct xucred") MemorySegment seg, long index, @C("short") short x) {
            fuse_h_constants_3.xucred$cr_ngroups$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment cr_groups$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct xucred") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct xucred") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct xucred[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct xucred[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct xucred*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct xucred*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct xucred") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct timeval")public static class timeval {

        /* package-private */ timeval() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.timeval$struct$LAYOUT();
        }
        public static VarHandle tv_sec$VH() {
            return fuse_h_constants_3.timeval$tv_sec$VH();
        }
        public static  @C("__darwin_time_t") long tv_sec$get(@C("struct timeval") MemorySegment seg) {
            return (long)fuse_h_constants_3.timeval$tv_sec$VH().get(seg);
        }
        public static  @C("__darwin_time_t") long tv_sec$get(@C("struct timeval") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.timeval$tv_sec$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tv_sec$set(@C("struct timeval") MemorySegment seg, @C("__darwin_time_t") long x) {
            fuse_h_constants_3.timeval$tv_sec$VH().set(seg, x);
        }
        public static void tv_sec$set(@C("struct timeval") MemorySegment seg, long index, @C("__darwin_time_t") long x) {
            fuse_h_constants_3.timeval$tv_sec$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tv_usec$VH() {
            return fuse_h_constants_3.timeval$tv_usec$VH();
        }
        public static  @C("__darwin_suseconds_t") int tv_usec$get(@C("struct timeval") MemorySegment seg) {
            return (int)fuse_h_constants_3.timeval$tv_usec$VH().get(seg);
        }
        public static  @C("__darwin_suseconds_t") int tv_usec$get(@C("struct timeval") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.timeval$tv_usec$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tv_usec$set(@C("struct timeval") MemorySegment seg, @C("__darwin_suseconds_t") int x) {
            fuse_h_constants_3.timeval$tv_usec$VH().set(seg, x);
        }
        public static void tv_usec$set(@C("struct timeval") MemorySegment seg, long index, @C("__darwin_suseconds_t") int x) {
            fuse_h_constants_3.timeval$tv_usec$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct timeval") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct timeval") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct timeval[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct timeval[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct timeval*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct timeval*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct timeval") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct timeval64")public static class timeval64 {

        /* package-private */ timeval64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.timeval64$struct$LAYOUT();
        }
        public static VarHandle tv_sec$VH() {
            return fuse_h_constants_3.timeval64$tv_sec$VH();
        }
        public static  @C("__int64_t") long tv_sec$get(@C("struct timeval64") MemorySegment seg) {
            return (long)fuse_h_constants_3.timeval64$tv_sec$VH().get(seg);
        }
        public static  @C("__int64_t") long tv_sec$get(@C("struct timeval64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.timeval64$tv_sec$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tv_sec$set(@C("struct timeval64") MemorySegment seg, @C("__int64_t") long x) {
            fuse_h_constants_3.timeval64$tv_sec$VH().set(seg, x);
        }
        public static void tv_sec$set(@C("struct timeval64") MemorySegment seg, long index, @C("__int64_t") long x) {
            fuse_h_constants_3.timeval64$tv_sec$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tv_usec$VH() {
            return fuse_h_constants_3.timeval64$tv_usec$VH();
        }
        public static  @C("__int64_t") long tv_usec$get(@C("struct timeval64") MemorySegment seg) {
            return (long)fuse_h_constants_3.timeval64$tv_usec$VH().get(seg);
        }
        public static  @C("__int64_t") long tv_usec$get(@C("struct timeval64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.timeval64$tv_usec$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tv_usec$set(@C("struct timeval64") MemorySegment seg, @C("__int64_t") long x) {
            fuse_h_constants_3.timeval64$tv_usec$VH().set(seg, x);
        }
        public static void tv_usec$set(@C("struct timeval64") MemorySegment seg, long index, @C("__int64_t") long x) {
            fuse_h_constants_3.timeval64$tv_usec$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct timeval64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct timeval64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct timeval64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct timeval64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct timeval64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct timeval64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct timeval64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct itimerval")public static class itimerval {

        /* package-private */ itimerval() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.itimerval$struct$LAYOUT();
        }
        public static MemorySegment it_interval$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment it_value$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct itimerval") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct itimerval") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct itimerval[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct itimerval[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct itimerval*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct itimerval*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct itimerval") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct timezone")public static class timezone {

        /* package-private */ timezone() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.timezone$struct$LAYOUT();
        }
        public static VarHandle tz_minuteswest$VH() {
            return fuse_h_constants_3.timezone$tz_minuteswest$VH();
        }
        public static  @C("int") int tz_minuteswest$get(@C("struct timezone") MemorySegment seg) {
            return (int)fuse_h_constants_3.timezone$tz_minuteswest$VH().get(seg);
        }
        public static  @C("int") int tz_minuteswest$get(@C("struct timezone") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.timezone$tz_minuteswest$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tz_minuteswest$set(@C("struct timezone") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.timezone$tz_minuteswest$VH().set(seg, x);
        }
        public static void tz_minuteswest$set(@C("struct timezone") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.timezone$tz_minuteswest$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tz_dsttime$VH() {
            return fuse_h_constants_3.timezone$tz_dsttime$VH();
        }
        public static  @C("int") int tz_dsttime$get(@C("struct timezone") MemorySegment seg) {
            return (int)fuse_h_constants_3.timezone$tz_dsttime$VH().get(seg);
        }
        public static  @C("int") int tz_dsttime$get(@C("struct timezone") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.timezone$tz_dsttime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tz_dsttime$set(@C("struct timezone") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.timezone$tz_dsttime$VH().set(seg, x);
        }
        public static void tz_dsttime$set(@C("struct timezone") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.timezone$tz_dsttime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct timezone") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct timezone") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct timezone[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct timezone[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct timezone*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct timezone*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct timezone") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct clockinfo")public static class clockinfo {

        /* package-private */ clockinfo() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.clockinfo$struct$LAYOUT();
        }
        public static VarHandle hz$VH() {
            return fuse_h_constants_3.clockinfo$hz$VH();
        }
        public static  @C("int") int hz$get(@C("struct clockinfo") MemorySegment seg) {
            return (int)fuse_h_constants_3.clockinfo$hz$VH().get(seg);
        }
        public static  @C("int") int hz$get(@C("struct clockinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.clockinfo$hz$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hz$set(@C("struct clockinfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.clockinfo$hz$VH().set(seg, x);
        }
        public static void hz$set(@C("struct clockinfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.clockinfo$hz$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tick$VH() {
            return fuse_h_constants_3.clockinfo$tick$VH();
        }
        public static  @C("int") int tick$get(@C("struct clockinfo") MemorySegment seg) {
            return (int)fuse_h_constants_3.clockinfo$tick$VH().get(seg);
        }
        public static  @C("int") int tick$get(@C("struct clockinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.clockinfo$tick$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tick$set(@C("struct clockinfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.clockinfo$tick$VH().set(seg, x);
        }
        public static void tick$set(@C("struct clockinfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.clockinfo$tick$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tickadj$VH() {
            return fuse_h_constants_3.clockinfo$tickadj$VH();
        }
        public static  @C("int") int tickadj$get(@C("struct clockinfo") MemorySegment seg) {
            return (int)fuse_h_constants_3.clockinfo$tickadj$VH().get(seg);
        }
        public static  @C("int") int tickadj$get(@C("struct clockinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.clockinfo$tickadj$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tickadj$set(@C("struct clockinfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.clockinfo$tickadj$VH().set(seg, x);
        }
        public static void tickadj$set(@C("struct clockinfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.clockinfo$tickadj$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle stathz$VH() {
            return fuse_h_constants_3.clockinfo$stathz$VH();
        }
        public static  @C("int") int stathz$get(@C("struct clockinfo") MemorySegment seg) {
            return (int)fuse_h_constants_3.clockinfo$stathz$VH().get(seg);
        }
        public static  @C("int") int stathz$get(@C("struct clockinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.clockinfo$stathz$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void stathz$set(@C("struct clockinfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.clockinfo$stathz$VH().set(seg, x);
        }
        public static void stathz$set(@C("struct clockinfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.clockinfo$stathz$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle profhz$VH() {
            return fuse_h_constants_3.clockinfo$profhz$VH();
        }
        public static  @C("int") int profhz$get(@C("struct clockinfo") MemorySegment seg) {
            return (int)fuse_h_constants_3.clockinfo$profhz$VH().get(seg);
        }
        public static  @C("int") int profhz$get(@C("struct clockinfo") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.clockinfo$profhz$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void profhz$set(@C("struct clockinfo") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.clockinfo$profhz$VH().set(seg, x);
        }
        public static void profhz$set(@C("struct clockinfo") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.clockinfo$profhz$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct clockinfo") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct clockinfo") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct clockinfo[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct clockinfo[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct clockinfo*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct clockinfo*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct clockinfo") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fsobj_id")public static class fsobj_id {

        /* package-private */ fsobj_id() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.fsobj_id$struct$LAYOUT();
        }
        public static VarHandle fid_objno$VH() {
            return fuse_h_constants_3.fsobj_id$fid_objno$VH();
        }
        public static  @C("u_int32_t") int fid_objno$get(@C("struct fsobj_id") MemorySegment seg) {
            return (int)fuse_h_constants_3.fsobj_id$fid_objno$VH().get(seg);
        }
        public static  @C("u_int32_t") int fid_objno$get(@C("struct fsobj_id") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.fsobj_id$fid_objno$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fid_objno$set(@C("struct fsobj_id") MemorySegment seg, @C("u_int32_t") int x) {
            fuse_h_constants_3.fsobj_id$fid_objno$VH().set(seg, x);
        }
        public static void fid_objno$set(@C("struct fsobj_id") MemorySegment seg, long index, @C("u_int32_t") int x) {
            fuse_h_constants_3.fsobj_id$fid_objno$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fid_generation$VH() {
            return fuse_h_constants_3.fsobj_id$fid_generation$VH();
        }
        public static  @C("u_int32_t") int fid_generation$get(@C("struct fsobj_id") MemorySegment seg) {
            return (int)fuse_h_constants_3.fsobj_id$fid_generation$VH().get(seg);
        }
        public static  @C("u_int32_t") int fid_generation$get(@C("struct fsobj_id") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.fsobj_id$fid_generation$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fid_generation$set(@C("struct fsobj_id") MemorySegment seg, @C("u_int32_t") int x) {
            fuse_h_constants_3.fsobj_id$fid_generation$VH().set(seg, x);
        }
        public static void fid_generation$set(@C("struct fsobj_id") MemorySegment seg, long index, @C("u_int32_t") int x) {
            fuse_h_constants_3.fsobj_id$fid_generation$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fsobj_id") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fsobj_id") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fsobj_id[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fsobj_id[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fsobj_id*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fsobj_id*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fsobj_id") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fsobj_id")public static class fsobj_id_t extends fsobj_id {

        /* package-private */ fsobj_id_t() {}
    }

    @C("struct attrlist")public static class attrlist {

        /* package-private */ attrlist() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.attrlist$struct$LAYOUT();
        }
        public static VarHandle bitmapcount$VH() {
            return fuse_h_constants_3.attrlist$bitmapcount$VH();
        }
        public static  @C("u_short") short bitmapcount$get(@C("struct attrlist") MemorySegment seg) {
            return (short)fuse_h_constants_3.attrlist$bitmapcount$VH().get(seg);
        }
        public static  @C("u_short") short bitmapcount$get(@C("struct attrlist") MemorySegment seg, long index) {
            return (short)fuse_h_constants_3.attrlist$bitmapcount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bitmapcount$set(@C("struct attrlist") MemorySegment seg, @C("u_short") short x) {
            fuse_h_constants_3.attrlist$bitmapcount$VH().set(seg, x);
        }
        public static void bitmapcount$set(@C("struct attrlist") MemorySegment seg, long index, @C("u_short") short x) {
            fuse_h_constants_3.attrlist$bitmapcount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle reserved$VH() {
            return fuse_h_constants_3.attrlist$reserved$VH();
        }
        public static  @C("u_int16_t") short reserved$get(@C("struct attrlist") MemorySegment seg) {
            return (short)fuse_h_constants_3.attrlist$reserved$VH().get(seg);
        }
        public static  @C("u_int16_t") short reserved$get(@C("struct attrlist") MemorySegment seg, long index) {
            return (short)fuse_h_constants_3.attrlist$reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void reserved$set(@C("struct attrlist") MemorySegment seg, @C("u_int16_t") short x) {
            fuse_h_constants_3.attrlist$reserved$VH().set(seg, x);
        }
        public static void reserved$set(@C("struct attrlist") MemorySegment seg, long index, @C("u_int16_t") short x) {
            fuse_h_constants_3.attrlist$reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle commonattr$VH() {
            return fuse_h_constants_3.attrlist$commonattr$VH();
        }
        public static  @C("attrgroup_t") int commonattr$get(@C("struct attrlist") MemorySegment seg) {
            return (int)fuse_h_constants_3.attrlist$commonattr$VH().get(seg);
        }
        public static  @C("attrgroup_t") int commonattr$get(@C("struct attrlist") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attrlist$commonattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void commonattr$set(@C("struct attrlist") MemorySegment seg, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attrlist$commonattr$VH().set(seg, x);
        }
        public static void commonattr$set(@C("struct attrlist") MemorySegment seg, long index, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attrlist$commonattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle volattr$VH() {
            return fuse_h_constants_3.attrlist$volattr$VH();
        }
        public static  @C("attrgroup_t") int volattr$get(@C("struct attrlist") MemorySegment seg) {
            return (int)fuse_h_constants_3.attrlist$volattr$VH().get(seg);
        }
        public static  @C("attrgroup_t") int volattr$get(@C("struct attrlist") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attrlist$volattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void volattr$set(@C("struct attrlist") MemorySegment seg, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attrlist$volattr$VH().set(seg, x);
        }
        public static void volattr$set(@C("struct attrlist") MemorySegment seg, long index, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attrlist$volattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dirattr$VH() {
            return fuse_h_constants_3.attrlist$dirattr$VH();
        }
        public static  @C("attrgroup_t") int dirattr$get(@C("struct attrlist") MemorySegment seg) {
            return (int)fuse_h_constants_3.attrlist$dirattr$VH().get(seg);
        }
        public static  @C("attrgroup_t") int dirattr$get(@C("struct attrlist") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attrlist$dirattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dirattr$set(@C("struct attrlist") MemorySegment seg, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attrlist$dirattr$VH().set(seg, x);
        }
        public static void dirattr$set(@C("struct attrlist") MemorySegment seg, long index, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attrlist$dirattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fileattr$VH() {
            return fuse_h_constants_3.attrlist$fileattr$VH();
        }
        public static  @C("attrgroup_t") int fileattr$get(@C("struct attrlist") MemorySegment seg) {
            return (int)fuse_h_constants_3.attrlist$fileattr$VH().get(seg);
        }
        public static  @C("attrgroup_t") int fileattr$get(@C("struct attrlist") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attrlist$fileattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fileattr$set(@C("struct attrlist") MemorySegment seg, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attrlist$fileattr$VH().set(seg, x);
        }
        public static void fileattr$set(@C("struct attrlist") MemorySegment seg, long index, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attrlist$fileattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle forkattr$VH() {
            return fuse_h_constants_3.attrlist$forkattr$VH();
        }
        public static  @C("attrgroup_t") int forkattr$get(@C("struct attrlist") MemorySegment seg) {
            return (int)fuse_h_constants_3.attrlist$forkattr$VH().get(seg);
        }
        public static  @C("attrgroup_t") int forkattr$get(@C("struct attrlist") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attrlist$forkattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void forkattr$set(@C("struct attrlist") MemorySegment seg, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attrlist$forkattr$VH().set(seg, x);
        }
        public static void forkattr$set(@C("struct attrlist") MemorySegment seg, long index, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attrlist$forkattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct attrlist") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct attrlist") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct attrlist[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct attrlist[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct attrlist*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct attrlist*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct attrlist") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct attribute_set")public static class attribute_set {

        /* package-private */ attribute_set() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.attribute_set$struct$LAYOUT();
        }
        public static VarHandle commonattr$VH() {
            return fuse_h_constants_3.attribute_set$commonattr$VH();
        }
        public static  @C("attrgroup_t") int commonattr$get(@C("struct attribute_set") MemorySegment seg) {
            return (int)fuse_h_constants_3.attribute_set$commonattr$VH().get(seg);
        }
        public static  @C("attrgroup_t") int commonattr$get(@C("struct attribute_set") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attribute_set$commonattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void commonattr$set(@C("struct attribute_set") MemorySegment seg, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attribute_set$commonattr$VH().set(seg, x);
        }
        public static void commonattr$set(@C("struct attribute_set") MemorySegment seg, long index, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attribute_set$commonattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle volattr$VH() {
            return fuse_h_constants_3.attribute_set$volattr$VH();
        }
        public static  @C("attrgroup_t") int volattr$get(@C("struct attribute_set") MemorySegment seg) {
            return (int)fuse_h_constants_3.attribute_set$volattr$VH().get(seg);
        }
        public static  @C("attrgroup_t") int volattr$get(@C("struct attribute_set") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attribute_set$volattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void volattr$set(@C("struct attribute_set") MemorySegment seg, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attribute_set$volattr$VH().set(seg, x);
        }
        public static void volattr$set(@C("struct attribute_set") MemorySegment seg, long index, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attribute_set$volattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dirattr$VH() {
            return fuse_h_constants_3.attribute_set$dirattr$VH();
        }
        public static  @C("attrgroup_t") int dirattr$get(@C("struct attribute_set") MemorySegment seg) {
            return (int)fuse_h_constants_3.attribute_set$dirattr$VH().get(seg);
        }
        public static  @C("attrgroup_t") int dirattr$get(@C("struct attribute_set") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attribute_set$dirattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dirattr$set(@C("struct attribute_set") MemorySegment seg, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attribute_set$dirattr$VH().set(seg, x);
        }
        public static void dirattr$set(@C("struct attribute_set") MemorySegment seg, long index, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attribute_set$dirattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fileattr$VH() {
            return fuse_h_constants_3.attribute_set$fileattr$VH();
        }
        public static  @C("attrgroup_t") int fileattr$get(@C("struct attribute_set") MemorySegment seg) {
            return (int)fuse_h_constants_3.attribute_set$fileattr$VH().get(seg);
        }
        public static  @C("attrgroup_t") int fileattr$get(@C("struct attribute_set") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attribute_set$fileattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fileattr$set(@C("struct attribute_set") MemorySegment seg, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attribute_set$fileattr$VH().set(seg, x);
        }
        public static void fileattr$set(@C("struct attribute_set") MemorySegment seg, long index, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attribute_set$fileattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle forkattr$VH() {
            return fuse_h_constants_3.attribute_set$forkattr$VH();
        }
        public static  @C("attrgroup_t") int forkattr$get(@C("struct attribute_set") MemorySegment seg) {
            return (int)fuse_h_constants_3.attribute_set$forkattr$VH().get(seg);
        }
        public static  @C("attrgroup_t") int forkattr$get(@C("struct attribute_set") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attribute_set$forkattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void forkattr$set(@C("struct attribute_set") MemorySegment seg, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attribute_set$forkattr$VH().set(seg, x);
        }
        public static void forkattr$set(@C("struct attribute_set") MemorySegment seg, long index, @C("attrgroup_t") int x) {
            fuse_h_constants_3.attribute_set$forkattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct attribute_set") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct attribute_set") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct attribute_set[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct attribute_set[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct attribute_set*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct attribute_set*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct attribute_set") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct attribute_set")public static class attribute_set_t extends attribute_set {

        /* package-private */ attribute_set_t() {}
    }

    @C("struct attrreference")public static class attrreference {

        /* package-private */ attrreference() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.attrreference$struct$LAYOUT();
        }
        public static VarHandle attr_dataoffset$VH() {
            return fuse_h_constants_3.attrreference$attr_dataoffset$VH();
        }
        public static  @C("int32_t") int attr_dataoffset$get(@C("struct attrreference") MemorySegment seg) {
            return (int)fuse_h_constants_3.attrreference$attr_dataoffset$VH().get(seg);
        }
        public static  @C("int32_t") int attr_dataoffset$get(@C("struct attrreference") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attrreference$attr_dataoffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void attr_dataoffset$set(@C("struct attrreference") MemorySegment seg, @C("int32_t") int x) {
            fuse_h_constants_3.attrreference$attr_dataoffset$VH().set(seg, x);
        }
        public static void attr_dataoffset$set(@C("struct attrreference") MemorySegment seg, long index, @C("int32_t") int x) {
            fuse_h_constants_3.attrreference$attr_dataoffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle attr_length$VH() {
            return fuse_h_constants_3.attrreference$attr_length$VH();
        }
        public static  @C("u_int32_t") int attr_length$get(@C("struct attrreference") MemorySegment seg) {
            return (int)fuse_h_constants_3.attrreference$attr_length$VH().get(seg);
        }
        public static  @C("u_int32_t") int attr_length$get(@C("struct attrreference") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.attrreference$attr_length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void attr_length$set(@C("struct attrreference") MemorySegment seg, @C("u_int32_t") int x) {
            fuse_h_constants_3.attrreference$attr_length$VH().set(seg, x);
        }
        public static void attr_length$set(@C("struct attrreference") MemorySegment seg, long index, @C("u_int32_t") int x) {
            fuse_h_constants_3.attrreference$attr_length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct attrreference") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct attrreference") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct attrreference[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct attrreference[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct attrreference*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct attrreference*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct attrreference") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct attrreference")public static class attrreference_t extends attrreference {

        /* package-private */ attrreference_t() {}
    }

    @C("struct diskextent")public static class diskextent {

        /* package-private */ diskextent() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.diskextent$struct$LAYOUT();
        }
        public static VarHandle startblock$VH() {
            return fuse_h_constants_3.diskextent$startblock$VH();
        }
        public static  @C("u_int32_t") int startblock$get(@C("struct diskextent") MemorySegment seg) {
            return (int)fuse_h_constants_3.diskextent$startblock$VH().get(seg);
        }
        public static  @C("u_int32_t") int startblock$get(@C("struct diskextent") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.diskextent$startblock$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void startblock$set(@C("struct diskextent") MemorySegment seg, @C("u_int32_t") int x) {
            fuse_h_constants_3.diskextent$startblock$VH().set(seg, x);
        }
        public static void startblock$set(@C("struct diskextent") MemorySegment seg, long index, @C("u_int32_t") int x) {
            fuse_h_constants_3.diskextent$startblock$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle blockcount$VH() {
            return fuse_h_constants_3.diskextent$blockcount$VH();
        }
        public static  @C("u_int32_t") int blockcount$get(@C("struct diskextent") MemorySegment seg) {
            return (int)fuse_h_constants_3.diskextent$blockcount$VH().get(seg);
        }
        public static  @C("u_int32_t") int blockcount$get(@C("struct diskextent") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.diskextent$blockcount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void blockcount$set(@C("struct diskextent") MemorySegment seg, @C("u_int32_t") int x) {
            fuse_h_constants_3.diskextent$blockcount$VH().set(seg, x);
        }
        public static void blockcount$set(@C("struct diskextent") MemorySegment seg, long index, @C("u_int32_t") int x) {
            fuse_h_constants_3.diskextent$blockcount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct diskextent") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct diskextent") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct diskextent[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct diskextent[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct diskextent*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct diskextent*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct diskextent") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct vol_capabilities_attr")public static class vol_capabilities_attr {

        /* package-private */ vol_capabilities_attr() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.vol_capabilities_attr$struct$LAYOUT();
        }
        public static MemorySegment capabilities$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment valid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct vol_capabilities_attr") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct vol_capabilities_attr") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct vol_capabilities_attr[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct vol_capabilities_attr[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct vol_capabilities_attr*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct vol_capabilities_attr*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct vol_capabilities_attr") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct vol_capabilities_attr")public static class vol_capabilities_attr_t extends vol_capabilities_attr {

        /* package-private */ vol_capabilities_attr_t() {}
    }

    @C("struct vol_attributes_attr")public static class vol_attributes_attr {

        /* package-private */ vol_attributes_attr() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.vol_attributes_attr$struct$LAYOUT();
        }
        public static MemorySegment validattr$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 20));
        }
        public static MemorySegment nativeattr$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 20));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct vol_attributes_attr") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct vol_attributes_attr") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct vol_attributes_attr[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct vol_attributes_attr[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct vol_attributes_attr*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct vol_attributes_attr*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct vol_attributes_attr") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct vol_attributes_attr")public static class vol_attributes_attr_t extends vol_attributes_attr {

        /* package-private */ vol_attributes_attr_t() {}
    }

    @C("struct fssearchblock")public static class fssearchblock {

        /* package-private */ fssearchblock() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.fssearchblock$struct$LAYOUT();
        }
        public static VarHandle returnattrs$VH() {
            return fuse_h_constants_3.fssearchblock$returnattrs$VH();
        }
        public static  @C("struct attrlist*") MemoryAddress returnattrs$get(@C("struct fssearchblock") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fssearchblock$returnattrs$VH().get(seg);
        }
        public static  @C("struct attrlist*") MemoryAddress returnattrs$get(@C("struct fssearchblock") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fssearchblock$returnattrs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void returnattrs$set(@C("struct fssearchblock") MemorySegment seg, @C("struct attrlist*") MemoryAddress x) {
            fuse_h_constants_3.fssearchblock$returnattrs$VH().set(seg, x);
        }
        public static void returnattrs$set(@C("struct fssearchblock") MemorySegment seg, long index, @C("struct attrlist*") MemoryAddress x) {
            fuse_h_constants_3.fssearchblock$returnattrs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle returnbuffer$VH() {
            return fuse_h_constants_3.fssearchblock$returnbuffer$VH();
        }
        public static  @C("void*") MemoryAddress returnbuffer$get(@C("struct fssearchblock") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fssearchblock$returnbuffer$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress returnbuffer$get(@C("struct fssearchblock") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fssearchblock$returnbuffer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void returnbuffer$set(@C("struct fssearchblock") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_3.fssearchblock$returnbuffer$VH().set(seg, x);
        }
        public static void returnbuffer$set(@C("struct fssearchblock") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_3.fssearchblock$returnbuffer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle returnbuffersize$VH() {
            return fuse_h_constants_3.fssearchblock$returnbuffersize$VH();
        }
        public static  @C("size_t") long returnbuffersize$get(@C("struct fssearchblock") MemorySegment seg) {
            return (long)fuse_h_constants_3.fssearchblock$returnbuffersize$VH().get(seg);
        }
        public static  @C("size_t") long returnbuffersize$get(@C("struct fssearchblock") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.fssearchblock$returnbuffersize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void returnbuffersize$set(@C("struct fssearchblock") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_3.fssearchblock$returnbuffersize$VH().set(seg, x);
        }
        public static void returnbuffersize$set(@C("struct fssearchblock") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_3.fssearchblock$returnbuffersize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle maxmatches$VH() {
            return fuse_h_constants_3.fssearchblock$maxmatches$VH();
        }
        public static  @C("u_long") long maxmatches$get(@C("struct fssearchblock") MemorySegment seg) {
            return (long)fuse_h_constants_3.fssearchblock$maxmatches$VH().get(seg);
        }
        public static  @C("u_long") long maxmatches$get(@C("struct fssearchblock") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.fssearchblock$maxmatches$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void maxmatches$set(@C("struct fssearchblock") MemorySegment seg, @C("u_long") long x) {
            fuse_h_constants_3.fssearchblock$maxmatches$VH().set(seg, x);
        }
        public static void maxmatches$set(@C("struct fssearchblock") MemorySegment seg, long index, @C("u_long") long x) {
            fuse_h_constants_3.fssearchblock$maxmatches$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment timelimit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static VarHandle searchparams1$VH() {
            return fuse_h_constants_3.fssearchblock$searchparams1$VH();
        }
        public static  @C("void*") MemoryAddress searchparams1$get(@C("struct fssearchblock") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fssearchblock$searchparams1$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress searchparams1$get(@C("struct fssearchblock") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fssearchblock$searchparams1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void searchparams1$set(@C("struct fssearchblock") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_3.fssearchblock$searchparams1$VH().set(seg, x);
        }
        public static void searchparams1$set(@C("struct fssearchblock") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_3.fssearchblock$searchparams1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sizeofsearchparams1$VH() {
            return fuse_h_constants_3.fssearchblock$sizeofsearchparams1$VH();
        }
        public static  @C("size_t") long sizeofsearchparams1$get(@C("struct fssearchblock") MemorySegment seg) {
            return (long)fuse_h_constants_3.fssearchblock$sizeofsearchparams1$VH().get(seg);
        }
        public static  @C("size_t") long sizeofsearchparams1$get(@C("struct fssearchblock") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.fssearchblock$sizeofsearchparams1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sizeofsearchparams1$set(@C("struct fssearchblock") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_3.fssearchblock$sizeofsearchparams1$VH().set(seg, x);
        }
        public static void sizeofsearchparams1$set(@C("struct fssearchblock") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_3.fssearchblock$sizeofsearchparams1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle searchparams2$VH() {
            return fuse_h_constants_3.fssearchblock$searchparams2$VH();
        }
        public static  @C("void*") MemoryAddress searchparams2$get(@C("struct fssearchblock") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fssearchblock$searchparams2$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress searchparams2$get(@C("struct fssearchblock") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fssearchblock$searchparams2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void searchparams2$set(@C("struct fssearchblock") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_3.fssearchblock$searchparams2$VH().set(seg, x);
        }
        public static void searchparams2$set(@C("struct fssearchblock") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_3.fssearchblock$searchparams2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sizeofsearchparams2$VH() {
            return fuse_h_constants_3.fssearchblock$sizeofsearchparams2$VH();
        }
        public static  @C("size_t") long sizeofsearchparams2$get(@C("struct fssearchblock") MemorySegment seg) {
            return (long)fuse_h_constants_3.fssearchblock$sizeofsearchparams2$VH().get(seg);
        }
        public static  @C("size_t") long sizeofsearchparams2$get(@C("struct fssearchblock") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.fssearchblock$sizeofsearchparams2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sizeofsearchparams2$set(@C("struct fssearchblock") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_3.fssearchblock$sizeofsearchparams2$VH().set(seg, x);
        }
        public static void sizeofsearchparams2$set(@C("struct fssearchblock") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_3.fssearchblock$sizeofsearchparams2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment searchattrs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 24));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fssearchblock") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fssearchblock") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fssearchblock[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fssearchblock[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fssearchblock*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fssearchblock*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fssearchblock") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct searchstate")public static class searchstate {

        /* package-private */ searchstate() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.searchstate$struct$LAYOUT();
        }
        public static VarHandle ss_union_flags$VH() {
            return fuse_h_constants_3.searchstate$ss_union_flags$VH();
        }
        public static  @C("uint32_t") int ss_union_flags$get(@C("struct searchstate") MemorySegment seg) {
            return (int)fuse_h_constants_3.searchstate$ss_union_flags$VH().get(seg);
        }
        public static  @C("uint32_t") int ss_union_flags$get(@C("struct searchstate") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.searchstate$ss_union_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ss_union_flags$set(@C("struct searchstate") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.searchstate$ss_union_flags$VH().set(seg, x);
        }
        public static void ss_union_flags$set(@C("struct searchstate") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.searchstate$ss_union_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ss_union_layer$VH() {
            return fuse_h_constants_3.searchstate$ss_union_layer$VH();
        }
        public static  @C("uint32_t") int ss_union_layer$get(@C("struct searchstate") MemorySegment seg) {
            return (int)fuse_h_constants_3.searchstate$ss_union_layer$VH().get(seg);
        }
        public static  @C("uint32_t") int ss_union_layer$get(@C("struct searchstate") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.searchstate$ss_union_layer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ss_union_layer$set(@C("struct searchstate") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.searchstate$ss_union_layer$VH().set(seg, x);
        }
        public static void ss_union_layer$set(@C("struct searchstate") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.searchstate$ss_union_layer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ss_fsstate$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 548));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct searchstate") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct searchstate") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct searchstate[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct searchstate[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct searchstate*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct searchstate*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct searchstate") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fsid")public static class fsid {

        /* package-private */ fsid() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.fsid$struct$LAYOUT();
        }
        public static MemorySegment val$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fsid") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fsid") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fsid[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fsid[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fsid*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fsid*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fsid") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fsid")public static class fsid_t extends fsid {

        /* package-private */ fsid_t() {}
    }

    @C("struct statfs64")public static class statfs64 {

        /* package-private */ statfs64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.statfs64$struct$LAYOUT();
        }
        public static VarHandle f_bsize$VH() {
            return fuse_h_constants_3.statfs64$f_bsize$VH();
        }
        public static  @C("uint32_t") int f_bsize$get(@C("struct statfs64") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs64$f_bsize$VH().get(seg);
        }
        public static  @C("uint32_t") int f_bsize$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs64$f_bsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bsize$set(@C("struct statfs64") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs64$f_bsize$VH().set(seg, x);
        }
        public static void f_bsize$set(@C("struct statfs64") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs64$f_bsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_iosize$VH() {
            return fuse_h_constants_3.statfs64$f_iosize$VH();
        }
        public static  @C("int32_t") int f_iosize$get(@C("struct statfs64") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs64$f_iosize$VH().get(seg);
        }
        public static  @C("int32_t") int f_iosize$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs64$f_iosize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_iosize$set(@C("struct statfs64") MemorySegment seg, @C("int32_t") int x) {
            fuse_h_constants_3.statfs64$f_iosize$VH().set(seg, x);
        }
        public static void f_iosize$set(@C("struct statfs64") MemorySegment seg, long index, @C("int32_t") int x) {
            fuse_h_constants_3.statfs64$f_iosize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_blocks$VH() {
            return fuse_h_constants_3.statfs64$f_blocks$VH();
        }
        public static  @C("uint64_t") long f_blocks$get(@C("struct statfs64") MemorySegment seg) {
            return (long)fuse_h_constants_3.statfs64$f_blocks$VH().get(seg);
        }
        public static  @C("uint64_t") long f_blocks$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.statfs64$f_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_blocks$set(@C("struct statfs64") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs64$f_blocks$VH().set(seg, x);
        }
        public static void f_blocks$set(@C("struct statfs64") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs64$f_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_bfree$VH() {
            return fuse_h_constants_3.statfs64$f_bfree$VH();
        }
        public static  @C("uint64_t") long f_bfree$get(@C("struct statfs64") MemorySegment seg) {
            return (long)fuse_h_constants_3.statfs64$f_bfree$VH().get(seg);
        }
        public static  @C("uint64_t") long f_bfree$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.statfs64$f_bfree$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bfree$set(@C("struct statfs64") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs64$f_bfree$VH().set(seg, x);
        }
        public static void f_bfree$set(@C("struct statfs64") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs64$f_bfree$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_bavail$VH() {
            return fuse_h_constants_3.statfs64$f_bavail$VH();
        }
        public static  @C("uint64_t") long f_bavail$get(@C("struct statfs64") MemorySegment seg) {
            return (long)fuse_h_constants_3.statfs64$f_bavail$VH().get(seg);
        }
        public static  @C("uint64_t") long f_bavail$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.statfs64$f_bavail$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bavail$set(@C("struct statfs64") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs64$f_bavail$VH().set(seg, x);
        }
        public static void f_bavail$set(@C("struct statfs64") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs64$f_bavail$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_files$VH() {
            return fuse_h_constants_3.statfs64$f_files$VH();
        }
        public static  @C("uint64_t") long f_files$get(@C("struct statfs64") MemorySegment seg) {
            return (long)fuse_h_constants_3.statfs64$f_files$VH().get(seg);
        }
        public static  @C("uint64_t") long f_files$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.statfs64$f_files$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_files$set(@C("struct statfs64") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs64$f_files$VH().set(seg, x);
        }
        public static void f_files$set(@C("struct statfs64") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs64$f_files$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_ffree$VH() {
            return fuse_h_constants_3.statfs64$f_ffree$VH();
        }
        public static  @C("uint64_t") long f_ffree$get(@C("struct statfs64") MemorySegment seg) {
            return (long)fuse_h_constants_3.statfs64$f_ffree$VH().get(seg);
        }
        public static  @C("uint64_t") long f_ffree$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.statfs64$f_ffree$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_ffree$set(@C("struct statfs64") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs64$f_ffree$VH().set(seg, x);
        }
        public static void f_ffree$set(@C("struct statfs64") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs64$f_ffree$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment f_fsid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static VarHandle f_owner$VH() {
            return fuse_h_constants_3.statfs64$f_owner$VH();
        }
        public static  @C("uid_t") int f_owner$get(@C("struct statfs64") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs64$f_owner$VH().get(seg);
        }
        public static  @C("uid_t") int f_owner$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs64$f_owner$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_owner$set(@C("struct statfs64") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_3.statfs64$f_owner$VH().set(seg, x);
        }
        public static void f_owner$set(@C("struct statfs64") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_3.statfs64$f_owner$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_type$VH() {
            return fuse_h_constants_3.statfs64$f_type$VH();
        }
        public static  @C("uint32_t") int f_type$get(@C("struct statfs64") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs64$f_type$VH().get(seg);
        }
        public static  @C("uint32_t") int f_type$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs64$f_type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_type$set(@C("struct statfs64") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs64$f_type$VH().set(seg, x);
        }
        public static void f_type$set(@C("struct statfs64") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs64$f_type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_flags$VH() {
            return fuse_h_constants_3.statfs64$f_flags$VH();
        }
        public static  @C("uint32_t") int f_flags$get(@C("struct statfs64") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs64$f_flags$VH().get(seg);
        }
        public static  @C("uint32_t") int f_flags$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs64$f_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_flags$set(@C("struct statfs64") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs64$f_flags$VH().set(seg, x);
        }
        public static void f_flags$set(@C("struct statfs64") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs64$f_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_fssubtype$VH() {
            return fuse_h_constants_3.statfs64$f_fssubtype$VH();
        }
        public static  @C("uint32_t") int f_fssubtype$get(@C("struct statfs64") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs64$f_fssubtype$VH().get(seg);
        }
        public static  @C("uint32_t") int f_fssubtype$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs64$f_fssubtype$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_fssubtype$set(@C("struct statfs64") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs64$f_fssubtype$VH().set(seg, x);
        }
        public static void f_fssubtype$set(@C("struct statfs64") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs64$f_fssubtype$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment f_fstypename$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment f_mntonname$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 1024));
        }
        public static MemorySegment f_mntfromname$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1112, 1024));
        }
        public static VarHandle f_flags_ext$VH() {
            return fuse_h_constants_3.statfs64$f_flags_ext$VH();
        }
        public static  @C("uint32_t") int f_flags_ext$get(@C("struct statfs64") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs64$f_flags_ext$VH().get(seg);
        }
        public static  @C("uint32_t") int f_flags_ext$get(@C("struct statfs64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs64$f_flags_ext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_flags_ext$set(@C("struct statfs64") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs64$f_flags_ext$VH().set(seg, x);
        }
        public static void f_flags_ext$set(@C("struct statfs64") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs64$f_flags_ext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment f_reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2140, 28));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct statfs64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct statfs64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct statfs64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct statfs64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct statfs64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct statfs64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct statfs64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct statfs")public static class statfs {

        /* package-private */ statfs() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.statfs$struct$LAYOUT();
        }
        public static VarHandle f_bsize$VH() {
            return fuse_h_constants_3.statfs$f_bsize$VH();
        }
        public static  @C("uint32_t") int f_bsize$get(@C("struct statfs") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs$f_bsize$VH().get(seg);
        }
        public static  @C("uint32_t") int f_bsize$get(@C("struct statfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs$f_bsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bsize$set(@C("struct statfs") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs$f_bsize$VH().set(seg, x);
        }
        public static void f_bsize$set(@C("struct statfs") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs$f_bsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_iosize$VH() {
            return fuse_h_constants_3.statfs$f_iosize$VH();
        }
        public static  @C("int32_t") int f_iosize$get(@C("struct statfs") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs$f_iosize$VH().get(seg);
        }
        public static  @C("int32_t") int f_iosize$get(@C("struct statfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs$f_iosize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_iosize$set(@C("struct statfs") MemorySegment seg, @C("int32_t") int x) {
            fuse_h_constants_3.statfs$f_iosize$VH().set(seg, x);
        }
        public static void f_iosize$set(@C("struct statfs") MemorySegment seg, long index, @C("int32_t") int x) {
            fuse_h_constants_3.statfs$f_iosize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_blocks$VH() {
            return fuse_h_constants_3.statfs$f_blocks$VH();
        }
        public static  @C("uint64_t") long f_blocks$get(@C("struct statfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.statfs$f_blocks$VH().get(seg);
        }
        public static  @C("uint64_t") long f_blocks$get(@C("struct statfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.statfs$f_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_blocks$set(@C("struct statfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs$f_blocks$VH().set(seg, x);
        }
        public static void f_blocks$set(@C("struct statfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs$f_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_bfree$VH() {
            return fuse_h_constants_3.statfs$f_bfree$VH();
        }
        public static  @C("uint64_t") long f_bfree$get(@C("struct statfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.statfs$f_bfree$VH().get(seg);
        }
        public static  @C("uint64_t") long f_bfree$get(@C("struct statfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.statfs$f_bfree$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bfree$set(@C("struct statfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs$f_bfree$VH().set(seg, x);
        }
        public static void f_bfree$set(@C("struct statfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs$f_bfree$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_bavail$VH() {
            return fuse_h_constants_3.statfs$f_bavail$VH();
        }
        public static  @C("uint64_t") long f_bavail$get(@C("struct statfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.statfs$f_bavail$VH().get(seg);
        }
        public static  @C("uint64_t") long f_bavail$get(@C("struct statfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.statfs$f_bavail$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bavail$set(@C("struct statfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs$f_bavail$VH().set(seg, x);
        }
        public static void f_bavail$set(@C("struct statfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs$f_bavail$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_files$VH() {
            return fuse_h_constants_3.statfs$f_files$VH();
        }
        public static  @C("uint64_t") long f_files$get(@C("struct statfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.statfs$f_files$VH().get(seg);
        }
        public static  @C("uint64_t") long f_files$get(@C("struct statfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.statfs$f_files$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_files$set(@C("struct statfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs$f_files$VH().set(seg, x);
        }
        public static void f_files$set(@C("struct statfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs$f_files$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_ffree$VH() {
            return fuse_h_constants_3.statfs$f_ffree$VH();
        }
        public static  @C("uint64_t") long f_ffree$get(@C("struct statfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.statfs$f_ffree$VH().get(seg);
        }
        public static  @C("uint64_t") long f_ffree$get(@C("struct statfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.statfs$f_ffree$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_ffree$set(@C("struct statfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs$f_ffree$VH().set(seg, x);
        }
        public static void f_ffree$set(@C("struct statfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.statfs$f_ffree$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment f_fsid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static VarHandle f_owner$VH() {
            return fuse_h_constants_3.statfs$f_owner$VH();
        }
        public static  @C("uid_t") int f_owner$get(@C("struct statfs") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs$f_owner$VH().get(seg);
        }
        public static  @C("uid_t") int f_owner$get(@C("struct statfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs$f_owner$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_owner$set(@C("struct statfs") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_3.statfs$f_owner$VH().set(seg, x);
        }
        public static void f_owner$set(@C("struct statfs") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_3.statfs$f_owner$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_type$VH() {
            return fuse_h_constants_3.statfs$f_type$VH();
        }
        public static  @C("uint32_t") int f_type$get(@C("struct statfs") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs$f_type$VH().get(seg);
        }
        public static  @C("uint32_t") int f_type$get(@C("struct statfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs$f_type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_type$set(@C("struct statfs") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs$f_type$VH().set(seg, x);
        }
        public static void f_type$set(@C("struct statfs") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs$f_type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_flags$VH() {
            return fuse_h_constants_3.statfs$f_flags$VH();
        }
        public static  @C("uint32_t") int f_flags$get(@C("struct statfs") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs$f_flags$VH().get(seg);
        }
        public static  @C("uint32_t") int f_flags$get(@C("struct statfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs$f_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_flags$set(@C("struct statfs") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs$f_flags$VH().set(seg, x);
        }
        public static void f_flags$set(@C("struct statfs") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs$f_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_fssubtype$VH() {
            return fuse_h_constants_3.statfs$f_fssubtype$VH();
        }
        public static  @C("uint32_t") int f_fssubtype$get(@C("struct statfs") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs$f_fssubtype$VH().get(seg);
        }
        public static  @C("uint32_t") int f_fssubtype$get(@C("struct statfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs$f_fssubtype$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_fssubtype$set(@C("struct statfs") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs$f_fssubtype$VH().set(seg, x);
        }
        public static void f_fssubtype$set(@C("struct statfs") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs$f_fssubtype$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment f_fstypename$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment f_mntonname$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 1024));
        }
        public static MemorySegment f_mntfromname$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1112, 1024));
        }
        public static VarHandle f_flags_ext$VH() {
            return fuse_h_constants_3.statfs$f_flags_ext$VH();
        }
        public static  @C("uint32_t") int f_flags_ext$get(@C("struct statfs") MemorySegment seg) {
            return (int)fuse_h_constants_3.statfs$f_flags_ext$VH().get(seg);
        }
        public static  @C("uint32_t") int f_flags_ext$get(@C("struct statfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.statfs$f_flags_ext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_flags_ext$set(@C("struct statfs") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs$f_flags_ext$VH().set(seg, x);
        }
        public static void f_flags_ext$set(@C("struct statfs") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.statfs$f_flags_ext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment f_reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2140, 28));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct statfs") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct statfs") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct statfs[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct statfs[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct statfs*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct statfs*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct statfs") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct vfsstatfs")public static class vfsstatfs {

        /* package-private */ vfsstatfs() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.vfsstatfs$struct$LAYOUT();
        }
        public static VarHandle f_bsize$VH() {
            return fuse_h_constants_3.vfsstatfs$f_bsize$VH();
        }
        public static  @C("uint32_t") int f_bsize$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsstatfs$f_bsize$VH().get(seg);
        }
        public static  @C("uint32_t") int f_bsize$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsstatfs$f_bsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bsize$set(@C("struct vfsstatfs") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.vfsstatfs$f_bsize$VH().set(seg, x);
        }
        public static void f_bsize$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.vfsstatfs$f_bsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_iosize$VH() {
            return fuse_h_constants_3.vfsstatfs$f_iosize$VH();
        }
        public static  @C("size_t") long f_iosize$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.vfsstatfs$f_iosize$VH().get(seg);
        }
        public static  @C("size_t") long f_iosize$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.vfsstatfs$f_iosize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_iosize$set(@C("struct vfsstatfs") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_iosize$VH().set(seg, x);
        }
        public static void f_iosize$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_iosize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_blocks$VH() {
            return fuse_h_constants_3.vfsstatfs$f_blocks$VH();
        }
        public static  @C("uint64_t") long f_blocks$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.vfsstatfs$f_blocks$VH().get(seg);
        }
        public static  @C("uint64_t") long f_blocks$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.vfsstatfs$f_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_blocks$set(@C("struct vfsstatfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_blocks$VH().set(seg, x);
        }
        public static void f_blocks$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_bfree$VH() {
            return fuse_h_constants_3.vfsstatfs$f_bfree$VH();
        }
        public static  @C("uint64_t") long f_bfree$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.vfsstatfs$f_bfree$VH().get(seg);
        }
        public static  @C("uint64_t") long f_bfree$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.vfsstatfs$f_bfree$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bfree$set(@C("struct vfsstatfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_bfree$VH().set(seg, x);
        }
        public static void f_bfree$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_bfree$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_bavail$VH() {
            return fuse_h_constants_3.vfsstatfs$f_bavail$VH();
        }
        public static  @C("uint64_t") long f_bavail$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.vfsstatfs$f_bavail$VH().get(seg);
        }
        public static  @C("uint64_t") long f_bavail$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.vfsstatfs$f_bavail$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bavail$set(@C("struct vfsstatfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_bavail$VH().set(seg, x);
        }
        public static void f_bavail$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_bavail$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_bused$VH() {
            return fuse_h_constants_3.vfsstatfs$f_bused$VH();
        }
        public static  @C("uint64_t") long f_bused$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.vfsstatfs$f_bused$VH().get(seg);
        }
        public static  @C("uint64_t") long f_bused$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.vfsstatfs$f_bused$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_bused$set(@C("struct vfsstatfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_bused$VH().set(seg, x);
        }
        public static void f_bused$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_bused$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_files$VH() {
            return fuse_h_constants_3.vfsstatfs$f_files$VH();
        }
        public static  @C("uint64_t") long f_files$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.vfsstatfs$f_files$VH().get(seg);
        }
        public static  @C("uint64_t") long f_files$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.vfsstatfs$f_files$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_files$set(@C("struct vfsstatfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_files$VH().set(seg, x);
        }
        public static void f_files$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_files$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_ffree$VH() {
            return fuse_h_constants_3.vfsstatfs$f_ffree$VH();
        }
        public static  @C("uint64_t") long f_ffree$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.vfsstatfs$f_ffree$VH().get(seg);
        }
        public static  @C("uint64_t") long f_ffree$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.vfsstatfs$f_ffree$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_ffree$set(@C("struct vfsstatfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_ffree$VH().set(seg, x);
        }
        public static void f_ffree$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_ffree$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment f_fsid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(60, 8));
        }
        public static VarHandle f_owner$VH() {
            return fuse_h_constants_3.vfsstatfs$f_owner$VH();
        }
        public static  @C("uid_t") int f_owner$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsstatfs$f_owner$VH().get(seg);
        }
        public static  @C("uid_t") int f_owner$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsstatfs$f_owner$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_owner$set(@C("struct vfsstatfs") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_3.vfsstatfs$f_owner$VH().set(seg, x);
        }
        public static void f_owner$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_3.vfsstatfs$f_owner$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_flags$VH() {
            return fuse_h_constants_3.vfsstatfs$f_flags$VH();
        }
        public static  @C("uint64_t") long f_flags$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (long)fuse_h_constants_3.vfsstatfs$f_flags$VH().get(seg);
        }
        public static  @C("uint64_t") long f_flags$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.vfsstatfs$f_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_flags$set(@C("struct vfsstatfs") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_flags$VH().set(seg, x);
        }
        public static void f_flags$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_3.vfsstatfs$f_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment f_fstypename$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 16));
        }
        public static MemorySegment f_mntonname$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(96, 1024));
        }
        public static MemorySegment f_mntfromname$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1120, 1024));
        }
        public static VarHandle f_fssubtype$VH() {
            return fuse_h_constants_3.vfsstatfs$f_fssubtype$VH();
        }
        public static  @C("uint32_t") int f_fssubtype$get(@C("struct vfsstatfs") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsstatfs$f_fssubtype$VH().get(seg);
        }
        public static  @C("uint32_t") int f_fssubtype$get(@C("struct vfsstatfs") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsstatfs$f_fssubtype$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_fssubtype$set(@C("struct vfsstatfs") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.vfsstatfs$f_fssubtype$VH().set(seg, x);
        }
        public static void f_fssubtype$set(@C("struct vfsstatfs") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.vfsstatfs$f_fssubtype$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment f_reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2148, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct vfsstatfs") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct vfsstatfs") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct vfsstatfs[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct vfsstatfs[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct vfsstatfs*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct vfsstatfs*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct vfsstatfs") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct vfsconf")public static class vfsconf {

        /* package-private */ vfsconf() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.vfsconf$struct$LAYOUT();
        }
        public static VarHandle vfc_reserved1$VH() {
            return fuse_h_constants_3.vfsconf$vfc_reserved1$VH();
        }
        public static  @C("uint32_t") int vfc_reserved1$get(@C("struct vfsconf") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsconf$vfc_reserved1$VH().get(seg);
        }
        public static  @C("uint32_t") int vfc_reserved1$get(@C("struct vfsconf") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsconf$vfc_reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vfc_reserved1$set(@C("struct vfsconf") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.vfsconf$vfc_reserved1$VH().set(seg, x);
        }
        public static void vfc_reserved1$set(@C("struct vfsconf") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.vfsconf$vfc_reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment vfc_name$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 15));
        }
        public static VarHandle vfc_typenum$VH() {
            return fuse_h_constants_3.vfsconf$vfc_typenum$VH();
        }
        public static  @C("int") int vfc_typenum$get(@C("struct vfsconf") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsconf$vfc_typenum$VH().get(seg);
        }
        public static  @C("int") int vfc_typenum$get(@C("struct vfsconf") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsconf$vfc_typenum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vfc_typenum$set(@C("struct vfsconf") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.vfsconf$vfc_typenum$VH().set(seg, x);
        }
        public static void vfc_typenum$set(@C("struct vfsconf") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.vfsconf$vfc_typenum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle vfc_refcount$VH() {
            return fuse_h_constants_3.vfsconf$vfc_refcount$VH();
        }
        public static  @C("int") int vfc_refcount$get(@C("struct vfsconf") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsconf$vfc_refcount$VH().get(seg);
        }
        public static  @C("int") int vfc_refcount$get(@C("struct vfsconf") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsconf$vfc_refcount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vfc_refcount$set(@C("struct vfsconf") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.vfsconf$vfc_refcount$VH().set(seg, x);
        }
        public static void vfc_refcount$set(@C("struct vfsconf") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.vfsconf$vfc_refcount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle vfc_flags$VH() {
            return fuse_h_constants_3.vfsconf$vfc_flags$VH();
        }
        public static  @C("int") int vfc_flags$get(@C("struct vfsconf") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsconf$vfc_flags$VH().get(seg);
        }
        public static  @C("int") int vfc_flags$get(@C("struct vfsconf") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsconf$vfc_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vfc_flags$set(@C("struct vfsconf") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.vfsconf$vfc_flags$VH().set(seg, x);
        }
        public static void vfc_flags$set(@C("struct vfsconf") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.vfsconf$vfc_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle vfc_reserved2$VH() {
            return fuse_h_constants_3.vfsconf$vfc_reserved2$VH();
        }
        public static  @C("uint32_t") int vfc_reserved2$get(@C("struct vfsconf") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsconf$vfc_reserved2$VH().get(seg);
        }
        public static  @C("uint32_t") int vfc_reserved2$get(@C("struct vfsconf") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsconf$vfc_reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vfc_reserved2$set(@C("struct vfsconf") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.vfsconf$vfc_reserved2$VH().set(seg, x);
        }
        public static void vfc_reserved2$set(@C("struct vfsconf") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.vfsconf$vfc_reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle vfc_reserved3$VH() {
            return fuse_h_constants_3.vfsconf$vfc_reserved3$VH();
        }
        public static  @C("uint32_t") int vfc_reserved3$get(@C("struct vfsconf") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsconf$vfc_reserved3$VH().get(seg);
        }
        public static  @C("uint32_t") int vfc_reserved3$get(@C("struct vfsconf") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsconf$vfc_reserved3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vfc_reserved3$set(@C("struct vfsconf") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.vfsconf$vfc_reserved3$VH().set(seg, x);
        }
        public static void vfc_reserved3$set(@C("struct vfsconf") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.vfsconf$vfc_reserved3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct vfsconf") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct vfsconf") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct vfsconf[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct vfsconf[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct vfsconf*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct vfsconf*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct vfsconf") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct vfsidctl")public static class vfsidctl {

        /* package-private */ vfsidctl() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.vfsidctl$struct$LAYOUT();
        }
        public static VarHandle vc_vers$VH() {
            return fuse_h_constants_3.vfsidctl$vc_vers$VH();
        }
        public static  @C("int") int vc_vers$get(@C("struct vfsidctl") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsidctl$vc_vers$VH().get(seg);
        }
        public static  @C("int") int vc_vers$get(@C("struct vfsidctl") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsidctl$vc_vers$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vc_vers$set(@C("struct vfsidctl") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_3.vfsidctl$vc_vers$VH().set(seg, x);
        }
        public static void vc_vers$set(@C("struct vfsidctl") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_3.vfsidctl$vc_vers$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment vc_fsid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 8));
        }
        public static VarHandle vc_ptr$VH() {
            return fuse_h_constants_3.vfsidctl$vc_ptr$VH();
        }
        public static  @C("void*") MemoryAddress vc_ptr$get(@C("struct vfsidctl") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.vfsidctl$vc_ptr$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress vc_ptr$get(@C("struct vfsidctl") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.vfsidctl$vc_ptr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vc_ptr$set(@C("struct vfsidctl") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_3.vfsidctl$vc_ptr$VH().set(seg, x);
        }
        public static void vc_ptr$set(@C("struct vfsidctl") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_3.vfsidctl$vc_ptr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle vc_len$VH() {
            return fuse_h_constants_3.vfsidctl$vc_len$VH();
        }
        public static  @C("size_t") long vc_len$get(@C("struct vfsidctl") MemorySegment seg) {
            return (long)fuse_h_constants_3.vfsidctl$vc_len$VH().get(seg);
        }
        public static  @C("size_t") long vc_len$get(@C("struct vfsidctl") MemorySegment seg, long index) {
            return (long)fuse_h_constants_3.vfsidctl$vc_len$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vc_len$set(@C("struct vfsidctl") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_3.vfsidctl$vc_len$VH().set(seg, x);
        }
        public static void vc_len$set(@C("struct vfsidctl") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_3.vfsidctl$vc_len$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment vc_spare$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 48));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct vfsidctl") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct vfsidctl") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct vfsidctl[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct vfsidctl[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct vfsidctl*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct vfsidctl*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct vfsidctl") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct vfsquery")public static class vfsquery {

        /* package-private */ vfsquery() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.vfsquery$struct$LAYOUT();
        }
        public static VarHandle vq_flags$VH() {
            return fuse_h_constants_3.vfsquery$vq_flags$VH();
        }
        public static  @C("u_int32_t") int vq_flags$get(@C("struct vfsquery") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfsquery$vq_flags$VH().get(seg);
        }
        public static  @C("u_int32_t") int vq_flags$get(@C("struct vfsquery") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfsquery$vq_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vq_flags$set(@C("struct vfsquery") MemorySegment seg, @C("u_int32_t") int x) {
            fuse_h_constants_3.vfsquery$vq_flags$VH().set(seg, x);
        }
        public static void vq_flags$set(@C("struct vfsquery") MemorySegment seg, long index, @C("u_int32_t") int x) {
            fuse_h_constants_3.vfsquery$vq_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment vq_spare$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 124));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct vfsquery") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct vfsquery") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct vfsquery[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct vfsquery[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct vfsquery*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct vfsquery*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct vfsquery") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct vfs_server")public static class vfs_server {

        /* package-private */ vfs_server() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.vfs_server$struct$LAYOUT();
        }
        public static VarHandle vs_minutes$VH() {
            return fuse_h_constants_3.vfs_server$vs_minutes$VH();
        }
        public static  @C("int32_t") int vs_minutes$get(@C("struct vfs_server") MemorySegment seg) {
            return (int)fuse_h_constants_3.vfs_server$vs_minutes$VH().get(seg);
        }
        public static  @C("int32_t") int vs_minutes$get(@C("struct vfs_server") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.vfs_server$vs_minutes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vs_minutes$set(@C("struct vfs_server") MemorySegment seg, @C("int32_t") int x) {
            fuse_h_constants_3.vfs_server$vs_minutes$VH().set(seg, x);
        }
        public static void vs_minutes$set(@C("struct vfs_server") MemorySegment seg, long index, @C("int32_t") int x) {
            fuse_h_constants_3.vfs_server$vs_minutes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment vs_server_name$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 768));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct vfs_server") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct vfs_server") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct vfs_server[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct vfs_server[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct vfs_server*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct vfs_server*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct vfs_server") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct netfs_status")public static class netfs_status {

        /* package-private */ netfs_status() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.netfs_status$struct$LAYOUT();
        }
        public static VarHandle ns_status$VH() {
            return fuse_h_constants_3.netfs_status$ns_status$VH();
        }
        public static  @C("u_int32_t") int ns_status$get(@C("struct netfs_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.netfs_status$ns_status$VH().get(seg);
        }
        public static  @C("u_int32_t") int ns_status$get(@C("struct netfs_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.netfs_status$ns_status$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ns_status$set(@C("struct netfs_status") MemorySegment seg, @C("u_int32_t") int x) {
            fuse_h_constants_3.netfs_status$ns_status$VH().set(seg, x);
        }
        public static void ns_status$set(@C("struct netfs_status") MemorySegment seg, long index, @C("u_int32_t") int x) {
            fuse_h_constants_3.netfs_status$ns_status$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ns_mountopts$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 512));
        }
        public static VarHandle ns_waittime$VH() {
            return fuse_h_constants_3.netfs_status$ns_waittime$VH();
        }
        public static  @C("uint32_t") int ns_waittime$get(@C("struct netfs_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.netfs_status$ns_waittime$VH().get(seg);
        }
        public static  @C("uint32_t") int ns_waittime$get(@C("struct netfs_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.netfs_status$ns_waittime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ns_waittime$set(@C("struct netfs_status") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.netfs_status$ns_waittime$VH().set(seg, x);
        }
        public static void ns_waittime$set(@C("struct netfs_status") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.netfs_status$ns_waittime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ns_threadcount$VH() {
            return fuse_h_constants_3.netfs_status$ns_threadcount$VH();
        }
        public static  @C("uint32_t") int ns_threadcount$get(@C("struct netfs_status") MemorySegment seg) {
            return (int)fuse_h_constants_3.netfs_status$ns_threadcount$VH().get(seg);
        }
        public static  @C("uint32_t") int ns_threadcount$get(@C("struct netfs_status") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.netfs_status$ns_threadcount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ns_threadcount$set(@C("struct netfs_status") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_3.netfs_status$ns_threadcount$VH().set(seg, x);
        }
        public static void ns_threadcount$set(@C("struct netfs_status") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_3.netfs_status$ns_threadcount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ns_threadids$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(528, 0));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct netfs_status") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct netfs_status") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct netfs_status[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct netfs_status[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct netfs_status*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct netfs_status*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct netfs_status") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fhandle")public static class fhandle {

        /* package-private */ fhandle() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.fhandle$struct$LAYOUT();
        }
        public static VarHandle fh_len$VH() {
            return fuse_h_constants_3.fhandle$fh_len$VH();
        }
        public static  @C("unsigned int") int fh_len$get(@C("struct fhandle") MemorySegment seg) {
            return (int)fuse_h_constants_3.fhandle$fh_len$VH().get(seg);
        }
        public static  @C("unsigned int") int fh_len$get(@C("struct fhandle") MemorySegment seg, long index) {
            return (int)fuse_h_constants_3.fhandle$fh_len$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fh_len$set(@C("struct fhandle") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_3.fhandle$fh_len$VH().set(seg, x);
        }
        public static void fh_len$set(@C("struct fhandle") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_3.fhandle$fh_len$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment fh_data$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 128));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fhandle") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fhandle") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fhandle[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fhandle[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fhandle*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fhandle*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fhandle") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fhandle")public static class fhandle_t extends fhandle {

        /* package-private */ fhandle_t() {}
    }

    @C("struct fuse_operations")public static class fuse_operations {

        /* package-private */ fuse_operations() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_3.fuse_operations$struct$LAYOUT();
        }
        public static interface getattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct stat*)") MemorySegment allocate(getattr fi) {
                return RuntimeHelper.upcallStub(getattr.class, fi, fuse_h_constants_3.getattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct stat*)") MemorySegment allocate(getattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle getattr$VH() {
            return fuse_h_constants_3.fuse_operations$getattr$VH();
        }
        public static  @C("int(*)(char*,struct stat*)") MemoryAddress getattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$getattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct stat*)") MemoryAddress getattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$getattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void getattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct stat*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$getattr$VH().set(seg, x);
        }
        public static void getattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct stat*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$getattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface readlink {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
            public static  @C("int(*)(char*,char*,size_t)") MemorySegment allocate(readlink fi) {
                return RuntimeHelper.upcallStub(readlink.class, fi, fuse_h_constants_3.readlink$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
            }
            public static  @C("int(*)(char*,char*,size_t)") MemorySegment allocate(readlink fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle readlink$VH() {
            return fuse_h_constants_3.fuse_operations$readlink$VH();
        }
        public static  @C("int(*)(char*,char*,size_t)") MemoryAddress readlink$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$readlink$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,size_t)") MemoryAddress readlink$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$readlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void readlink$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,size_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$readlink$VH().set(seg, x);
        }
        public static void readlink$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,size_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$readlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface getdir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemorySegment allocate(getdir fi) {
                return RuntimeHelper.upcallStub(getdir.class, fi, fuse_h_constants_3.getdir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemorySegment allocate(getdir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle getdir$VH() {
            return fuse_h_constants_3.fuse_operations$getdir$VH();
        }
        public static  @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemoryAddress getdir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$getdir$VH().get(seg);
        }
        public static  @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemoryAddress getdir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$getdir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void getdir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$getdir$VH().set(seg, x);
        }
        public static void getdir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$getdir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface mknod {

            int apply(jdk.incubator.foreign.MemoryAddress x0, short x1, int x2);
            public static  @C("int(*)(char*,mode_t,dev_t)") MemorySegment allocate(mknod fi) {
                return RuntimeHelper.upcallStub(mknod.class, fi, fuse_h_constants_1.mknod$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;SI)I");
            }
            public static  @C("int(*)(char*,mode_t,dev_t)") MemorySegment allocate(mknod fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle mknod$VH() {
            return fuse_h_constants_3.fuse_operations$mknod$VH();
        }
        public static  @C("int(*)(char*,mode_t,dev_t)") MemoryAddress mknod$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$mknod$VH().get(seg);
        }
        public static  @C("int(*)(char*,mode_t,dev_t)") MemoryAddress mknod$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$mknod$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mknod$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,mode_t,dev_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$mknod$VH().set(seg, x);
        }
        public static void mknod$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,mode_t,dev_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$mknod$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface mkdir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, short x1);
            public static  @C("int(*)(char*,mode_t)") MemorySegment allocate(mkdir fi) {
                return RuntimeHelper.upcallStub(mkdir.class, fi, fuse_h_constants_1.mkdir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;S)I");
            }
            public static  @C("int(*)(char*,mode_t)") MemorySegment allocate(mkdir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle mkdir$VH() {
            return fuse_h_constants_3.fuse_operations$mkdir$VH();
        }
        public static  @C("int(*)(char*,mode_t)") MemoryAddress mkdir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$mkdir$VH().get(seg);
        }
        public static  @C("int(*)(char*,mode_t)") MemoryAddress mkdir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$mkdir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mkdir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,mode_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$mkdir$VH().set(seg, x);
        }
        public static void mkdir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,mode_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$mkdir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface unlink {

            int apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("int(*)(char*)") MemorySegment allocate(unlink fi) {
                return RuntimeHelper.upcallStub(unlink.class, fi, fuse_h_constants_3.unlink$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*)") MemorySegment allocate(unlink fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle unlink$VH() {
            return fuse_h_constants_3.fuse_operations$unlink$VH();
        }
        public static  @C("int(*)(char*)") MemoryAddress unlink$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$unlink$VH().get(seg);
        }
        public static  @C("int(*)(char*)") MemoryAddress unlink$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$unlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void unlink$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$unlink$VH().set(seg, x);
        }
        public static void unlink$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$unlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface rmdir {

            int apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("int(*)(char*)") MemorySegment allocate(rmdir fi) {
                return RuntimeHelper.upcallStub(rmdir.class, fi, fuse_h_constants_3.rmdir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*)") MemorySegment allocate(rmdir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle rmdir$VH() {
            return fuse_h_constants_3.fuse_operations$rmdir$VH();
        }
        public static  @C("int(*)(char*)") MemoryAddress rmdir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$rmdir$VH().get(seg);
        }
        public static  @C("int(*)(char*)") MemoryAddress rmdir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$rmdir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void rmdir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$rmdir$VH().set(seg, x);
        }
        public static void rmdir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$rmdir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface symlink {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(symlink fi) {
                return RuntimeHelper.upcallStub(symlink.class, fi, fuse_h_constants_3.symlink$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(symlink fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle symlink$VH() {
            return fuse_h_constants_3.fuse_operations$symlink$VH();
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress symlink$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$symlink$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress symlink$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$symlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void symlink$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$symlink$VH().set(seg, x);
        }
        public static void symlink$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$symlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface rename {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(rename fi) {
                return RuntimeHelper.upcallStub(rename.class, fi, fuse_h_constants_3.rename$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(rename fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle rename$VH() {
            return fuse_h_constants_3.fuse_operations$rename$VH();
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress rename$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$rename$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress rename$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$rename$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void rename$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$rename$VH().set(seg, x);
        }
        public static void rename$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$rename$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface link {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(link fi) {
                return RuntimeHelper.upcallStub(link.class, fi, fuse_h_constants_3.link$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(link fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle link$VH() {
            return fuse_h_constants_3.fuse_operations$link$VH();
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress link$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$link$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress link$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$link$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void link$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$link$VH().set(seg, x);
        }
        public static void link$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$link$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface chmod {

            int apply(jdk.incubator.foreign.MemoryAddress x0, short x1);
            public static  @C("int(*)(char*,mode_t)") MemorySegment allocate(chmod fi) {
                return RuntimeHelper.upcallStub(chmod.class, fi, fuse_h_constants_1.chmod$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;S)I");
            }
            public static  @C("int(*)(char*,mode_t)") MemorySegment allocate(chmod fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle chmod$VH() {
            return fuse_h_constants_3.fuse_operations$chmod$VH();
        }
        public static  @C("int(*)(char*,mode_t)") MemoryAddress chmod$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$chmod$VH().get(seg);
        }
        public static  @C("int(*)(char*,mode_t)") MemoryAddress chmod$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$chmod$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void chmod$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,mode_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$chmod$VH().set(seg, x);
        }
        public static void chmod$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,mode_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$chmod$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface chown {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
            public static  @C("int(*)(char*,uid_t,gid_t)") MemorySegment allocate(chown fi) {
                return RuntimeHelper.upcallStub(chown.class, fi, fuse_h_constants_3.chown$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;II)I");
            }
            public static  @C("int(*)(char*,uid_t,gid_t)") MemorySegment allocate(chown fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle chown$VH() {
            return fuse_h_constants_3.fuse_operations$chown$VH();
        }
        public static  @C("int(*)(char*,uid_t,gid_t)") MemoryAddress chown$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$chown$VH().get(seg);
        }
        public static  @C("int(*)(char*,uid_t,gid_t)") MemoryAddress chown$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$chown$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void chown$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,uid_t,gid_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$chown$VH().set(seg, x);
        }
        public static void chown$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,uid_t,gid_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$chown$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface truncate {

            int apply(jdk.incubator.foreign.MemoryAddress x0, long x1);
            public static  @C("int(*)(char*,off_t)") MemorySegment allocate(truncate fi) {
                return RuntimeHelper.upcallStub(truncate.class, fi, fuse_h_constants_3.truncate$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;J)I");
            }
            public static  @C("int(*)(char*,off_t)") MemorySegment allocate(truncate fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle truncate$VH() {
            return fuse_h_constants_3.fuse_operations$truncate$VH();
        }
        public static  @C("int(*)(char*,off_t)") MemoryAddress truncate$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$truncate$VH().get(seg);
        }
        public static  @C("int(*)(char*,off_t)") MemoryAddress truncate$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$truncate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void truncate$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,off_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$truncate$VH().set(seg, x);
        }
        public static void truncate$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,off_t)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$truncate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface utime {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct utimbuf*)") MemorySegment allocate(utime fi) {
                return RuntimeHelper.upcallStub(utime.class, fi, fuse_h_constants_1.utime$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct utimbuf*)") MemorySegment allocate(utime fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle utime$VH() {
            return fuse_h_constants_3.fuse_operations$utime$VH();
        }
        public static  @C("int(*)(char*,struct utimbuf*)") MemoryAddress utime$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$utime$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct utimbuf*)") MemoryAddress utime$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$utime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void utime$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct utimbuf*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$utime$VH().set(seg, x);
        }
        public static void utime$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct utimbuf*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$utime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface open {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(open fi) {
                return RuntimeHelper.upcallStub(open.class, fi, fuse_h_constants_1.open$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(open fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle open$VH() {
            return fuse_h_constants_3.fuse_operations$open$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress open$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$open$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress open$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$open$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void open$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$open$VH().set(seg, x);
        }
        public static void open$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$open$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface read {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(read fi) {
                return RuntimeHelper.upcallStub(read.class, fi, fuse_h_constants_3.read$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(read fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle read$VH() {
            return fuse_h_constants_3.fuse_operations$read$VH();
        }
        public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress read$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$read$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress read$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$read$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void read$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$read$VH().set(seg, x);
        }
        public static void read$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$read$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface write {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(write fi) {
                return RuntimeHelper.upcallStub(write.class, fi, fuse_h_constants_3.write$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(write fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle write$VH() {
            return fuse_h_constants_3.fuse_operations$write$VH();
        }
        public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress write$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$write$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress write$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_3.fuse_operations$write$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void write$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$write$VH().set(seg, x);
        }
        public static void write$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_3.fuse_operations$write$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface statfs$0 {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct statvfs*)") MemorySegment allocate(statfs$0 fi) {
                return RuntimeHelper.upcallStub(statfs$0.class, fi, fuse_h_constants_3.statfs$0$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct statvfs*)") MemorySegment allocate(statfs$0 fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle statfs$VH() {
            return fuse_h_constants_4.fuse_operations$statfs$VH();
        }
        public static  @C("int(*)(char*,struct statvfs*)") MemoryAddress statfs$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$statfs$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct statvfs*)") MemoryAddress statfs$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$statfs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void statfs$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct statvfs*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$statfs$VH().set(seg, x);
        }
        public static void statfs$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct statvfs*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$statfs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface flush {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(flush fi) {
                return RuntimeHelper.upcallStub(flush.class, fi, fuse_h_constants_4.flush$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(flush fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle flush$VH() {
            return fuse_h_constants_4.fuse_operations$flush$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress flush$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$flush$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress flush$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$flush$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flush$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$flush$VH().set(seg, x);
        }
        public static void flush$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$flush$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface release {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(release fi) {
                return RuntimeHelper.upcallStub(release.class, fi, fuse_h_constants_4.release$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(release fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle release$VH() {
            return fuse_h_constants_4.fuse_operations$release$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress release$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$release$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress release$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$release$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void release$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$release$VH().set(seg, x);
        }
        public static void release$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$release$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface fsync {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemorySegment allocate(fsync fi) {
                return RuntimeHelper.upcallStub(fsync.class, fi, fuse_h_constants_4.fsync$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemorySegment allocate(fsync fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle fsync$VH() {
            return fuse_h_constants_4.fuse_operations$fsync$VH();
        }
        public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress fsync$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$fsync$VH().get(seg);
        }
        public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress fsync$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$fsync$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fsync$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$fsync$VH().set(seg, x);
        }
        public static void fsync$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$fsync$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setxattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3, int x4, int x5);
            public static  @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemorySegment allocate(setxattr fi) {
                return RuntimeHelper.upcallStub(setxattr.class, fi, fuse_h_constants_4.setxattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JII)I");
            }
            public static  @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemorySegment allocate(setxattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setxattr$VH() {
            return fuse_h_constants_4.fuse_operations$setxattr$VH();
        }
        public static  @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemoryAddress setxattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setxattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemoryAddress setxattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setxattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setxattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setxattr$VH().set(seg, x);
        }
        public static void setxattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setxattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface getxattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3, int x4);
            public static  @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemorySegment allocate(getxattr fi) {
                return RuntimeHelper.upcallStub(getxattr.class, fi, fuse_h_constants_4.getxattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I");
            }
            public static  @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemorySegment allocate(getxattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle getxattr$VH() {
            return fuse_h_constants_4.fuse_operations$getxattr$VH();
        }
        public static  @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemoryAddress getxattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$getxattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemoryAddress getxattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$getxattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void getxattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$getxattr$VH().set(seg, x);
        }
        public static void getxattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$getxattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface listxattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
            public static  @C("int(*)(char*,char*,size_t)") MemorySegment allocate(listxattr fi) {
                return RuntimeHelper.upcallStub(listxattr.class, fi, fuse_h_constants_4.listxattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
            }
            public static  @C("int(*)(char*,char*,size_t)") MemorySegment allocate(listxattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle listxattr$VH() {
            return fuse_h_constants_4.fuse_operations$listxattr$VH();
        }
        public static  @C("int(*)(char*,char*,size_t)") MemoryAddress listxattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$listxattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,size_t)") MemoryAddress listxattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$listxattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void listxattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,size_t)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$listxattr$VH().set(seg, x);
        }
        public static void listxattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,size_t)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$listxattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface removexattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(removexattr fi) {
                return RuntimeHelper.upcallStub(removexattr.class, fi, fuse_h_constants_4.removexattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(removexattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle removexattr$VH() {
            return fuse_h_constants_4.fuse_operations$removexattr$VH();
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress removexattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$removexattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress removexattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$removexattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void removexattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$removexattr$VH().set(seg, x);
        }
        public static void removexattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$removexattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface opendir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(opendir fi) {
                return RuntimeHelper.upcallStub(opendir.class, fi, fuse_h_constants_4.opendir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(opendir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle opendir$VH() {
            return fuse_h_constants_4.fuse_operations$opendir$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress opendir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$opendir$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress opendir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$opendir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void opendir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$opendir$VH().set(seg, x);
        }
        public static void opendir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$opendir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface readdir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemorySegment allocate(readdir fi) {
                return RuntimeHelper.upcallStub(readdir.class, fi, fuse_h_constants_4.readdir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemorySegment allocate(readdir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle readdir$VH() {
            return fuse_h_constants_4.fuse_operations$readdir$VH();
        }
        public static  @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemoryAddress readdir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$readdir$VH().get(seg);
        }
        public static  @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemoryAddress readdir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$readdir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void readdir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$readdir$VH().set(seg, x);
        }
        public static void readdir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$readdir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface releasedir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(releasedir fi) {
                return RuntimeHelper.upcallStub(releasedir.class, fi, fuse_h_constants_4.releasedir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(releasedir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle releasedir$VH() {
            return fuse_h_constants_4.fuse_operations$releasedir$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress releasedir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$releasedir$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress releasedir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$releasedir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void releasedir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$releasedir$VH().set(seg, x);
        }
        public static void releasedir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$releasedir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface fsyncdir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemorySegment allocate(fsyncdir fi) {
                return RuntimeHelper.upcallStub(fsyncdir.class, fi, fuse_h_constants_4.fsyncdir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemorySegment allocate(fsyncdir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle fsyncdir$VH() {
            return fuse_h_constants_4.fuse_operations$fsyncdir$VH();
        }
        public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress fsyncdir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$fsyncdir$VH().get(seg);
        }
        public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress fsyncdir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$fsyncdir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fsyncdir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$fsyncdir$VH().set(seg, x);
        }
        public static void fsyncdir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$fsyncdir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface init {

            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("void*(*)(struct fuse_conn_info*)") MemorySegment allocate(init fi) {
                return RuntimeHelper.upcallStub(init.class, fi, fuse_h_constants_4.init$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
            }
            public static  @C("void*(*)(struct fuse_conn_info*)") MemorySegment allocate(init fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle init$VH() {
            return fuse_h_constants_4.fuse_operations$init$VH();
        }
        public static  @C("void*(*)(struct fuse_conn_info*)") MemoryAddress init$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$init$VH().get(seg);
        }
        public static  @C("void*(*)(struct fuse_conn_info*)") MemoryAddress init$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$init$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void init$set(@C("struct fuse_operations") MemorySegment seg, @C("void*(*)(struct fuse_conn_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$init$VH().set(seg, x);
        }
        public static void init$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("void*(*)(struct fuse_conn_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$init$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface destroy {

            void apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("void(*)(void*)") MemorySegment allocate(destroy fi) {
                return RuntimeHelper.upcallStub(destroy.class, fi, fuse_h_constants_4.destroy$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
            }
            public static  @C("void(*)(void*)") MemorySegment allocate(destroy fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle destroy$VH() {
            return fuse_h_constants_4.fuse_operations$destroy$VH();
        }
        public static  @C("void(*)(void*)") MemoryAddress destroy$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$destroy$VH().get(seg);
        }
        public static  @C("void(*)(void*)") MemoryAddress destroy$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$destroy$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void destroy$set(@C("struct fuse_operations") MemorySegment seg, @C("void(*)(void*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$destroy$VH().set(seg, x);
        }
        public static void destroy$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("void(*)(void*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$destroy$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface access {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
            public static  @C("int(*)(char*,int)") MemorySegment allocate(access fi) {
                return RuntimeHelper.upcallStub(access.class, fi, fuse_h_constants_4.access$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;I)I");
            }
            public static  @C("int(*)(char*,int)") MemorySegment allocate(access fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle access$VH() {
            return fuse_h_constants_4.fuse_operations$access$VH();
        }
        public static  @C("int(*)(char*,int)") MemoryAddress access$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$access$VH().get(seg);
        }
        public static  @C("int(*)(char*,int)") MemoryAddress access$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$access$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void access$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,int)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$access$VH().set(seg, x);
        }
        public static void access$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,int)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$access$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface create {

            int apply(jdk.incubator.foreign.MemoryAddress x0, short x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemorySegment allocate(create fi) {
                return RuntimeHelper.upcallStub(create.class, fi, fuse_h_constants_4.create$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemorySegment allocate(create fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle create$VH() {
            return fuse_h_constants_4.fuse_operations$create$VH();
        }
        public static  @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemoryAddress create$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$create$VH().get(seg);
        }
        public static  @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemoryAddress create$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$create$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void create$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$create$VH().set(seg, x);
        }
        public static void create$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$create$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface ftruncate {

            int apply(jdk.incubator.foreign.MemoryAddress x0, long x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,off_t,struct fuse_file_info*)") MemorySegment allocate(ftruncate fi) {
                return RuntimeHelper.upcallStub(ftruncate.class, fi, fuse_h_constants_4.ftruncate$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,off_t,struct fuse_file_info*)") MemorySegment allocate(ftruncate fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle ftruncate$VH() {
            return fuse_h_constants_4.fuse_operations$ftruncate$VH();
        }
        public static  @C("int(*)(char*,off_t,struct fuse_file_info*)") MemoryAddress ftruncate$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$ftruncate$VH().get(seg);
        }
        public static  @C("int(*)(char*,off_t,struct fuse_file_info*)") MemoryAddress ftruncate$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$ftruncate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ftruncate$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$ftruncate$VH().set(seg, x);
        }
        public static void ftruncate$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$ftruncate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface fgetattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemorySegment allocate(fgetattr fi) {
                return RuntimeHelper.upcallStub(fgetattr.class, fi, fuse_h_constants_4.fgetattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemorySegment allocate(fgetattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle fgetattr$VH() {
            return fuse_h_constants_4.fuse_operations$fgetattr$VH();
        }
        public static  @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemoryAddress fgetattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$fgetattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemoryAddress fgetattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$fgetattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fgetattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$fgetattr$VH().set(seg, x);
        }
        public static void fgetattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$fgetattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface lock {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
            public static  @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemorySegment allocate(lock fi) {
                return RuntimeHelper.upcallStub(lock.class, fi, fuse_h_constants_4.lock$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemorySegment allocate(lock fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle lock$VH() {
            return fuse_h_constants_4.fuse_operations$lock$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemoryAddress lock$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$lock$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemoryAddress lock$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$lock$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lock$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$lock$VH().set(seg, x);
        }
        public static void lock$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$lock$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface utimens {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(utimens fi) {
                return RuntimeHelper.upcallStub(utimens.class, fi, fuse_h_constants_4.utimens$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(utimens fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle utimens$VH() {
            return fuse_h_constants_4.fuse_operations$utimens$VH();
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress utimens$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$utimens$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress utimens$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$utimens$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void utimens$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$utimens$VH().set(seg, x);
        }
        public static void utimens$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$utimens$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface bmap {

            int apply(jdk.incubator.foreign.MemoryAddress x0, long x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,size_t,uint64_t*)") MemorySegment allocate(bmap fi) {
                return RuntimeHelper.upcallStub(bmap.class, fi, fuse_h_constants_4.bmap$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,size_t,uint64_t*)") MemorySegment allocate(bmap fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle bmap$VH() {
            return fuse_h_constants_4.fuse_operations$bmap$VH();
        }
        public static  @C("int(*)(char*,size_t,uint64_t*)") MemoryAddress bmap$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$bmap$VH().get(seg);
        }
        public static  @C("int(*)(char*,size_t,uint64_t*)") MemoryAddress bmap$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$bmap$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bmap$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,size_t,uint64_t*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$bmap$VH().set(seg, x);
        }
        public static void bmap$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,size_t,uint64_t*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$bmap$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface ioctl {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
            public static  @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemorySegment allocate(ioctl fi) {
                return RuntimeHelper.upcallStub(ioctl.class, fi, fuse_h_constants_4.ioctl$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemorySegment allocate(ioctl fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle ioctl$VH() {
            return fuse_h_constants_4.fuse_operations$ioctl$VH();
        }
        public static  @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemoryAddress ioctl$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$ioctl$VH().get(seg);
        }
        public static  @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemoryAddress ioctl$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$ioctl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ioctl$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$ioctl$VH().set(seg, x);
        }
        public static void ioctl$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$ioctl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface poll {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
            public static  @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemorySegment allocate(poll fi) {
                return RuntimeHelper.upcallStub(poll.class, fi, fuse_h_constants_4.poll$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemorySegment allocate(poll fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle poll$VH() {
            return fuse_h_constants_4.fuse_operations$poll$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemoryAddress poll$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$poll$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemoryAddress poll$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$poll$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void poll$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$poll$VH().set(seg, x);
        }
        public static void poll$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$poll$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface write_buf {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3);
            public static  @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemorySegment allocate(write_buf fi) {
                return RuntimeHelper.upcallStub(write_buf.class, fi, fuse_h_constants_4.write_buf$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemorySegment allocate(write_buf fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle write_buf$VH() {
            return fuse_h_constants_4.fuse_operations$write_buf$VH();
        }
        public static  @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemoryAddress write_buf$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$write_buf$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemoryAddress write_buf$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$write_buf$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void write_buf$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$write_buf$VH().set(seg, x);
        }
        public static void write_buf$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$write_buf$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface read_buf {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(read_buf fi) {
                return RuntimeHelper.upcallStub(read_buf.class, fi, fuse_h_constants_4.read_buf$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(read_buf fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle read_buf$VH() {
            return fuse_h_constants_4.fuse_operations$read_buf$VH();
        }
        public static  @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemoryAddress read_buf$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$read_buf$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemoryAddress read_buf$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$read_buf$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void read_buf$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$read_buf$VH().set(seg, x);
        }
        public static void read_buf$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$read_buf$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface flock$1 {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
            public static  @C("int(*)(char*,struct fuse_file_info*,int)") MemorySegment allocate(flock$1 fi) {
                return RuntimeHelper.upcallStub(flock$1.class, fi, fuse_h_constants_4.flock$1$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*,int)") MemorySegment allocate(flock$1 fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle flock$VH() {
            return fuse_h_constants_4.fuse_operations$flock$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,int)") MemoryAddress flock$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$flock$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,int)") MemoryAddress flock$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$flock$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flock$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*,int)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$flock$VH().set(seg, x);
        }
        public static void flock$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*,int)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$flock$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface fallocate {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, long x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemorySegment allocate(fallocate fi) {
                return RuntimeHelper.upcallStub(fallocate.class, fi, fuse_h_constants_4.fallocate$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;IJJLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemorySegment allocate(fallocate fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle fallocate$VH() {
            return fuse_h_constants_4.fuse_operations$fallocate$VH();
        }
        public static  @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemoryAddress fallocate$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$fallocate$VH().get(seg);
        }
        public static  @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemoryAddress fallocate$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$fallocate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fallocate$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$fallocate$VH().set(seg, x);
        }
        public static void fallocate$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$fallocate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface reserved00 {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7);
            public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemorySegment allocate(reserved00 fi) {
                return RuntimeHelper.upcallStub(reserved00.class, fi, fuse_h_constants_4.reserved00$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemorySegment allocate(reserved00 fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle reserved00$VH() {
            return fuse_h_constants_4.fuse_operations$reserved00$VH();
        }
        public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress reserved00$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$reserved00$VH().get(seg);
        }
        public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress reserved00$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$reserved00$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void reserved00$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$reserved00$VH().set(seg, x);
        }
        public static void reserved00$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$reserved00$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface reserved01 {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7);
            public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemorySegment allocate(reserved01 fi) {
                return RuntimeHelper.upcallStub(reserved01.class, fi, fuse_h_constants_4.reserved01$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemorySegment allocate(reserved01 fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle reserved01$VH() {
            return fuse_h_constants_4.fuse_operations$reserved01$VH();
        }
        public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress reserved01$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$reserved01$VH().get(seg);
        }
        public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress reserved01$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$reserved01$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void reserved01$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$reserved01$VH().set(seg, x);
        }
        public static void reserved01$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$reserved01$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface renamex {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
            public static  @C("int(*)(char*,char*,unsigned int)") MemorySegment allocate(renamex fi) {
                return RuntimeHelper.upcallStub(renamex.class, fi, fuse_h_constants_4.renamex$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
            }
            public static  @C("int(*)(char*,char*,unsigned int)") MemorySegment allocate(renamex fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle renamex$VH() {
            return fuse_h_constants_4.fuse_operations$renamex$VH();
        }
        public static  @C("int(*)(char*,char*,unsigned int)") MemoryAddress renamex$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$renamex$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,unsigned int)") MemoryAddress renamex$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$renamex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void renamex$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,unsigned int)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$renamex$VH().set(seg, x);
        }
        public static void renamex$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,unsigned int)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$renamex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface statfs_x {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct statfs*)") MemorySegment allocate(statfs_x fi) {
                return RuntimeHelper.upcallStub(statfs_x.class, fi, fuse_h_constants_4.statfs_x$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct statfs*)") MemorySegment allocate(statfs_x fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle statfs_x$VH() {
            return fuse_h_constants_4.fuse_operations$statfs_x$VH();
        }
        public static  @C("int(*)(char*,struct statfs*)") MemoryAddress statfs_x$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$statfs_x$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct statfs*)") MemoryAddress statfs_x$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$statfs_x$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void statfs_x$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct statfs*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$statfs_x$VH().set(seg, x);
        }
        public static void statfs_x$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct statfs*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$statfs_x$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setvolname {

            int apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("int(*)(char*)") MemorySegment allocate(setvolname fi) {
                return RuntimeHelper.upcallStub(setvolname.class, fi, fuse_h_constants_4.setvolname$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*)") MemorySegment allocate(setvolname fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setvolname$VH() {
            return fuse_h_constants_4.fuse_operations$setvolname$VH();
        }
        public static  @C("int(*)(char*)") MemoryAddress setvolname$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setvolname$VH().get(seg);
        }
        public static  @C("int(*)(char*)") MemoryAddress setvolname$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setvolname$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setvolname$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setvolname$VH().set(seg, x);
        }
        public static void setvolname$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setvolname$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface exchange {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
            public static  @C("int(*)(char*,char*,unsigned long)") MemorySegment allocate(exchange fi) {
                return RuntimeHelper.upcallStub(exchange.class, fi, fuse_h_constants_4.exchange$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
            }
            public static  @C("int(*)(char*,char*,unsigned long)") MemorySegment allocate(exchange fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle exchange$VH() {
            return fuse_h_constants_4.fuse_operations$exchange$VH();
        }
        public static  @C("int(*)(char*,char*,unsigned long)") MemoryAddress exchange$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$exchange$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,unsigned long)") MemoryAddress exchange$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$exchange$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exchange$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,unsigned long)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$exchange$VH().set(seg, x);
        }
        public static void exchange$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,unsigned long)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$exchange$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface getxtimes {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,struct timespec*,struct timespec*)") MemorySegment allocate(getxtimes fi) {
                return RuntimeHelper.upcallStub(getxtimes.class, fi, fuse_h_constants_4.getxtimes$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct timespec*,struct timespec*)") MemorySegment allocate(getxtimes fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle getxtimes$VH() {
            return fuse_h_constants_4.fuse_operations$getxtimes$VH();
        }
        public static  @C("int(*)(char*,struct timespec*,struct timespec*)") MemoryAddress getxtimes$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$getxtimes$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct timespec*,struct timespec*)") MemoryAddress getxtimes$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$getxtimes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void getxtimes$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct timespec*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$getxtimes$VH().set(seg, x);
        }
        public static void getxtimes$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct timespec*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$getxtimes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setbkuptime {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setbkuptime fi) {
                return RuntimeHelper.upcallStub(setbkuptime.class, fi, fuse_h_constants_4.setbkuptime$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setbkuptime fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setbkuptime$VH() {
            return fuse_h_constants_4.fuse_operations$setbkuptime$VH();
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setbkuptime$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setbkuptime$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setbkuptime$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setbkuptime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setbkuptime$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setbkuptime$VH().set(seg, x);
        }
        public static void setbkuptime$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setbkuptime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setchgtime {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setchgtime fi) {
                return RuntimeHelper.upcallStub(setchgtime.class, fi, fuse_h_constants_4.setchgtime$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setchgtime fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setchgtime$VH() {
            return fuse_h_constants_4.fuse_operations$setchgtime$VH();
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setchgtime$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setchgtime$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setchgtime$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setchgtime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setchgtime$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setchgtime$VH().set(seg, x);
        }
        public static void setchgtime$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setchgtime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setcrtime {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setcrtime fi) {
                return RuntimeHelper.upcallStub(setcrtime.class, fi, fuse_h_constants_4.setcrtime$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setcrtime fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setcrtime$VH() {
            return fuse_h_constants_4.fuse_operations$setcrtime$VH();
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setcrtime$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setcrtime$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setcrtime$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setcrtime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setcrtime$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setcrtime$VH().set(seg, x);
        }
        public static void setcrtime$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setcrtime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface chflags {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
            public static  @C("int(*)(char*,uint32_t)") MemorySegment allocate(chflags fi) {
                return RuntimeHelper.upcallStub(chflags.class, fi, fuse_h_constants_1.chflags$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;I)I");
            }
            public static  @C("int(*)(char*,uint32_t)") MemorySegment allocate(chflags fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle chflags$VH() {
            return fuse_h_constants_4.fuse_operations$chflags$VH();
        }
        public static  @C("int(*)(char*,uint32_t)") MemoryAddress chflags$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$chflags$VH().get(seg);
        }
        public static  @C("int(*)(char*,uint32_t)") MemoryAddress chflags$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$chflags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void chflags$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,uint32_t)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$chflags$VH().set(seg, x);
        }
        public static void chflags$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,uint32_t)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$chflags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setattr_x$2 {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct setattr_x*)") MemorySegment allocate(setattr_x$2 fi) {
                return RuntimeHelper.upcallStub(setattr_x$2.class, fi, fuse_h_constants_4.setattr_x$2$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct setattr_x*)") MemorySegment allocate(setattr_x$2 fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setattr_x$VH() {
            return fuse_h_constants_4.fuse_operations$setattr_x$VH();
        }
        public static  @C("int(*)(char*,struct setattr_x*)") MemoryAddress setattr_x$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setattr_x$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct setattr_x*)") MemoryAddress setattr_x$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$setattr_x$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setattr_x$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct setattr_x*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setattr_x$VH().set(seg, x);
        }
        public static void setattr_x$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct setattr_x*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$setattr_x$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface fsetattr_x {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemorySegment allocate(fsetattr_x fi) {
                return RuntimeHelper.upcallStub(fsetattr_x.class, fi, fuse_h_constants_4.fsetattr_x$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemorySegment allocate(fsetattr_x fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle fsetattr_x$VH() {
            return fuse_h_constants_4.fuse_operations$fsetattr_x$VH();
        }
        public static  @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemoryAddress fsetattr_x$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$fsetattr_x$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemoryAddress fsetattr_x$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_operations$fsetattr_x$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fsetattr_x$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$fsetattr_x$VH().set(seg, x);
        }
        public static void fsetattr_x$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_4.fuse_operations$fsetattr_x$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_operations") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_operations") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_operations[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_operations[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_operations*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_operations*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_operations") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fuse_context")public static class fuse_context {

        /* package-private */ fuse_context() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_4.fuse_context$struct$LAYOUT();
        }
        public static VarHandle fuse$VH() {
            return fuse_h_constants_4.fuse_context$fuse$VH();
        }
        public static  @C("struct fuse*") MemoryAddress fuse$get(@C("struct fuse_context") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_context$fuse$VH().get(seg);
        }
        public static  @C("struct fuse*") MemoryAddress fuse$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_context$fuse$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fuse$set(@C("struct fuse_context") MemorySegment seg, @C("struct fuse*") MemoryAddress x) {
            fuse_h_constants_4.fuse_context$fuse$VH().set(seg, x);
        }
        public static void fuse$set(@C("struct fuse_context") MemorySegment seg, long index, @C("struct fuse*") MemoryAddress x) {
            fuse_h_constants_4.fuse_context$fuse$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle uid$VH() {
            return fuse_h_constants_4.fuse_context$uid$VH();
        }
        public static  @C("uid_t") int uid$get(@C("struct fuse_context") MemorySegment seg) {
            return (int)fuse_h_constants_4.fuse_context$uid$VH().get(seg);
        }
        public static  @C("uid_t") int uid$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (int)fuse_h_constants_4.fuse_context$uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void uid$set(@C("struct fuse_context") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_4.fuse_context$uid$VH().set(seg, x);
        }
        public static void uid$set(@C("struct fuse_context") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_4.fuse_context$uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle gid$VH() {
            return fuse_h_constants_4.fuse_context$gid$VH();
        }
        public static  @C("gid_t") int gid$get(@C("struct fuse_context") MemorySegment seg) {
            return (int)fuse_h_constants_4.fuse_context$gid$VH().get(seg);
        }
        public static  @C("gid_t") int gid$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (int)fuse_h_constants_4.fuse_context$gid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void gid$set(@C("struct fuse_context") MemorySegment seg, @C("gid_t") int x) {
            fuse_h_constants_4.fuse_context$gid$VH().set(seg, x);
        }
        public static void gid$set(@C("struct fuse_context") MemorySegment seg, long index, @C("gid_t") int x) {
            fuse_h_constants_4.fuse_context$gid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pid$VH() {
            return fuse_h_constants_4.fuse_context$pid$VH();
        }
        public static  @C("pid_t") int pid$get(@C("struct fuse_context") MemorySegment seg) {
            return (int)fuse_h_constants_4.fuse_context$pid$VH().get(seg);
        }
        public static  @C("pid_t") int pid$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (int)fuse_h_constants_4.fuse_context$pid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pid$set(@C("struct fuse_context") MemorySegment seg, @C("pid_t") int x) {
            fuse_h_constants_4.fuse_context$pid$VH().set(seg, x);
        }
        public static void pid$set(@C("struct fuse_context") MemorySegment seg, long index, @C("pid_t") int x) {
            fuse_h_constants_4.fuse_context$pid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle private_data$VH() {
            return fuse_h_constants_4.fuse_context$private_data$VH();
        }
        public static  @C("void*") MemoryAddress private_data$get(@C("struct fuse_context") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_context$private_data$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress private_data$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_context$private_data$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void private_data$set(@C("struct fuse_context") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_4.fuse_context$private_data$VH().set(seg, x);
        }
        public static void private_data$set(@C("struct fuse_context") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_4.fuse_context$private_data$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle umask$VH() {
            return fuse_h_constants_4.fuse_context$umask$VH();
        }
        public static  @C("mode_t") short umask$get(@C("struct fuse_context") MemorySegment seg) {
            return (short)fuse_h_constants_4.fuse_context$umask$VH().get(seg);
        }
        public static  @C("mode_t") short umask$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (short)fuse_h_constants_4.fuse_context$umask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void umask$set(@C("struct fuse_context") MemorySegment seg, @C("mode_t") short x) {
            fuse_h_constants_4.fuse_context$umask$VH().set(seg, x);
        }
        public static void umask$set(@C("struct fuse_context") MemorySegment seg, long index, @C("mode_t") short x) {
            fuse_h_constants_4.fuse_context$umask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_context") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_context") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_context[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_context[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_context*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_context*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_context") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static interface fuse_fs_readdir$filler {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3);
        public static  @C("fuse_fill_dir_t") MemorySegment allocate(fuse_fs_readdir$filler fi) {
            return RuntimeHelper.upcallStub(fuse_fs_readdir$filler.class, fi, fuse_h_constants_4.fuse_fs_readdir$filler$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
        }
        public static  @C("fuse_fill_dir_t") MemorySegment allocate(fuse_fs_readdir$filler fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    @C("struct fuse_module")public static class fuse_module {

        /* package-private */ fuse_module() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_4.fuse_module$struct$LAYOUT();
        }
        public static VarHandle name$VH() {
            return fuse_h_constants_4.fuse_module$name$VH();
        }
        public static  @C("char*") MemoryAddress name$get(@C("struct fuse_module") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_module$name$VH().get(seg);
        }
        public static  @C("char*") MemoryAddress name$get(@C("struct fuse_module") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_module$name$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void name$set(@C("struct fuse_module") MemorySegment seg, @C("char*") MemoryAddress x) {
            fuse_h_constants_4.fuse_module$name$VH().set(seg, x);
        }
        public static void name$set(@C("struct fuse_module") MemorySegment seg, long index, @C("char*") MemoryAddress x) {
            fuse_h_constants_4.fuse_module$name$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface factory {

            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemorySegment allocate(factory fi) {
                return RuntimeHelper.upcallStub(factory.class, fi, fuse_h_constants_4.factory$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
            }
            public static  @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemorySegment allocate(factory fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle factory$VH() {
            return fuse_h_constants_4.fuse_module$factory$VH();
        }
        public static  @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemoryAddress factory$get(@C("struct fuse_module") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_module$factory$VH().get(seg);
        }
        public static  @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemoryAddress factory$get(@C("struct fuse_module") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_module$factory$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void factory$set(@C("struct fuse_module") MemorySegment seg, @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemoryAddress x) {
            fuse_h_constants_4.fuse_module$factory$VH().set(seg, x);
        }
        public static void factory$set(@C("struct fuse_module") MemorySegment seg, long index, @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemoryAddress x) {
            fuse_h_constants_4.fuse_module$factory$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle next$VH() {
            return fuse_h_constants_4.fuse_module$next$VH();
        }
        public static  @C("struct fuse_module*") MemoryAddress next$get(@C("struct fuse_module") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_module$next$VH().get(seg);
        }
        public static  @C("struct fuse_module*") MemoryAddress next$get(@C("struct fuse_module") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_module$next$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void next$set(@C("struct fuse_module") MemorySegment seg, @C("struct fuse_module*") MemoryAddress x) {
            fuse_h_constants_4.fuse_module$next$VH().set(seg, x);
        }
        public static void next$set(@C("struct fuse_module") MemorySegment seg, long index, @C("struct fuse_module*") MemoryAddress x) {
            fuse_h_constants_4.fuse_module$next$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle so$VH() {
            return fuse_h_constants_4.fuse_module$so$VH();
        }
        public static  @C("struct fusemod_so*") MemoryAddress so$get(@C("struct fuse_module") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_module$so$VH().get(seg);
        }
        public static  @C("struct fusemod_so*") MemoryAddress so$get(@C("struct fuse_module") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_module$so$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void so$set(@C("struct fuse_module") MemorySegment seg, @C("struct fusemod_so*") MemoryAddress x) {
            fuse_h_constants_4.fuse_module$so$VH().set(seg, x);
        }
        public static void so$set(@C("struct fuse_module") MemorySegment seg, long index, @C("struct fusemod_so*") MemoryAddress x) {
            fuse_h_constants_4.fuse_module$so$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ctr$VH() {
            return fuse_h_constants_4.fuse_module$ctr$VH();
        }
        public static  @C("int") int ctr$get(@C("struct fuse_module") MemorySegment seg) {
            return (int)fuse_h_constants_4.fuse_module$ctr$VH().get(seg);
        }
        public static  @C("int") int ctr$get(@C("struct fuse_module") MemorySegment seg, long index) {
            return (int)fuse_h_constants_4.fuse_module$ctr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ctr$set(@C("struct fuse_module") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_4.fuse_module$ctr$VH().set(seg, x);
        }
        public static void ctr$set(@C("struct fuse_module") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_4.fuse_module$ctr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_module") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_module") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_module[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_module[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_module*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_module*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_module") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static interface fuse_loop_mt_proc$proc {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  @C("fuse_processor_t") MemorySegment allocate(fuse_loop_mt_proc$proc fi) {
            return RuntimeHelper.upcallStub(fuse_loop_mt_proc$proc.class, fi, fuse_h_constants_4.fuse_loop_mt_proc$proc$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("fuse_processor_t") MemorySegment allocate(fuse_loop_mt_proc$proc fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface fuse_set_getcontext_func$func {

        jdk.incubator.foreign.MemoryAddress apply();
        public static  @C("struct fuse_context*(*)()") MemorySegment allocate(fuse_set_getcontext_func$func fi) {
            return RuntimeHelper.upcallStub(fuse_set_getcontext_func$func.class, fi, fuse_h_constants_4.fuse_set_getcontext_func$func$FUNC(), "()Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  @C("struct fuse_context*(*)()") MemorySegment allocate(fuse_set_getcontext_func$func fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    @C("struct au_token")public static class token_t {

        /* package-private */ token_t() {}
        public static @C("struct au_token*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct au_token*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

}


