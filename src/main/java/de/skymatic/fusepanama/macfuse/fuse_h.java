// Generated by jextract

package de.skymatic.fusepanama.macfuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
public final class fuse_h  {

    /* package-private */ fuse_h() {}
    public static @C("int") int FUSE_MAJOR_VERSION() {
        return fuse_h_constants_0.FUSE_MAJOR_VERSION();
    }
    public static @C("int") int FUSE_MINOR_VERSION() {
        return fuse_h_constants_0.FUSE_MINOR_VERSION();
    }
    public static @C("int") int S_BLKSIZE() {
        return fuse_h_constants_0.S_BLKSIZE();
    }
    public static @C("int") int UF_SETTABLE() {
        return fuse_h_constants_0.UF_SETTABLE();
    }
    public static @C("int") int UF_NODUMP() {
        return fuse_h_constants_0.UF_NODUMP();
    }
    public static @C("int") int UF_IMMUTABLE() {
        return fuse_h_constants_0.UF_IMMUTABLE();
    }
    public static @C("int") int UF_APPEND() {
        return fuse_h_constants_0.UF_APPEND();
    }
    public static @C("int") int UF_OPAQUE() {
        return fuse_h_constants_0.UF_OPAQUE();
    }
    public static @C("int") int UF_COMPRESSED() {
        return fuse_h_constants_0.UF_COMPRESSED();
    }
    public static @C("int") int UF_TRACKED() {
        return fuse_h_constants_0.UF_TRACKED();
    }
    public static @C("int") int UF_DATAVAULT() {
        return fuse_h_constants_0.UF_DATAVAULT();
    }
    public static @C("int") int UF_HIDDEN() {
        return fuse_h_constants_0.UF_HIDDEN();
    }
    public static @C("int") int SF_SUPPORTED() {
        return fuse_h_constants_0.SF_SUPPORTED();
    }
    public static @C("int") int SF_SETTABLE() {
        return fuse_h_constants_0.SF_SETTABLE();
    }
    public static @C("int") int SF_ARCHIVED() {
        return fuse_h_constants_0.SF_ARCHIVED();
    }
    public static @C("int") int SF_IMMUTABLE() {
        return fuse_h_constants_0.SF_IMMUTABLE();
    }
    public static @C("int") int SF_APPEND() {
        return fuse_h_constants_0.SF_APPEND();
    }
    public static @C("int") int SF_RESTRICTED() {
        return fuse_h_constants_0.SF_RESTRICTED();
    }
    public static @C("int") int SF_NOUNLINK() {
        return fuse_h_constants_0.SF_NOUNLINK();
    }
    public static @C("int") int SF_FIRMLINK() {
        return fuse_h_constants_0.SF_FIRMLINK();
    }
    public static @C("int") int SF_DATALESS() {
        return fuse_h_constants_0.SF_DATALESS();
    }
    public static @C("int") int EF_MAY_SHARE_BLOCKS() {
        return fuse_h_constants_0.EF_MAY_SHARE_BLOCKS();
    }
    public static @C("int") int EF_NO_XATTRS() {
        return fuse_h_constants_0.EF_NO_XATTRS();
    }
    public static @C("int") int EF_IS_SYNC_ROOT() {
        return fuse_h_constants_0.EF_IS_SYNC_ROOT();
    }
    public static @C("int") int EF_IS_PURGEABLE() {
        return fuse_h_constants_0.EF_IS_PURGEABLE();
    }
    public static @C("int") int EF_IS_SPARSE() {
        return fuse_h_constants_0.EF_IS_SPARSE();
    }
    public static @C("int") int EF_IS_SYNTHETIC() {
        return fuse_h_constants_0.EF_IS_SYNTHETIC();
    }
    public static @C("int") int FUSE_IOCTL_MAX_IOV() {
        return fuse_h_constants_0.FUSE_IOCTL_MAX_IOV();
    }
    @C("struct timespec")public static class timespec {

        /* package-private */ timespec() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.timespec$struct$LAYOUT();
        }
        public static VarHandle tv_sec$VH() {
            return fuse_h_constants_0.timespec$tv_sec$VH();
        }
        public static  @C("__darwin_time_t") long tv_sec$get(@C("struct timespec") MemorySegment seg) {
            return (long)fuse_h_constants_0.timespec$tv_sec$VH().get(seg);
        }
        public static  @C("__darwin_time_t") long tv_sec$get(@C("struct timespec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.timespec$tv_sec$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tv_sec$set(@C("struct timespec") MemorySegment seg, @C("__darwin_time_t") long x) {
            fuse_h_constants_0.timespec$tv_sec$VH().set(seg, x);
        }
        public static void tv_sec$set(@C("struct timespec") MemorySegment seg, long index, @C("__darwin_time_t") long x) {
            fuse_h_constants_0.timespec$tv_sec$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tv_nsec$VH() {
            return fuse_h_constants_0.timespec$tv_nsec$VH();
        }
        public static  @C("long") long tv_nsec$get(@C("struct timespec") MemorySegment seg) {
            return (long)fuse_h_constants_0.timespec$tv_nsec$VH().get(seg);
        }
        public static  @C("long") long tv_nsec$get(@C("struct timespec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.timespec$tv_nsec$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tv_nsec$set(@C("struct timespec") MemorySegment seg, @C("long") long x) {
            fuse_h_constants_0.timespec$tv_nsec$VH().set(seg, x);
        }
        public static void tv_nsec$set(@C("struct timespec") MemorySegment seg, long index, @C("long") long x) {
            fuse_h_constants_0.timespec$tv_nsec$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct timespec") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct timespec") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct timespec[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct timespec[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct timespec*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct timespec*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct timespec") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ostat")public static class ostat {

        /* package-private */ ostat() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.ostat$struct$LAYOUT();
        }
        public static VarHandle st_dev$VH() {
            return fuse_h_constants_0.ostat$st_dev$VH();
        }
        public static  @C("__uint16_t") short st_dev$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_0.ostat$st_dev$VH().get(seg);
        }
        public static  @C("__uint16_t") short st_dev$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.ostat$st_dev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_dev$set(@C("struct ostat") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_0.ostat$st_dev$VH().set(seg, x);
        }
        public static void st_dev$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_0.ostat$st_dev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_ino$VH() {
            return fuse_h_constants_0.ostat$st_ino$VH();
        }
        public static  @C("ino_t") long st_ino$get(@C("struct ostat") MemorySegment seg) {
            return (long)fuse_h_constants_0.ostat$st_ino$VH().get(seg);
        }
        public static  @C("ino_t") long st_ino$get(@C("struct ostat") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.ostat$st_ino$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_ino$set(@C("struct ostat") MemorySegment seg, @C("ino_t") long x) {
            fuse_h_constants_0.ostat$st_ino$VH().set(seg, x);
        }
        public static void st_ino$set(@C("struct ostat") MemorySegment seg, long index, @C("ino_t") long x) {
            fuse_h_constants_0.ostat$st_ino$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_mode$VH() {
            return fuse_h_constants_0.ostat$st_mode$VH();
        }
        public static  @C("mode_t") short st_mode$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_0.ostat$st_mode$VH().get(seg);
        }
        public static  @C("mode_t") short st_mode$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.ostat$st_mode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_mode$set(@C("struct ostat") MemorySegment seg, @C("mode_t") short x) {
            fuse_h_constants_0.ostat$st_mode$VH().set(seg, x);
        }
        public static void st_mode$set(@C("struct ostat") MemorySegment seg, long index, @C("mode_t") short x) {
            fuse_h_constants_0.ostat$st_mode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_nlink$VH() {
            return fuse_h_constants_0.ostat$st_nlink$VH();
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_0.ostat$st_nlink$VH().get(seg);
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.ostat$st_nlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_nlink$set(@C("struct ostat") MemorySegment seg, @C("nlink_t") short x) {
            fuse_h_constants_0.ostat$st_nlink$VH().set(seg, x);
        }
        public static void st_nlink$set(@C("struct ostat") MemorySegment seg, long index, @C("nlink_t") short x) {
            fuse_h_constants_0.ostat$st_nlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_uid$VH() {
            return fuse_h_constants_0.ostat$st_uid$VH();
        }
        public static  @C("__uint16_t") short st_uid$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_0.ostat$st_uid$VH().get(seg);
        }
        public static  @C("__uint16_t") short st_uid$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.ostat$st_uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_uid$set(@C("struct ostat") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_0.ostat$st_uid$VH().set(seg, x);
        }
        public static void st_uid$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_0.ostat$st_uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gid$VH() {
            return fuse_h_constants_0.ostat$st_gid$VH();
        }
        public static  @C("__uint16_t") short st_gid$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_0.ostat$st_gid$VH().get(seg);
        }
        public static  @C("__uint16_t") short st_gid$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.ostat$st_gid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gid$set(@C("struct ostat") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_0.ostat$st_gid$VH().set(seg, x);
        }
        public static void st_gid$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_0.ostat$st_gid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_rdev$VH() {
            return fuse_h_constants_0.ostat$st_rdev$VH();
        }
        public static  @C("__uint16_t") short st_rdev$get(@C("struct ostat") MemorySegment seg) {
            return (short)fuse_h_constants_0.ostat$st_rdev$VH().get(seg);
        }
        public static  @C("__uint16_t") short st_rdev$get(@C("struct ostat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.ostat$st_rdev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_rdev$set(@C("struct ostat") MemorySegment seg, @C("__uint16_t") short x) {
            fuse_h_constants_0.ostat$st_rdev$VH().set(seg, x);
        }
        public static void st_rdev$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint16_t") short x) {
            fuse_h_constants_0.ostat$st_rdev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_size$VH() {
            return fuse_h_constants_0.ostat$st_size$VH();
        }
        public static  @C("__int32_t") int st_size$get(@C("struct ostat") MemorySegment seg) {
            return (int)fuse_h_constants_0.ostat$st_size$VH().get(seg);
        }
        public static  @C("__int32_t") int st_size$get(@C("struct ostat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.ostat$st_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_size$set(@C("struct ostat") MemorySegment seg, @C("__int32_t") int x) {
            fuse_h_constants_0.ostat$st_size$VH().set(seg, x);
        }
        public static void st_size$set(@C("struct ostat") MemorySegment seg, long index, @C("__int32_t") int x) {
            fuse_h_constants_0.ostat$st_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment st_atimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static MemorySegment st_mtimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 16));
        }
        public static MemorySegment st_ctimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 16));
        }
        public static VarHandle st_blksize$VH() {
            return fuse_h_constants_0.ostat$st_blksize$VH();
        }
        public static  @C("__int32_t") int st_blksize$get(@C("struct ostat") MemorySegment seg) {
            return (int)fuse_h_constants_0.ostat$st_blksize$VH().get(seg);
        }
        public static  @C("__int32_t") int st_blksize$get(@C("struct ostat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.ostat$st_blksize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blksize$set(@C("struct ostat") MemorySegment seg, @C("__int32_t") int x) {
            fuse_h_constants_0.ostat$st_blksize$VH().set(seg, x);
        }
        public static void st_blksize$set(@C("struct ostat") MemorySegment seg, long index, @C("__int32_t") int x) {
            fuse_h_constants_0.ostat$st_blksize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_blocks$VH() {
            return fuse_h_constants_0.ostat$st_blocks$VH();
        }
        public static  @C("__int32_t") int st_blocks$get(@C("struct ostat") MemorySegment seg) {
            return (int)fuse_h_constants_0.ostat$st_blocks$VH().get(seg);
        }
        public static  @C("__int32_t") int st_blocks$get(@C("struct ostat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.ostat$st_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blocks$set(@C("struct ostat") MemorySegment seg, @C("__int32_t") int x) {
            fuse_h_constants_0.ostat$st_blocks$VH().set(seg, x);
        }
        public static void st_blocks$set(@C("struct ostat") MemorySegment seg, long index, @C("__int32_t") int x) {
            fuse_h_constants_0.ostat$st_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_flags$VH() {
            return fuse_h_constants_0.ostat$st_flags$VH();
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct ostat") MemorySegment seg) {
            return (int)fuse_h_constants_0.ostat$st_flags$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct ostat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.ostat$st_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_flags$set(@C("struct ostat") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_0.ostat$st_flags$VH().set(seg, x);
        }
        public static void st_flags$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_0.ostat$st_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gen$VH() {
            return fuse_h_constants_0.ostat$st_gen$VH();
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct ostat") MemorySegment seg) {
            return (int)fuse_h_constants_0.ostat$st_gen$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct ostat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.ostat$st_gen$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gen$set(@C("struct ostat") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_0.ostat$st_gen$VH().set(seg, x);
        }
        public static void st_gen$set(@C("struct ostat") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_0.ostat$st_gen$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ostat") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ostat") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct ostat[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct ostat[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct ostat*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct ostat*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ostat") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct stat")public static class stat {

        /* package-private */ stat() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.stat$struct$LAYOUT();
        }
        public static VarHandle st_dev$VH() {
            return fuse_h_constants_0.stat$st_dev$VH();
        }
        public static  @C("dev_t") int st_dev$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat$st_dev$VH().get(seg);
        }
        public static  @C("dev_t") int st_dev$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat$st_dev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_dev$set(@C("struct stat") MemorySegment seg, @C("dev_t") int x) {
            fuse_h_constants_0.stat$st_dev$VH().set(seg, x);
        }
        public static void st_dev$set(@C("struct stat") MemorySegment seg, long index, @C("dev_t") int x) {
            fuse_h_constants_0.stat$st_dev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_mode$VH() {
            return fuse_h_constants_0.stat$st_mode$VH();
        }
        public static  @C("mode_t") short st_mode$get(@C("struct stat") MemorySegment seg) {
            return (short)fuse_h_constants_0.stat$st_mode$VH().get(seg);
        }
        public static  @C("mode_t") short st_mode$get(@C("struct stat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.stat$st_mode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_mode$set(@C("struct stat") MemorySegment seg, @C("mode_t") short x) {
            fuse_h_constants_0.stat$st_mode$VH().set(seg, x);
        }
        public static void st_mode$set(@C("struct stat") MemorySegment seg, long index, @C("mode_t") short x) {
            fuse_h_constants_0.stat$st_mode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_nlink$VH() {
            return fuse_h_constants_0.stat$st_nlink$VH();
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct stat") MemorySegment seg) {
            return (short)fuse_h_constants_0.stat$st_nlink$VH().get(seg);
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct stat") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.stat$st_nlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_nlink$set(@C("struct stat") MemorySegment seg, @C("nlink_t") short x) {
            fuse_h_constants_0.stat$st_nlink$VH().set(seg, x);
        }
        public static void st_nlink$set(@C("struct stat") MemorySegment seg, long index, @C("nlink_t") short x) {
            fuse_h_constants_0.stat$st_nlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_ino$VH() {
            return fuse_h_constants_0.stat$st_ino$VH();
        }
        public static  @C("__darwin_ino64_t") long st_ino$get(@C("struct stat") MemorySegment seg) {
            return (long)fuse_h_constants_0.stat$st_ino$VH().get(seg);
        }
        public static  @C("__darwin_ino64_t") long st_ino$get(@C("struct stat") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.stat$st_ino$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_ino$set(@C("struct stat") MemorySegment seg, @C("__darwin_ino64_t") long x) {
            fuse_h_constants_0.stat$st_ino$VH().set(seg, x);
        }
        public static void st_ino$set(@C("struct stat") MemorySegment seg, long index, @C("__darwin_ino64_t") long x) {
            fuse_h_constants_0.stat$st_ino$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_uid$VH() {
            return fuse_h_constants_0.stat$st_uid$VH();
        }
        public static  @C("uid_t") int st_uid$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat$st_uid$VH().get(seg);
        }
        public static  @C("uid_t") int st_uid$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat$st_uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_uid$set(@C("struct stat") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_0.stat$st_uid$VH().set(seg, x);
        }
        public static void st_uid$set(@C("struct stat") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_0.stat$st_uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gid$VH() {
            return fuse_h_constants_0.stat$st_gid$VH();
        }
        public static  @C("gid_t") int st_gid$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat$st_gid$VH().get(seg);
        }
        public static  @C("gid_t") int st_gid$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat$st_gid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gid$set(@C("struct stat") MemorySegment seg, @C("gid_t") int x) {
            fuse_h_constants_0.stat$st_gid$VH().set(seg, x);
        }
        public static void st_gid$set(@C("struct stat") MemorySegment seg, long index, @C("gid_t") int x) {
            fuse_h_constants_0.stat$st_gid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_rdev$VH() {
            return fuse_h_constants_0.stat$st_rdev$VH();
        }
        public static  @C("dev_t") int st_rdev$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat$st_rdev$VH().get(seg);
        }
        public static  @C("dev_t") int st_rdev$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat$st_rdev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_rdev$set(@C("struct stat") MemorySegment seg, @C("dev_t") int x) {
            fuse_h_constants_0.stat$st_rdev$VH().set(seg, x);
        }
        public static void st_rdev$set(@C("struct stat") MemorySegment seg, long index, @C("dev_t") int x) {
            fuse_h_constants_0.stat$st_rdev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment st_atimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static MemorySegment st_mtimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 16));
        }
        public static MemorySegment st_ctimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 16));
        }
        public static MemorySegment st_birthtimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 16));
        }
        public static VarHandle st_size$VH() {
            return fuse_h_constants_0.stat$st_size$VH();
        }
        public static  @C("off_t") long st_size$get(@C("struct stat") MemorySegment seg) {
            return (long)fuse_h_constants_0.stat$st_size$VH().get(seg);
        }
        public static  @C("off_t") long st_size$get(@C("struct stat") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.stat$st_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_size$set(@C("struct stat") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_0.stat$st_size$VH().set(seg, x);
        }
        public static void st_size$set(@C("struct stat") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_0.stat$st_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_blocks$VH() {
            return fuse_h_constants_0.stat$st_blocks$VH();
        }
        public static  @C("blkcnt_t") long st_blocks$get(@C("struct stat") MemorySegment seg) {
            return (long)fuse_h_constants_0.stat$st_blocks$VH().get(seg);
        }
        public static  @C("blkcnt_t") long st_blocks$get(@C("struct stat") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.stat$st_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blocks$set(@C("struct stat") MemorySegment seg, @C("blkcnt_t") long x) {
            fuse_h_constants_0.stat$st_blocks$VH().set(seg, x);
        }
        public static void st_blocks$set(@C("struct stat") MemorySegment seg, long index, @C("blkcnt_t") long x) {
            fuse_h_constants_0.stat$st_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_blksize$VH() {
            return fuse_h_constants_0.stat$st_blksize$VH();
        }
        public static  @C("blksize_t") int st_blksize$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat$st_blksize$VH().get(seg);
        }
        public static  @C("blksize_t") int st_blksize$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat$st_blksize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blksize$set(@C("struct stat") MemorySegment seg, @C("blksize_t") int x) {
            fuse_h_constants_0.stat$st_blksize$VH().set(seg, x);
        }
        public static void st_blksize$set(@C("struct stat") MemorySegment seg, long index, @C("blksize_t") int x) {
            fuse_h_constants_0.stat$st_blksize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_flags$VH() {
            return fuse_h_constants_0.stat$st_flags$VH();
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat$st_flags$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat$st_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_flags$set(@C("struct stat") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_0.stat$st_flags$VH().set(seg, x);
        }
        public static void st_flags$set(@C("struct stat") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_0.stat$st_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gen$VH() {
            return fuse_h_constants_0.stat$st_gen$VH();
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat$st_gen$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat$st_gen$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gen$set(@C("struct stat") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_0.stat$st_gen$VH().set(seg, x);
        }
        public static void st_gen$set(@C("struct stat") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_0.stat$st_gen$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_lspare$VH() {
            return fuse_h_constants_0.stat$st_lspare$VH();
        }
        public static  @C("__int32_t") int st_lspare$get(@C("struct stat") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat$st_lspare$VH().get(seg);
        }
        public static  @C("__int32_t") int st_lspare$get(@C("struct stat") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat$st_lspare$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_lspare$set(@C("struct stat") MemorySegment seg, @C("__int32_t") int x) {
            fuse_h_constants_0.stat$st_lspare$VH().set(seg, x);
        }
        public static void st_lspare$set(@C("struct stat") MemorySegment seg, long index, @C("__int32_t") int x) {
            fuse_h_constants_0.stat$st_lspare$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment st_qspare$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(128, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct stat") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct stat") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct stat[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct stat[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct stat*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct stat*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct stat") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct stat64")public static class stat64 {

        /* package-private */ stat64() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.stat64$struct$LAYOUT();
        }
        public static VarHandle st_dev$VH() {
            return fuse_h_constants_0.stat64$st_dev$VH();
        }
        public static  @C("dev_t") int st_dev$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat64$st_dev$VH().get(seg);
        }
        public static  @C("dev_t") int st_dev$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat64$st_dev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_dev$set(@C("struct stat64") MemorySegment seg, @C("dev_t") int x) {
            fuse_h_constants_0.stat64$st_dev$VH().set(seg, x);
        }
        public static void st_dev$set(@C("struct stat64") MemorySegment seg, long index, @C("dev_t") int x) {
            fuse_h_constants_0.stat64$st_dev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_mode$VH() {
            return fuse_h_constants_0.stat64$st_mode$VH();
        }
        public static  @C("mode_t") short st_mode$get(@C("struct stat64") MemorySegment seg) {
            return (short)fuse_h_constants_0.stat64$st_mode$VH().get(seg);
        }
        public static  @C("mode_t") short st_mode$get(@C("struct stat64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.stat64$st_mode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_mode$set(@C("struct stat64") MemorySegment seg, @C("mode_t") short x) {
            fuse_h_constants_0.stat64$st_mode$VH().set(seg, x);
        }
        public static void st_mode$set(@C("struct stat64") MemorySegment seg, long index, @C("mode_t") short x) {
            fuse_h_constants_0.stat64$st_mode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_nlink$VH() {
            return fuse_h_constants_0.stat64$st_nlink$VH();
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct stat64") MemorySegment seg) {
            return (short)fuse_h_constants_0.stat64$st_nlink$VH().get(seg);
        }
        public static  @C("nlink_t") short st_nlink$get(@C("struct stat64") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.stat64$st_nlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_nlink$set(@C("struct stat64") MemorySegment seg, @C("nlink_t") short x) {
            fuse_h_constants_0.stat64$st_nlink$VH().set(seg, x);
        }
        public static void st_nlink$set(@C("struct stat64") MemorySegment seg, long index, @C("nlink_t") short x) {
            fuse_h_constants_0.stat64$st_nlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_ino$VH() {
            return fuse_h_constants_0.stat64$st_ino$VH();
        }
        public static  @C("__darwin_ino64_t") long st_ino$get(@C("struct stat64") MemorySegment seg) {
            return (long)fuse_h_constants_0.stat64$st_ino$VH().get(seg);
        }
        public static  @C("__darwin_ino64_t") long st_ino$get(@C("struct stat64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.stat64$st_ino$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_ino$set(@C("struct stat64") MemorySegment seg, @C("__darwin_ino64_t") long x) {
            fuse_h_constants_0.stat64$st_ino$VH().set(seg, x);
        }
        public static void st_ino$set(@C("struct stat64") MemorySegment seg, long index, @C("__darwin_ino64_t") long x) {
            fuse_h_constants_0.stat64$st_ino$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_uid$VH() {
            return fuse_h_constants_0.stat64$st_uid$VH();
        }
        public static  @C("uid_t") int st_uid$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat64$st_uid$VH().get(seg);
        }
        public static  @C("uid_t") int st_uid$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat64$st_uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_uid$set(@C("struct stat64") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_0.stat64$st_uid$VH().set(seg, x);
        }
        public static void st_uid$set(@C("struct stat64") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_0.stat64$st_uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gid$VH() {
            return fuse_h_constants_0.stat64$st_gid$VH();
        }
        public static  @C("gid_t") int st_gid$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat64$st_gid$VH().get(seg);
        }
        public static  @C("gid_t") int st_gid$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat64$st_gid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gid$set(@C("struct stat64") MemorySegment seg, @C("gid_t") int x) {
            fuse_h_constants_0.stat64$st_gid$VH().set(seg, x);
        }
        public static void st_gid$set(@C("struct stat64") MemorySegment seg, long index, @C("gid_t") int x) {
            fuse_h_constants_0.stat64$st_gid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_rdev$VH() {
            return fuse_h_constants_0.stat64$st_rdev$VH();
        }
        public static  @C("dev_t") int st_rdev$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat64$st_rdev$VH().get(seg);
        }
        public static  @C("dev_t") int st_rdev$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat64$st_rdev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_rdev$set(@C("struct stat64") MemorySegment seg, @C("dev_t") int x) {
            fuse_h_constants_0.stat64$st_rdev$VH().set(seg, x);
        }
        public static void st_rdev$set(@C("struct stat64") MemorySegment seg, long index, @C("dev_t") int x) {
            fuse_h_constants_0.stat64$st_rdev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment st_atimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static MemorySegment st_mtimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 16));
        }
        public static MemorySegment st_ctimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 16));
        }
        public static MemorySegment st_birthtimespec$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 16));
        }
        public static VarHandle st_size$VH() {
            return fuse_h_constants_0.stat64$st_size$VH();
        }
        public static  @C("off_t") long st_size$get(@C("struct stat64") MemorySegment seg) {
            return (long)fuse_h_constants_0.stat64$st_size$VH().get(seg);
        }
        public static  @C("off_t") long st_size$get(@C("struct stat64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.stat64$st_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_size$set(@C("struct stat64") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_0.stat64$st_size$VH().set(seg, x);
        }
        public static void st_size$set(@C("struct stat64") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_0.stat64$st_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_blocks$VH() {
            return fuse_h_constants_0.stat64$st_blocks$VH();
        }
        public static  @C("blkcnt_t") long st_blocks$get(@C("struct stat64") MemorySegment seg) {
            return (long)fuse_h_constants_0.stat64$st_blocks$VH().get(seg);
        }
        public static  @C("blkcnt_t") long st_blocks$get(@C("struct stat64") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.stat64$st_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blocks$set(@C("struct stat64") MemorySegment seg, @C("blkcnt_t") long x) {
            fuse_h_constants_0.stat64$st_blocks$VH().set(seg, x);
        }
        public static void st_blocks$set(@C("struct stat64") MemorySegment seg, long index, @C("blkcnt_t") long x) {
            fuse_h_constants_0.stat64$st_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_blksize$VH() {
            return fuse_h_constants_0.stat64$st_blksize$VH();
        }
        public static  @C("blksize_t") int st_blksize$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat64$st_blksize$VH().get(seg);
        }
        public static  @C("blksize_t") int st_blksize$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat64$st_blksize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_blksize$set(@C("struct stat64") MemorySegment seg, @C("blksize_t") int x) {
            fuse_h_constants_0.stat64$st_blksize$VH().set(seg, x);
        }
        public static void st_blksize$set(@C("struct stat64") MemorySegment seg, long index, @C("blksize_t") int x) {
            fuse_h_constants_0.stat64$st_blksize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_flags$VH() {
            return fuse_h_constants_0.stat64$st_flags$VH();
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat64$st_flags$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_flags$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat64$st_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_flags$set(@C("struct stat64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_0.stat64$st_flags$VH().set(seg, x);
        }
        public static void st_flags$set(@C("struct stat64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_0.stat64$st_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_gen$VH() {
            return fuse_h_constants_0.stat64$st_gen$VH();
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat64$st_gen$VH().get(seg);
        }
        public static  @C("__uint32_t") int st_gen$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat64$st_gen$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_gen$set(@C("struct stat64") MemorySegment seg, @C("__uint32_t") int x) {
            fuse_h_constants_0.stat64$st_gen$VH().set(seg, x);
        }
        public static void st_gen$set(@C("struct stat64") MemorySegment seg, long index, @C("__uint32_t") int x) {
            fuse_h_constants_0.stat64$st_gen$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle st_lspare$VH() {
            return fuse_h_constants_0.stat64$st_lspare$VH();
        }
        public static  @C("__int32_t") int st_lspare$get(@C("struct stat64") MemorySegment seg) {
            return (int)fuse_h_constants_0.stat64$st_lspare$VH().get(seg);
        }
        public static  @C("__int32_t") int st_lspare$get(@C("struct stat64") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.stat64$st_lspare$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void st_lspare$set(@C("struct stat64") MemorySegment seg, @C("__int32_t") int x) {
            fuse_h_constants_0.stat64$st_lspare$VH().set(seg, x);
        }
        public static void st_lspare$set(@C("struct stat64") MemorySegment seg, long index, @C("__int32_t") int x) {
            fuse_h_constants_0.stat64$st_lspare$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment st_qspare$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(128, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct stat64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct stat64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct stat64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct stat64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct stat64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct stat64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct stat64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle chmod$MH() {
        return fuse_h_constants_0.chmod$MH();
    }
    public static @C("int") int chmod (@C("char*") Addressable x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_0.chmod$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fchmod$MH() {
        return fuse_h_constants_0.fchmod$MH();
    }
    public static @C("int") int fchmod (@C("int") int x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_0.fchmod$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstat$MH() {
        return fuse_h_constants_0.fstat$MH();
    }
    public static @C("int") int fstat (@C("int") int x0, @C("struct stat*") Addressable x1) {
        try {
            return (int)fuse_h_constants_0.fstat$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstat$MH() {
        return fuse_h_constants_0.lstat$MH();
    }
    public static @C("int") int lstat (@C("char*") Addressable x0, @C("struct stat*") Addressable x1) {
        try {
            return (int)fuse_h_constants_0.lstat$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mkdir$MH() {
        return fuse_h_constants_0.mkdir$MH();
    }
    public static @C("int") int mkdir (@C("char*") Addressable x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_0.mkdir$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mkfifo$MH() {
        return fuse_h_constants_0.mkfifo$MH();
    }
    public static @C("int") int mkfifo (@C("char*") Addressable x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_0.mkfifo$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle stat$MH() {
        return fuse_h_constants_0.stat$MH();
    }
    public static @C("int") int stat (@C("char*") Addressable x0, @C("struct stat*") Addressable x1) {
        try {
            return (int)fuse_h_constants_0.stat$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mknod$MH() {
        return fuse_h_constants_0.mknod$MH();
    }
    public static @C("int") int mknod (@C("char*") Addressable x0, @C("mode_t") short x1, @C("dev_t") int x2) {
        try {
            return (int)fuse_h_constants_0.mknod$MH().invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle umask$MH() {
        return fuse_h_constants_0.umask$MH();
    }
    public static @C("mode_t") short umask (@C("mode_t") short x0) {
        try {
            return (short)fuse_h_constants_0.umask$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fchmodat$MH() {
        return fuse_h_constants_0.fchmodat$MH();
    }
    public static @C("int") int fchmodat (@C("int") int x0, @C("char*") Addressable x1, @C("mode_t") short x2, @C("int") int x3) {
        try {
            return (int)fuse_h_constants_0.fchmodat$MH().invokeExact(x0, x1.address(), x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstatat$MH() {
        return fuse_h_constants_0.fstatat$MH();
    }
    public static @C("int") int fstatat (@C("int") int x0, @C("char*") Addressable x1, @C("struct stat*") Addressable x2, @C("int") int x3) {
        try {
            return (int)fuse_h_constants_0.fstatat$MH().invokeExact(x0, x1.address(), x2.address(), x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mkdirat$MH() {
        return fuse_h_constants_0.mkdirat$MH();
    }
    public static @C("int") int mkdirat (@C("int") int x0, @C("char*") Addressable x1, @C("mode_t") short x2) {
        try {
            return (int)fuse_h_constants_0.mkdirat$MH().invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle futimens$MH() {
        return fuse_h_constants_0.futimens$MH();
    }
    public static @C("int") int futimens (@C("int") int __fd, @C("struct timespec[]") Addressable __times) {
        try {
            return (int)fuse_h_constants_0.futimens$MH().invokeExact(__fd, __times.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle utimensat$MH() {
        return fuse_h_constants_0.utimensat$MH();
    }
    public static @C("int") int utimensat (@C("int") int __fd, @C("char*") Addressable __path, @C("struct timespec[]") Addressable __times, @C("int") int __flag) {
        try {
            return (int)fuse_h_constants_0.utimensat$MH().invokeExact(__fd, __path.address(), __times.address(), __flag);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle chflags$MH() {
        return fuse_h_constants_0.chflags$MH();
    }
    public static @C("int") int chflags (@C("char*") Addressable x0, @C("__uint32_t") int x1) {
        try {
            return (int)fuse_h_constants_0.chflags$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle chmodx_np$MH() {
        return fuse_h_constants_0.chmodx_np$MH();
    }
    public static @C("int") int chmodx_np (@C("char*") Addressable x0, @C("filesec_t") Addressable x1) {
        try {
            return (int)fuse_h_constants_0.chmodx_np$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fchflags$MH() {
        return fuse_h_constants_0.fchflags$MH();
    }
    public static @C("int") int fchflags (@C("int") int x0, @C("__uint32_t") int x1) {
        try {
            return (int)fuse_h_constants_0.fchflags$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fchmodx_np$MH() {
        return fuse_h_constants_0.fchmodx_np$MH();
    }
    public static @C("int") int fchmodx_np (@C("int") int x0, @C("filesec_t") Addressable x1) {
        try {
            return (int)fuse_h_constants_0.fchmodx_np$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstatx_np$MH() {
        return fuse_h_constants_0.fstatx_np$MH();
    }
    public static @C("int") int fstatx_np (@C("int") int x0, @C("struct stat*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_0.fstatx_np$MH().invokeExact(x0, x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lchflags$MH() {
        return fuse_h_constants_0.lchflags$MH();
    }
    public static @C("int") int lchflags (@C("char*") Addressable x0, @C("__uint32_t") int x1) {
        try {
            return (int)fuse_h_constants_0.lchflags$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lchmod$MH() {
        return fuse_h_constants_0.lchmod$MH();
    }
    public static @C("int") int lchmod (@C("char*") Addressable x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_0.lchmod$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstatx_np$MH() {
        return fuse_h_constants_0.lstatx_np$MH();
    }
    public static @C("int") int lstatx_np (@C("char*") Addressable x0, @C("struct stat*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_0.lstatx_np$MH().invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mkdirx_np$MH() {
        return fuse_h_constants_0.mkdirx_np$MH();
    }
    public static @C("int") int mkdirx_np (@C("char*") Addressable x0, @C("filesec_t") Addressable x1) {
        try {
            return (int)fuse_h_constants_0.mkdirx_np$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mkfifox_np$MH() {
        return fuse_h_constants_0.mkfifox_np$MH();
    }
    public static @C("int") int mkfifox_np (@C("char*") Addressable x0, @C("filesec_t") Addressable x1) {
        try {
            return (int)fuse_h_constants_0.mkfifox_np$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle statx_np$MH() {
        return fuse_h_constants_0.statx_np$MH();
    }
    public static @C("int") int statx_np (@C("char*") Addressable x0, @C("struct stat*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_0.statx_np$MH().invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle umaskx_np$MH() {
        return fuse_h_constants_0.umaskx_np$MH();
    }
    public static @C("int") int umaskx_np (@C("filesec_t") Addressable x0) {
        try {
            return (int)fuse_h_constants_0.umaskx_np$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstatx64_np$MH() {
        return fuse_h_constants_0.fstatx64_np$MH();
    }
    public static @C("int") int fstatx64_np (@C("int") int x0, @C("struct stat64*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_0.fstatx64_np$MH().invokeExact(x0, x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstatx64_np$MH() {
        return fuse_h_constants_0.lstatx64_np$MH();
    }
    public static @C("int") int lstatx64_np (@C("char*") Addressable x0, @C("struct stat64*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_0.lstatx64_np$MH().invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle statx64_np$MH() {
        return fuse_h_constants_0.statx64_np$MH();
    }
    public static @C("int") int statx64_np (@C("char*") Addressable x0, @C("struct stat64*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_0.statx64_np$MH().invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstat64$MH() {
        return fuse_h_constants_0.fstat64$MH();
    }
    public static @C("int") int fstat64 (@C("int") int x0, @C("struct stat64*") Addressable x1) {
        try {
            return (int)fuse_h_constants_0.fstat64$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstat64$MH() {
        return fuse_h_constants_0.lstat64$MH();
    }
    public static @C("int") int lstat64 (@C("char*") Addressable x0, @C("struct stat64*") Addressable x1) {
        try {
            return (int)fuse_h_constants_0.lstat64$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle stat64$MH() {
        return fuse_h_constants_0.stat64$MH();
    }
    public static @C("int") int stat64 (@C("char*") Addressable x0, @C("struct stat64*") Addressable x1) {
        try {
            return (int)fuse_h_constants_0.stat64$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    @C("struct setattr_x")public static class setattr_x {

        /* package-private */ setattr_x() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.setattr_x$struct$LAYOUT();
        }
        public static VarHandle valid$VH() {
            return fuse_h_constants_0.setattr_x$valid$VH();
        }
        public static  @C("int32_t") int valid$get(@C("struct setattr_x") MemorySegment seg) {
            return (int)fuse_h_constants_0.setattr_x$valid$VH().get(seg);
        }
        public static  @C("int32_t") int valid$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.setattr_x$valid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void valid$set(@C("struct setattr_x") MemorySegment seg, @C("int32_t") int x) {
            fuse_h_constants_0.setattr_x$valid$VH().set(seg, x);
        }
        public static void valid$set(@C("struct setattr_x") MemorySegment seg, long index, @C("int32_t") int x) {
            fuse_h_constants_0.setattr_x$valid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mode$VH() {
            return fuse_h_constants_0.setattr_x$mode$VH();
        }
        public static  @C("mode_t") short mode$get(@C("struct setattr_x") MemorySegment seg) {
            return (short)fuse_h_constants_0.setattr_x$mode$VH().get(seg);
        }
        public static  @C("mode_t") short mode$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.setattr_x$mode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mode$set(@C("struct setattr_x") MemorySegment seg, @C("mode_t") short x) {
            fuse_h_constants_0.setattr_x$mode$VH().set(seg, x);
        }
        public static void mode$set(@C("struct setattr_x") MemorySegment seg, long index, @C("mode_t") short x) {
            fuse_h_constants_0.setattr_x$mode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle uid$VH() {
            return fuse_h_constants_0.setattr_x$uid$VH();
        }
        public static  @C("uid_t") int uid$get(@C("struct setattr_x") MemorySegment seg) {
            return (int)fuse_h_constants_0.setattr_x$uid$VH().get(seg);
        }
        public static  @C("uid_t") int uid$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.setattr_x$uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void uid$set(@C("struct setattr_x") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_0.setattr_x$uid$VH().set(seg, x);
        }
        public static void uid$set(@C("struct setattr_x") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_0.setattr_x$uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle gid$VH() {
            return fuse_h_constants_0.setattr_x$gid$VH();
        }
        public static  @C("gid_t") int gid$get(@C("struct setattr_x") MemorySegment seg) {
            return (int)fuse_h_constants_0.setattr_x$gid$VH().get(seg);
        }
        public static  @C("gid_t") int gid$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.setattr_x$gid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void gid$set(@C("struct setattr_x") MemorySegment seg, @C("gid_t") int x) {
            fuse_h_constants_0.setattr_x$gid$VH().set(seg, x);
        }
        public static void gid$set(@C("struct setattr_x") MemorySegment seg, long index, @C("gid_t") int x) {
            fuse_h_constants_0.setattr_x$gid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle size$VH() {
            return fuse_h_constants_0.setattr_x$size$VH();
        }
        public static  @C("off_t") long size$get(@C("struct setattr_x") MemorySegment seg) {
            return (long)fuse_h_constants_0.setattr_x$size$VH().get(seg);
        }
        public static  @C("off_t") long size$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.setattr_x$size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void size$set(@C("struct setattr_x") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_0.setattr_x$size$VH().set(seg, x);
        }
        public static void size$set(@C("struct setattr_x") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_0.setattr_x$size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment acctime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 16));
        }
        public static MemorySegment modtime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static MemorySegment crtime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));
        }
        public static MemorySegment chgtime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment bkuptime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 16));
        }
        public static VarHandle flags$VH() {
            return fuse_h_constants_0.setattr_x$flags$VH();
        }
        public static  @C("uint32_t") int flags$get(@C("struct setattr_x") MemorySegment seg) {
            return (int)fuse_h_constants_0.setattr_x$flags$VH().get(seg);
        }
        public static  @C("uint32_t") int flags$get(@C("struct setattr_x") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.setattr_x$flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flags$set(@C("struct setattr_x") MemorySegment seg, @C("uint32_t") int x) {
            fuse_h_constants_0.setattr_x$flags$VH().set(seg, x);
        }
        public static void flags$set(@C("struct setattr_x") MemorySegment seg, long index, @C("uint32_t") int x) {
            fuse_h_constants_0.setattr_x$flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct setattr_x") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct setattr_x") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct setattr_x[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct setattr_x[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct setattr_x*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct setattr_x*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct setattr_x") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fuse_file_info")public static class fuse_file_info {

        /* package-private */ fuse_file_info() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.fuse_file_info$struct$LAYOUT();
        }
        public static VarHandle flags$VH() {
            return fuse_h_constants_0.fuse_file_info$flags$VH();
        }
        public static  @C("int") int flags$get(@C("struct fuse_file_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_file_info$flags$VH().get(seg);
        }
        public static  @C("int") int flags$get(@C("struct fuse_file_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_file_info$flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flags$set(@C("struct fuse_file_info") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_0.fuse_file_info$flags$VH().set(seg, x);
        }
        public static void flags$set(@C("struct fuse_file_info") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_0.fuse_file_info$flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fh_old$VH() {
            return fuse_h_constants_0.fuse_file_info$fh_old$VH();
        }
        public static  @C("unsigned long") long fh_old$get(@C("struct fuse_file_info") MemorySegment seg) {
            return (long)fuse_h_constants_0.fuse_file_info$fh_old$VH().get(seg);
        }
        public static  @C("unsigned long") long fh_old$get(@C("struct fuse_file_info") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.fuse_file_info$fh_old$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fh_old$set(@C("struct fuse_file_info") MemorySegment seg, @C("unsigned long") long x) {
            fuse_h_constants_0.fuse_file_info$fh_old$VH().set(seg, x);
        }
        public static void fh_old$set(@C("struct fuse_file_info") MemorySegment seg, long index, @C("unsigned long") long x) {
            fuse_h_constants_0.fuse_file_info$fh_old$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle writepage$VH() {
            return fuse_h_constants_0.fuse_file_info$writepage$VH();
        }
        public static  @C("int") int writepage$get(@C("struct fuse_file_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_file_info$writepage$VH().get(seg);
        }
        public static  @C("int") int writepage$get(@C("struct fuse_file_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_file_info$writepage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void writepage$set(@C("struct fuse_file_info") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_0.fuse_file_info$writepage$VH().set(seg, x);
        }
        public static void writepage$set(@C("struct fuse_file_info") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_0.fuse_file_info$writepage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fh$VH() {
            return fuse_h_constants_0.fuse_file_info$fh$VH();
        }
        public static  @C("uint64_t") long fh$get(@C("struct fuse_file_info") MemorySegment seg) {
            return (long)fuse_h_constants_0.fuse_file_info$fh$VH().get(seg);
        }
        public static  @C("uint64_t") long fh$get(@C("struct fuse_file_info") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.fuse_file_info$fh$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fh$set(@C("struct fuse_file_info") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_0.fuse_file_info$fh$VH().set(seg, x);
        }
        public static void fh$set(@C("struct fuse_file_info") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_0.fuse_file_info$fh$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lock_owner$VH() {
            return fuse_h_constants_0.fuse_file_info$lock_owner$VH();
        }
        public static  @C("uint64_t") long lock_owner$get(@C("struct fuse_file_info") MemorySegment seg) {
            return (long)fuse_h_constants_0.fuse_file_info$lock_owner$VH().get(seg);
        }
        public static  @C("uint64_t") long lock_owner$get(@C("struct fuse_file_info") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.fuse_file_info$lock_owner$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lock_owner$set(@C("struct fuse_file_info") MemorySegment seg, @C("uint64_t") long x) {
            fuse_h_constants_0.fuse_file_info$lock_owner$VH().set(seg, x);
        }
        public static void lock_owner$set(@C("struct fuse_file_info") MemorySegment seg, long index, @C("uint64_t") long x) {
            fuse_h_constants_0.fuse_file_info$lock_owner$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_file_info") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_file_info") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_file_info[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_file_info[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_file_info*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_file_info*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_file_info") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fuse_conn_info")public static class fuse_conn_info {

        /* package-private */ fuse_conn_info() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.fuse_conn_info$struct$LAYOUT();
        }
        public static VarHandle proto_major$VH() {
            return fuse_h_constants_0.fuse_conn_info$proto_major$VH();
        }
        public static  @C("unsigned int") int proto_major$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_conn_info$proto_major$VH().get(seg);
        }
        public static  @C("unsigned int") int proto_major$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_conn_info$proto_major$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void proto_major$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$proto_major$VH().set(seg, x);
        }
        public static void proto_major$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$proto_major$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle proto_minor$VH() {
            return fuse_h_constants_0.fuse_conn_info$proto_minor$VH();
        }
        public static  @C("unsigned int") int proto_minor$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_conn_info$proto_minor$VH().get(seg);
        }
        public static  @C("unsigned int") int proto_minor$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_conn_info$proto_minor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void proto_minor$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$proto_minor$VH().set(seg, x);
        }
        public static void proto_minor$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$proto_minor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle async_read$VH() {
            return fuse_h_constants_0.fuse_conn_info$async_read$VH();
        }
        public static  @C("unsigned int") int async_read$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_conn_info$async_read$VH().get(seg);
        }
        public static  @C("unsigned int") int async_read$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_conn_info$async_read$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void async_read$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$async_read$VH().set(seg, x);
        }
        public static void async_read$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$async_read$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle max_write$VH() {
            return fuse_h_constants_0.fuse_conn_info$max_write$VH();
        }
        public static  @C("unsigned int") int max_write$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_conn_info$max_write$VH().get(seg);
        }
        public static  @C("unsigned int") int max_write$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_conn_info$max_write$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void max_write$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$max_write$VH().set(seg, x);
        }
        public static void max_write$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$max_write$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle max_readahead$VH() {
            return fuse_h_constants_0.fuse_conn_info$max_readahead$VH();
        }
        public static  @C("unsigned int") int max_readahead$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_conn_info$max_readahead$VH().get(seg);
        }
        public static  @C("unsigned int") int max_readahead$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_conn_info$max_readahead$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void max_readahead$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$max_readahead$VH().set(seg, x);
        }
        public static void max_readahead$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$max_readahead$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("struct ")public static class enable {

            /* package-private */ enable() {}
            public static MemoryLayout $LAYOUT() {
                return fuse_h_constants_0.fuse_conn_info$enable$struct$LAYOUT();
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment enable$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 4));
        }
        public static VarHandle capable$VH() {
            return fuse_h_constants_0.fuse_conn_info$capable$VH();
        }
        public static  @C("unsigned int") int capable$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_conn_info$capable$VH().get(seg);
        }
        public static  @C("unsigned int") int capable$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_conn_info$capable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void capable$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$capable$VH().set(seg, x);
        }
        public static void capable$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$capable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle want$VH() {
            return fuse_h_constants_0.fuse_conn_info$want$VH();
        }
        public static  @C("unsigned int") int want$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_conn_info$want$VH().get(seg);
        }
        public static  @C("unsigned int") int want$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_conn_info$want$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void want$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$want$VH().set(seg, x);
        }
        public static void want$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$want$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle max_background$VH() {
            return fuse_h_constants_0.fuse_conn_info$max_background$VH();
        }
        public static  @C("unsigned int") int max_background$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_conn_info$max_background$VH().get(seg);
        }
        public static  @C("unsigned int") int max_background$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_conn_info$max_background$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void max_background$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$max_background$VH().set(seg, x);
        }
        public static void max_background$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$max_background$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle congestion_threshold$VH() {
            return fuse_h_constants_0.fuse_conn_info$congestion_threshold$VH();
        }
        public static  @C("unsigned int") int congestion_threshold$get(@C("struct fuse_conn_info") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_conn_info$congestion_threshold$VH().get(seg);
        }
        public static  @C("unsigned int") int congestion_threshold$get(@C("struct fuse_conn_info") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_conn_info$congestion_threshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void congestion_threshold$set(@C("struct fuse_conn_info") MemorySegment seg, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$congestion_threshold$VH().set(seg, x);
        }
        public static void congestion_threshold$set(@C("struct fuse_conn_info") MemorySegment seg, long index, @C("unsigned int") int x) {
            fuse_h_constants_0.fuse_conn_info$congestion_threshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 88));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_conn_info") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_conn_info") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_conn_info[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_conn_info[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_conn_info*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_conn_info*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_conn_info") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle fuse_mount$MH() {
        return fuse_h_constants_0.fuse_mount$MH();
    }
    public static @C("struct fuse_chan*") MemoryAddress fuse_mount (@C("char*") Addressable mountpoint, @C("struct fuse_args*") Addressable args) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_mount$MH().invokeExact(mountpoint.address(), args.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_unmount$MH() {
        return fuse_h_constants_0.fuse_unmount$MH();
    }
    public static void fuse_unmount (@C("char*") Addressable mountpoint, @C("struct fuse_chan*") Addressable ch) {
        try {
            fuse_h_constants_0.fuse_unmount$MH().invokeExact(mountpoint.address(), ch.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_parse_cmdline$MH() {
        return fuse_h_constants_0.fuse_parse_cmdline$MH();
    }
    public static @C("int") int fuse_parse_cmdline (@C("struct fuse_args*") Addressable args, @C("char**") Addressable mountpoint, @C("int*") Addressable multithreaded, @C("int*") Addressable foreground) {
        try {
            return (int)fuse_h_constants_0.fuse_parse_cmdline$MH().invokeExact(args.address(), mountpoint.address(), multithreaded.address(), foreground.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_daemonize$MH() {
        return fuse_h_constants_0.fuse_daemonize$MH();
    }
    public static @C("int") int fuse_daemonize (@C("int") int foreground) {
        try {
            return (int)fuse_h_constants_0.fuse_daemonize$MH().invokeExact(foreground);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_version$MH() {
        return fuse_h_constants_0.fuse_version$MH();
    }
    public static @C("int") int fuse_version () {
        try {
            return (int)fuse_h_constants_0.fuse_version$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_pollhandle_destroy$MH() {
        return fuse_h_constants_0.fuse_pollhandle_destroy$MH();
    }
    public static void fuse_pollhandle_destroy (@C("struct fuse_pollhandle*") Addressable ph) {
        try {
            fuse_h_constants_0.fuse_pollhandle_destroy$MH().invokeExact(ph.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int FUSE_BUF_IS_FD() {
        return fuse_h_constants_0.FUSE_BUF_IS_FD();
    }
    public static @C("int") int FUSE_BUF_FD_SEEK() {
        return fuse_h_constants_0.FUSE_BUF_FD_SEEK();
    }
    public static @C("int") int FUSE_BUF_FD_RETRY() {
        return fuse_h_constants_0.FUSE_BUF_FD_RETRY();
    }
    public static @C("int") int FUSE_BUF_NO_SPLICE() {
        return fuse_h_constants_0.FUSE_BUF_NO_SPLICE();
    }
    public static @C("int") int FUSE_BUF_FORCE_SPLICE() {
        return fuse_h_constants_0.FUSE_BUF_FORCE_SPLICE();
    }
    public static @C("int") int FUSE_BUF_SPLICE_MOVE() {
        return fuse_h_constants_0.FUSE_BUF_SPLICE_MOVE();
    }
    public static @C("int") int FUSE_BUF_SPLICE_NONBLOCK() {
        return fuse_h_constants_0.FUSE_BUF_SPLICE_NONBLOCK();
    }
    @C("struct fuse_buf")public static class fuse_buf {

        /* package-private */ fuse_buf() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.fuse_buf$struct$LAYOUT();
        }
        public static VarHandle size$VH() {
            return fuse_h_constants_0.fuse_buf$size$VH();
        }
        public static  @C("size_t") long size$get(@C("struct fuse_buf") MemorySegment seg) {
            return (long)fuse_h_constants_0.fuse_buf$size$VH().get(seg);
        }
        public static  @C("size_t") long size$get(@C("struct fuse_buf") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.fuse_buf$size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void size$set(@C("struct fuse_buf") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_0.fuse_buf$size$VH().set(seg, x);
        }
        public static void size$set(@C("struct fuse_buf") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_0.fuse_buf$size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle flags$VH() {
            return fuse_h_constants_0.fuse_buf$flags$VH();
        }
        public static  @C("enum fuse_buf_flags") int flags$get(@C("struct fuse_buf") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_buf$flags$VH().get(seg);
        }
        public static  @C("enum fuse_buf_flags") int flags$get(@C("struct fuse_buf") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_buf$flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flags$set(@C("struct fuse_buf") MemorySegment seg, @C("enum fuse_buf_flags") int x) {
            fuse_h_constants_0.fuse_buf$flags$VH().set(seg, x);
        }
        public static void flags$set(@C("struct fuse_buf") MemorySegment seg, long index, @C("enum fuse_buf_flags") int x) {
            fuse_h_constants_0.fuse_buf$flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mem$VH() {
            return fuse_h_constants_0.fuse_buf$mem$VH();
        }
        public static  @C("void*") MemoryAddress mem$get(@C("struct fuse_buf") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_buf$mem$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress mem$get(@C("struct fuse_buf") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_buf$mem$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mem$set(@C("struct fuse_buf") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_0.fuse_buf$mem$VH().set(seg, x);
        }
        public static void mem$set(@C("struct fuse_buf") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_0.fuse_buf$mem$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fd$VH() {
            return fuse_h_constants_0.fuse_buf$fd$VH();
        }
        public static  @C("int") int fd$get(@C("struct fuse_buf") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_buf$fd$VH().get(seg);
        }
        public static  @C("int") int fd$get(@C("struct fuse_buf") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_buf$fd$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fd$set(@C("struct fuse_buf") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_0.fuse_buf$fd$VH().set(seg, x);
        }
        public static void fd$set(@C("struct fuse_buf") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_0.fuse_buf$fd$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pos$VH() {
            return fuse_h_constants_0.fuse_buf$pos$VH();
        }
        public static  @C("off_t") long pos$get(@C("struct fuse_buf") MemorySegment seg) {
            return (long)fuse_h_constants_0.fuse_buf$pos$VH().get(seg);
        }
        public static  @C("off_t") long pos$get(@C("struct fuse_buf") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.fuse_buf$pos$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pos$set(@C("struct fuse_buf") MemorySegment seg, @C("off_t") long x) {
            fuse_h_constants_0.fuse_buf$pos$VH().set(seg, x);
        }
        public static void pos$set(@C("struct fuse_buf") MemorySegment seg, long index, @C("off_t") long x) {
            fuse_h_constants_0.fuse_buf$pos$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_buf") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_buf") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_buf[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_buf[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_buf*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_buf*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_buf") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fuse_bufvec")public static class fuse_bufvec {

        /* package-private */ fuse_bufvec() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.fuse_bufvec$struct$LAYOUT();
        }
        public static VarHandle count$VH() {
            return fuse_h_constants_0.fuse_bufvec$count$VH();
        }
        public static  @C("size_t") long count$get(@C("struct fuse_bufvec") MemorySegment seg) {
            return (long)fuse_h_constants_0.fuse_bufvec$count$VH().get(seg);
        }
        public static  @C("size_t") long count$get(@C("struct fuse_bufvec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.fuse_bufvec$count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void count$set(@C("struct fuse_bufvec") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_0.fuse_bufvec$count$VH().set(seg, x);
        }
        public static void count$set(@C("struct fuse_bufvec") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_0.fuse_bufvec$count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle idx$VH() {
            return fuse_h_constants_0.fuse_bufvec$idx$VH();
        }
        public static  @C("size_t") long idx$get(@C("struct fuse_bufvec") MemorySegment seg) {
            return (long)fuse_h_constants_0.fuse_bufvec$idx$VH().get(seg);
        }
        public static  @C("size_t") long idx$get(@C("struct fuse_bufvec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.fuse_bufvec$idx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void idx$set(@C("struct fuse_bufvec") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_0.fuse_bufvec$idx$VH().set(seg, x);
        }
        public static void idx$set(@C("struct fuse_bufvec") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_0.fuse_bufvec$idx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle off$VH() {
            return fuse_h_constants_0.fuse_bufvec$off$VH();
        }
        public static  @C("size_t") long off$get(@C("struct fuse_bufvec") MemorySegment seg) {
            return (long)fuse_h_constants_0.fuse_bufvec$off$VH().get(seg);
        }
        public static  @C("size_t") long off$get(@C("struct fuse_bufvec") MemorySegment seg, long index) {
            return (long)fuse_h_constants_0.fuse_bufvec$off$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void off$set(@C("struct fuse_bufvec") MemorySegment seg, @C("size_t") long x) {
            fuse_h_constants_0.fuse_bufvec$off$VH().set(seg, x);
        }
        public static void off$set(@C("struct fuse_bufvec") MemorySegment seg, long index, @C("size_t") long x) {
            fuse_h_constants_0.fuse_bufvec$off$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment buf$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 40));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_bufvec") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_bufvec") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_bufvec[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_bufvec[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_bufvec*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_bufvec*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_bufvec") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle fuse_buf_size$MH() {
        return fuse_h_constants_0.fuse_buf_size$MH();
    }
    public static @C("size_t") long fuse_buf_size (@C("struct fuse_bufvec*") Addressable bufv) {
        try {
            return (long)fuse_h_constants_0.fuse_buf_size$MH().invokeExact(bufv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_buf_copy$MH() {
        return fuse_h_constants_0.fuse_buf_copy$MH();
    }
    public static @C("ssize_t") long fuse_buf_copy (@C("struct fuse_bufvec*") Addressable dst, @C("struct fuse_bufvec*") Addressable src, @C("enum fuse_buf_copy_flags") int flags) {
        try {
            return (long)fuse_h_constants_0.fuse_buf_copy$MH().invokeExact(dst.address(), src.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_set_signal_handlers$MH() {
        return fuse_h_constants_0.fuse_set_signal_handlers$MH();
    }
    public static @C("int") int fuse_set_signal_handlers (@C("struct fuse_session*") Addressable se) {
        try {
            return (int)fuse_h_constants_0.fuse_set_signal_handlers$MH().invokeExact(se.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_remove_signal_handlers$MH() {
        return fuse_h_constants_0.fuse_remove_signal_handlers$MH();
    }
    public static void fuse_remove_signal_handlers (@C("struct fuse_session*") Addressable se) {
        try {
            fuse_h_constants_0.fuse_remove_signal_handlers$MH().invokeExact(se.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    @C("struct fuse_operations")public static class fuse_operations {

        /* package-private */ fuse_operations() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.fuse_operations$struct$LAYOUT();
        }
        public static interface getattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct stat*)") MemorySegment allocate(getattr fi) {
                return RuntimeHelper.upcallStub(getattr.class, fi, fuse_h_constants_0.getattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct stat*)") MemorySegment allocate(getattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle getattr$VH() {
            return fuse_h_constants_0.fuse_operations$getattr$VH();
        }
        public static  @C("int(*)(char*,struct stat*)") MemoryAddress getattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$getattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct stat*)") MemoryAddress getattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$getattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void getattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct stat*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$getattr$VH().set(seg, x);
        }
        public static void getattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct stat*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$getattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface readlink {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
            public static  @C("int(*)(char*,char*,size_t)") MemorySegment allocate(readlink fi) {
                return RuntimeHelper.upcallStub(readlink.class, fi, fuse_h_constants_0.readlink$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
            }
            public static  @C("int(*)(char*,char*,size_t)") MemorySegment allocate(readlink fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle readlink$VH() {
            return fuse_h_constants_0.fuse_operations$readlink$VH();
        }
        public static  @C("int(*)(char*,char*,size_t)") MemoryAddress readlink$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$readlink$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,size_t)") MemoryAddress readlink$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$readlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void readlink$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,size_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$readlink$VH().set(seg, x);
        }
        public static void readlink$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,size_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$readlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface getdir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemorySegment allocate(getdir fi) {
                return RuntimeHelper.upcallStub(getdir.class, fi, fuse_h_constants_0.getdir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemorySegment allocate(getdir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle getdir$VH() {
            return fuse_h_constants_0.fuse_operations$getdir$VH();
        }
        public static  @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemoryAddress getdir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$getdir$VH().get(seg);
        }
        public static  @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemoryAddress getdir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$getdir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void getdir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$getdir$VH().set(seg, x);
        }
        public static void getdir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,fuse_dirh_t,fuse_dirfil_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$getdir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface mknod {

            int apply(jdk.incubator.foreign.MemoryAddress x0, short x1, int x2);
            public static  @C("int(*)(char*,mode_t,dev_t)") MemorySegment allocate(mknod fi) {
                return RuntimeHelper.upcallStub(mknod.class, fi, fuse_h_constants_0.mknod$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;SI)I");
            }
            public static  @C("int(*)(char*,mode_t,dev_t)") MemorySegment allocate(mknod fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle mknod$VH() {
            return fuse_h_constants_0.fuse_operations$mknod$VH();
        }
        public static  @C("int(*)(char*,mode_t,dev_t)") MemoryAddress mknod$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$mknod$VH().get(seg);
        }
        public static  @C("int(*)(char*,mode_t,dev_t)") MemoryAddress mknod$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$mknod$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mknod$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,mode_t,dev_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$mknod$VH().set(seg, x);
        }
        public static void mknod$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,mode_t,dev_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$mknod$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface mkdir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, short x1);
            public static  @C("int(*)(char*,mode_t)") MemorySegment allocate(mkdir fi) {
                return RuntimeHelper.upcallStub(mkdir.class, fi, fuse_h_constants_0.mkdir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;S)I");
            }
            public static  @C("int(*)(char*,mode_t)") MemorySegment allocate(mkdir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle mkdir$VH() {
            return fuse_h_constants_0.fuse_operations$mkdir$VH();
        }
        public static  @C("int(*)(char*,mode_t)") MemoryAddress mkdir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$mkdir$VH().get(seg);
        }
        public static  @C("int(*)(char*,mode_t)") MemoryAddress mkdir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$mkdir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mkdir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,mode_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$mkdir$VH().set(seg, x);
        }
        public static void mkdir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,mode_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$mkdir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface unlink {

            int apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("int(*)(char*)") MemorySegment allocate(unlink fi) {
                return RuntimeHelper.upcallStub(unlink.class, fi, fuse_h_constants_0.unlink$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*)") MemorySegment allocate(unlink fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle unlink$VH() {
            return fuse_h_constants_0.fuse_operations$unlink$VH();
        }
        public static  @C("int(*)(char*)") MemoryAddress unlink$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$unlink$VH().get(seg);
        }
        public static  @C("int(*)(char*)") MemoryAddress unlink$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$unlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void unlink$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$unlink$VH().set(seg, x);
        }
        public static void unlink$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$unlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface rmdir {

            int apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("int(*)(char*)") MemorySegment allocate(rmdir fi) {
                return RuntimeHelper.upcallStub(rmdir.class, fi, fuse_h_constants_0.rmdir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*)") MemorySegment allocate(rmdir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle rmdir$VH() {
            return fuse_h_constants_0.fuse_operations$rmdir$VH();
        }
        public static  @C("int(*)(char*)") MemoryAddress rmdir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$rmdir$VH().get(seg);
        }
        public static  @C("int(*)(char*)") MemoryAddress rmdir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$rmdir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void rmdir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$rmdir$VH().set(seg, x);
        }
        public static void rmdir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$rmdir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface symlink {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(symlink fi) {
                return RuntimeHelper.upcallStub(symlink.class, fi, fuse_h_constants_0.symlink$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(symlink fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle symlink$VH() {
            return fuse_h_constants_0.fuse_operations$symlink$VH();
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress symlink$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$symlink$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress symlink$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$symlink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void symlink$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$symlink$VH().set(seg, x);
        }
        public static void symlink$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$symlink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface rename {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(rename fi) {
                return RuntimeHelper.upcallStub(rename.class, fi, fuse_h_constants_0.rename$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(rename fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle rename$VH() {
            return fuse_h_constants_0.fuse_operations$rename$VH();
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress rename$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$rename$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress rename$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$rename$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void rename$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$rename$VH().set(seg, x);
        }
        public static void rename$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$rename$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface link {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(link fi) {
                return RuntimeHelper.upcallStub(link.class, fi, fuse_h_constants_0.link$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(link fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle link$VH() {
            return fuse_h_constants_0.fuse_operations$link$VH();
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress link$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$link$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress link$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$link$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void link$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$link$VH().set(seg, x);
        }
        public static void link$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$link$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface chmod {

            int apply(jdk.incubator.foreign.MemoryAddress x0, short x1);
            public static  @C("int(*)(char*,mode_t)") MemorySegment allocate(chmod fi) {
                return RuntimeHelper.upcallStub(chmod.class, fi, fuse_h_constants_0.chmod$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;S)I");
            }
            public static  @C("int(*)(char*,mode_t)") MemorySegment allocate(chmod fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle chmod$VH() {
            return fuse_h_constants_0.fuse_operations$chmod$VH();
        }
        public static  @C("int(*)(char*,mode_t)") MemoryAddress chmod$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$chmod$VH().get(seg);
        }
        public static  @C("int(*)(char*,mode_t)") MemoryAddress chmod$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$chmod$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void chmod$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,mode_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$chmod$VH().set(seg, x);
        }
        public static void chmod$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,mode_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$chmod$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface chown {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
            public static  @C("int(*)(char*,uid_t,gid_t)") MemorySegment allocate(chown fi) {
                return RuntimeHelper.upcallStub(chown.class, fi, fuse_h_constants_0.chown$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;II)I");
            }
            public static  @C("int(*)(char*,uid_t,gid_t)") MemorySegment allocate(chown fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle chown$VH() {
            return fuse_h_constants_0.fuse_operations$chown$VH();
        }
        public static  @C("int(*)(char*,uid_t,gid_t)") MemoryAddress chown$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$chown$VH().get(seg);
        }
        public static  @C("int(*)(char*,uid_t,gid_t)") MemoryAddress chown$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$chown$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void chown$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,uid_t,gid_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$chown$VH().set(seg, x);
        }
        public static void chown$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,uid_t,gid_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$chown$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface truncate {

            int apply(jdk.incubator.foreign.MemoryAddress x0, long x1);
            public static  @C("int(*)(char*,off_t)") MemorySegment allocate(truncate fi) {
                return RuntimeHelper.upcallStub(truncate.class, fi, fuse_h_constants_0.truncate$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;J)I");
            }
            public static  @C("int(*)(char*,off_t)") MemorySegment allocate(truncate fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle truncate$VH() {
            return fuse_h_constants_0.fuse_operations$truncate$VH();
        }
        public static  @C("int(*)(char*,off_t)") MemoryAddress truncate$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$truncate$VH().get(seg);
        }
        public static  @C("int(*)(char*,off_t)") MemoryAddress truncate$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$truncate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void truncate$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,off_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$truncate$VH().set(seg, x);
        }
        public static void truncate$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,off_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$truncate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface utime {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct utimbuf*)") MemorySegment allocate(utime fi) {
                return RuntimeHelper.upcallStub(utime.class, fi, fuse_h_constants_0.utime$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct utimbuf*)") MemorySegment allocate(utime fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle utime$VH() {
            return fuse_h_constants_0.fuse_operations$utime$VH();
        }
        public static  @C("int(*)(char*,struct utimbuf*)") MemoryAddress utime$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$utime$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct utimbuf*)") MemoryAddress utime$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$utime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void utime$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct utimbuf*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$utime$VH().set(seg, x);
        }
        public static void utime$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct utimbuf*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$utime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface open {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(open fi) {
                return RuntimeHelper.upcallStub(open.class, fi, fuse_h_constants_0.open$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(open fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle open$VH() {
            return fuse_h_constants_0.fuse_operations$open$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress open$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$open$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress open$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$open$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void open$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$open$VH().set(seg, x);
        }
        public static void open$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$open$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface read {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(read fi) {
                return RuntimeHelper.upcallStub(read.class, fi, fuse_h_constants_0.read$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(read fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle read$VH() {
            return fuse_h_constants_0.fuse_operations$read$VH();
        }
        public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress read$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$read$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress read$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$read$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void read$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$read$VH().set(seg, x);
        }
        public static void read$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$read$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface write {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(write fi) {
                return RuntimeHelper.upcallStub(write.class, fi, fuse_h_constants_0.write$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(write fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle write$VH() {
            return fuse_h_constants_0.fuse_operations$write$VH();
        }
        public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress write$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$write$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress write$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$write$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void write$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$write$VH().set(seg, x);
        }
        public static void write$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$write$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface statfs {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct statvfs*)") MemorySegment allocate(statfs fi) {
                return RuntimeHelper.upcallStub(statfs.class, fi, fuse_h_constants_0.statfs$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct statvfs*)") MemorySegment allocate(statfs fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle statfs$VH() {
            return fuse_h_constants_0.fuse_operations$statfs$VH();
        }
        public static  @C("int(*)(char*,struct statvfs*)") MemoryAddress statfs$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$statfs$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct statvfs*)") MemoryAddress statfs$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$statfs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void statfs$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct statvfs*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$statfs$VH().set(seg, x);
        }
        public static void statfs$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct statvfs*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$statfs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface flush {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(flush fi) {
                return RuntimeHelper.upcallStub(flush.class, fi, fuse_h_constants_0.flush$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(flush fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle flush$VH() {
            return fuse_h_constants_0.fuse_operations$flush$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress flush$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$flush$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress flush$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$flush$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flush$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$flush$VH().set(seg, x);
        }
        public static void flush$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$flush$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface release {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(release fi) {
                return RuntimeHelper.upcallStub(release.class, fi, fuse_h_constants_0.release$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(release fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle release$VH() {
            return fuse_h_constants_0.fuse_operations$release$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress release$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$release$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress release$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$release$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void release$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$release$VH().set(seg, x);
        }
        public static void release$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$release$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface fsync {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemorySegment allocate(fsync fi) {
                return RuntimeHelper.upcallStub(fsync.class, fi, fuse_h_constants_0.fsync$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemorySegment allocate(fsync fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle fsync$VH() {
            return fuse_h_constants_0.fuse_operations$fsync$VH();
        }
        public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress fsync$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$fsync$VH().get(seg);
        }
        public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress fsync$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$fsync$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fsync$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$fsync$VH().set(seg, x);
        }
        public static void fsync$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$fsync$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setxattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3, int x4, int x5);
            public static  @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemorySegment allocate(setxattr fi) {
                return RuntimeHelper.upcallStub(setxattr.class, fi, fuse_h_constants_0.setxattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JII)I");
            }
            public static  @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemorySegment allocate(setxattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setxattr$VH() {
            return fuse_h_constants_0.fuse_operations$setxattr$VH();
        }
        public static  @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemoryAddress setxattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setxattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemoryAddress setxattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setxattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setxattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setxattr$VH().set(seg, x);
        }
        public static void setxattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,char*,size_t,int,uint32_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setxattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface getxattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3, int x4);
            public static  @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemorySegment allocate(getxattr fi) {
                return RuntimeHelper.upcallStub(getxattr.class, fi, fuse_h_constants_0.getxattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I");
            }
            public static  @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemorySegment allocate(getxattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle getxattr$VH() {
            return fuse_h_constants_0.fuse_operations$getxattr$VH();
        }
        public static  @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemoryAddress getxattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$getxattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemoryAddress getxattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$getxattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void getxattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$getxattr$VH().set(seg, x);
        }
        public static void getxattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,char*,size_t,uint32_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$getxattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface listxattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
            public static  @C("int(*)(char*,char*,size_t)") MemorySegment allocate(listxattr fi) {
                return RuntimeHelper.upcallStub(listxattr.class, fi, fuse_h_constants_0.listxattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
            }
            public static  @C("int(*)(char*,char*,size_t)") MemorySegment allocate(listxattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle listxattr$VH() {
            return fuse_h_constants_0.fuse_operations$listxattr$VH();
        }
        public static  @C("int(*)(char*,char*,size_t)") MemoryAddress listxattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$listxattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,size_t)") MemoryAddress listxattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$listxattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void listxattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,size_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$listxattr$VH().set(seg, x);
        }
        public static void listxattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,size_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$listxattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface removexattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(removexattr fi) {
                return RuntimeHelper.upcallStub(removexattr.class, fi, fuse_h_constants_0.removexattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,char*)") MemorySegment allocate(removexattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle removexattr$VH() {
            return fuse_h_constants_0.fuse_operations$removexattr$VH();
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress removexattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$removexattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*)") MemoryAddress removexattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$removexattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void removexattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$removexattr$VH().set(seg, x);
        }
        public static void removexattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$removexattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface opendir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(opendir fi) {
                return RuntimeHelper.upcallStub(opendir.class, fi, fuse_h_constants_0.opendir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(opendir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle opendir$VH() {
            return fuse_h_constants_0.fuse_operations$opendir$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress opendir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$opendir$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress opendir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$opendir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void opendir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$opendir$VH().set(seg, x);
        }
        public static void opendir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$opendir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface readdir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemorySegment allocate(readdir fi) {
                return RuntimeHelper.upcallStub(readdir.class, fi, fuse_h_constants_0.readdir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemorySegment allocate(readdir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle readdir$VH() {
            return fuse_h_constants_0.fuse_operations$readdir$VH();
        }
        public static  @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemoryAddress readdir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$readdir$VH().get(seg);
        }
        public static  @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemoryAddress readdir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$readdir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void readdir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$readdir$VH().set(seg, x);
        }
        public static void readdir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,void*,fuse_fill_dir_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$readdir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface releasedir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(releasedir fi) {
                return RuntimeHelper.upcallStub(releasedir.class, fi, fuse_h_constants_0.releasedir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*)") MemorySegment allocate(releasedir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle releasedir$VH() {
            return fuse_h_constants_0.fuse_operations$releasedir$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress releasedir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$releasedir$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress releasedir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$releasedir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void releasedir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$releasedir$VH().set(seg, x);
        }
        public static void releasedir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$releasedir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface fsyncdir {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemorySegment allocate(fsyncdir fi) {
                return RuntimeHelper.upcallStub(fsyncdir.class, fi, fuse_h_constants_0.fsyncdir$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemorySegment allocate(fsyncdir fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle fsyncdir$VH() {
            return fuse_h_constants_0.fuse_operations$fsyncdir$VH();
        }
        public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress fsyncdir$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$fsyncdir$VH().get(seg);
        }
        public static  @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress fsyncdir$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$fsyncdir$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fsyncdir$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$fsyncdir$VH().set(seg, x);
        }
        public static void fsyncdir$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,int,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$fsyncdir$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface init {

            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("void*(*)(struct fuse_conn_info*)") MemorySegment allocate(init fi) {
                return RuntimeHelper.upcallStub(init.class, fi, fuse_h_constants_0.init$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
            }
            public static  @C("void*(*)(struct fuse_conn_info*)") MemorySegment allocate(init fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle init$VH() {
            return fuse_h_constants_0.fuse_operations$init$VH();
        }
        public static  @C("void*(*)(struct fuse_conn_info*)") MemoryAddress init$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$init$VH().get(seg);
        }
        public static  @C("void*(*)(struct fuse_conn_info*)") MemoryAddress init$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$init$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void init$set(@C("struct fuse_operations") MemorySegment seg, @C("void*(*)(struct fuse_conn_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$init$VH().set(seg, x);
        }
        public static void init$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("void*(*)(struct fuse_conn_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$init$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface destroy {

            void apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("void(*)(void*)") MemorySegment allocate(destroy fi) {
                return RuntimeHelper.upcallStub(destroy.class, fi, fuse_h_constants_0.destroy$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
            }
            public static  @C("void(*)(void*)") MemorySegment allocate(destroy fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle destroy$VH() {
            return fuse_h_constants_0.fuse_operations$destroy$VH();
        }
        public static  @C("void(*)(void*)") MemoryAddress destroy$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$destroy$VH().get(seg);
        }
        public static  @C("void(*)(void*)") MemoryAddress destroy$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$destroy$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void destroy$set(@C("struct fuse_operations") MemorySegment seg, @C("void(*)(void*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$destroy$VH().set(seg, x);
        }
        public static void destroy$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("void(*)(void*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$destroy$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface access {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
            public static  @C("int(*)(char*,int)") MemorySegment allocate(access fi) {
                return RuntimeHelper.upcallStub(access.class, fi, fuse_h_constants_0.access$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;I)I");
            }
            public static  @C("int(*)(char*,int)") MemorySegment allocate(access fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle access$VH() {
            return fuse_h_constants_0.fuse_operations$access$VH();
        }
        public static  @C("int(*)(char*,int)") MemoryAddress access$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$access$VH().get(seg);
        }
        public static  @C("int(*)(char*,int)") MemoryAddress access$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$access$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void access$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,int)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$access$VH().set(seg, x);
        }
        public static void access$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,int)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$access$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface create {

            int apply(jdk.incubator.foreign.MemoryAddress x0, short x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemorySegment allocate(create fi) {
                return RuntimeHelper.upcallStub(create.class, fi, fuse_h_constants_0.create$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemorySegment allocate(create fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle create$VH() {
            return fuse_h_constants_0.fuse_operations$create$VH();
        }
        public static  @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemoryAddress create$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$create$VH().get(seg);
        }
        public static  @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemoryAddress create$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$create$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void create$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$create$VH().set(seg, x);
        }
        public static void create$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,mode_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$create$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface ftruncate {

            int apply(jdk.incubator.foreign.MemoryAddress x0, long x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,off_t,struct fuse_file_info*)") MemorySegment allocate(ftruncate fi) {
                return RuntimeHelper.upcallStub(ftruncate.class, fi, fuse_h_constants_0.ftruncate$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,off_t,struct fuse_file_info*)") MemorySegment allocate(ftruncate fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle ftruncate$VH() {
            return fuse_h_constants_0.fuse_operations$ftruncate$VH();
        }
        public static  @C("int(*)(char*,off_t,struct fuse_file_info*)") MemoryAddress ftruncate$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$ftruncate$VH().get(seg);
        }
        public static  @C("int(*)(char*,off_t,struct fuse_file_info*)") MemoryAddress ftruncate$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$ftruncate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ftruncate$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$ftruncate$VH().set(seg, x);
        }
        public static void ftruncate$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$ftruncate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface fgetattr {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemorySegment allocate(fgetattr fi) {
                return RuntimeHelper.upcallStub(fgetattr.class, fi, fuse_h_constants_0.fgetattr$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemorySegment allocate(fgetattr fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle fgetattr$VH() {
            return fuse_h_constants_0.fuse_operations$fgetattr$VH();
        }
        public static  @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemoryAddress fgetattr$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$fgetattr$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemoryAddress fgetattr$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$fgetattr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fgetattr$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$fgetattr$VH().set(seg, x);
        }
        public static void fgetattr$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct stat*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$fgetattr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface lock {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
            public static  @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemorySegment allocate(lock fi) {
                return RuntimeHelper.upcallStub(lock.class, fi, fuse_h_constants_0.lock$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemorySegment allocate(lock fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle lock$VH() {
            return fuse_h_constants_0.fuse_operations$lock$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemoryAddress lock$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$lock$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemoryAddress lock$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$lock$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lock$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$lock$VH().set(seg, x);
        }
        public static void lock$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*,int,struct flock*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$lock$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface utimens {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(utimens fi) {
                return RuntimeHelper.upcallStub(utimens.class, fi, fuse_h_constants_0.utimens$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(utimens fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle utimens$VH() {
            return fuse_h_constants_0.fuse_operations$utimens$VH();
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress utimens$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$utimens$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress utimens$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$utimens$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void utimens$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$utimens$VH().set(seg, x);
        }
        public static void utimens$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$utimens$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface bmap {

            int apply(jdk.incubator.foreign.MemoryAddress x0, long x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,size_t,uint64_t*)") MemorySegment allocate(bmap fi) {
                return RuntimeHelper.upcallStub(bmap.class, fi, fuse_h_constants_0.bmap$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,size_t,uint64_t*)") MemorySegment allocate(bmap fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle bmap$VH() {
            return fuse_h_constants_0.fuse_operations$bmap$VH();
        }
        public static  @C("int(*)(char*,size_t,uint64_t*)") MemoryAddress bmap$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$bmap$VH().get(seg);
        }
        public static  @C("int(*)(char*,size_t,uint64_t*)") MemoryAddress bmap$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$bmap$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bmap$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,size_t,uint64_t*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$bmap$VH().set(seg, x);
        }
        public static void bmap$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,size_t,uint64_t*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$bmap$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface ioctl {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
            public static  @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemorySegment allocate(ioctl fi) {
                return RuntimeHelper.upcallStub(ioctl.class, fi, fuse_h_constants_0.ioctl$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemorySegment allocate(ioctl fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle ioctl$VH() {
            return fuse_h_constants_0.fuse_operations$ioctl$VH();
        }
        public static  @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemoryAddress ioctl$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$ioctl$VH().get(seg);
        }
        public static  @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemoryAddress ioctl$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$ioctl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ioctl$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$ioctl$VH().set(seg, x);
        }
        public static void ioctl$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,int,void*,struct fuse_file_info*,unsigned int,void*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$ioctl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface poll {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
            public static  @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemorySegment allocate(poll fi) {
                return RuntimeHelper.upcallStub(poll.class, fi, fuse_h_constants_0.poll$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemorySegment allocate(poll fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle poll$VH() {
            return fuse_h_constants_0.fuse_operations$poll$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemoryAddress poll$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$poll$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemoryAddress poll$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$poll$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void poll$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$poll$VH().set(seg, x);
        }
        public static void poll$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*,struct fuse_pollhandle*,unsigned int*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$poll$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface write_buf {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3);
            public static  @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemorySegment allocate(write_buf fi) {
                return RuntimeHelper.upcallStub(write_buf.class, fi, fuse_h_constants_0.write_buf$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemorySegment allocate(write_buf fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle write_buf$VH() {
            return fuse_h_constants_0.fuse_operations$write_buf$VH();
        }
        public static  @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemoryAddress write_buf$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$write_buf$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemoryAddress write_buf$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$write_buf$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void write_buf$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$write_buf$VH().set(seg, x);
        }
        public static void write_buf$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_bufvec*,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$write_buf$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface read_buf {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(read_buf fi) {
                return RuntimeHelper.upcallStub(read_buf.class, fi, fuse_h_constants_0.read_buf$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemorySegment allocate(read_buf fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle read_buf$VH() {
            return fuse_h_constants_0.fuse_operations$read_buf$VH();
        }
        public static  @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemoryAddress read_buf$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$read_buf$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemoryAddress read_buf$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$read_buf$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void read_buf$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$read_buf$VH().set(seg, x);
        }
        public static void read_buf$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_bufvec**,size_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$read_buf$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface flock {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
            public static  @C("int(*)(char*,struct fuse_file_info*,int)") MemorySegment allocate(flock fi) {
                return RuntimeHelper.upcallStub(flock.class, fi, fuse_h_constants_0.flock$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
            }
            public static  @C("int(*)(char*,struct fuse_file_info*,int)") MemorySegment allocate(flock fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle flock$VH() {
            return fuse_h_constants_0.fuse_operations$flock$VH();
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,int)") MemoryAddress flock$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$flock$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct fuse_file_info*,int)") MemoryAddress flock$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$flock$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flock$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct fuse_file_info*,int)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$flock$VH().set(seg, x);
        }
        public static void flock$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct fuse_file_info*,int)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$flock$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface fallocate {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, long x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
            public static  @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemorySegment allocate(fallocate fi) {
                return RuntimeHelper.upcallStub(fallocate.class, fi, fuse_h_constants_0.fallocate$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;IJJLjdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemorySegment allocate(fallocate fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle fallocate$VH() {
            return fuse_h_constants_0.fuse_operations$fallocate$VH();
        }
        public static  @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemoryAddress fallocate$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$fallocate$VH().get(seg);
        }
        public static  @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemoryAddress fallocate$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$fallocate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fallocate$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$fallocate$VH().set(seg, x);
        }
        public static void fallocate$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,int,off_t,off_t,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$fallocate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface reserved00 {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7);
            public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemorySegment allocate(reserved00 fi) {
                return RuntimeHelper.upcallStub(reserved00.class, fi, fuse_h_constants_0.reserved00$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemorySegment allocate(reserved00 fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle reserved00$VH() {
            return fuse_h_constants_0.fuse_operations$reserved00$VH();
        }
        public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress reserved00$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$reserved00$VH().get(seg);
        }
        public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress reserved00$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$reserved00$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void reserved00$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$reserved00$VH().set(seg, x);
        }
        public static void reserved00$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$reserved00$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface reserved01 {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7);
            public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemorySegment allocate(reserved01 fi) {
                return RuntimeHelper.upcallStub(reserved01.class, fi, fuse_h_constants_0.reserved01$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemorySegment allocate(reserved01 fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle reserved01$VH() {
            return fuse_h_constants_0.fuse_operations$reserved01$VH();
        }
        public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress reserved01$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$reserved01$VH().get(seg);
        }
        public static  @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress reserved01$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$reserved01$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void reserved01$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$reserved01$VH().set(seg, x);
        }
        public static void reserved01$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(void*,void*,void*,void*,void*,void*,void*,void*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$reserved01$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface renamex {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
            public static  @C("int(*)(char*,char*,unsigned int)") MemorySegment allocate(renamex fi) {
                return RuntimeHelper.upcallStub(renamex.class, fi, fuse_h_constants_0.renamex$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
            }
            public static  @C("int(*)(char*,char*,unsigned int)") MemorySegment allocate(renamex fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle renamex$VH() {
            return fuse_h_constants_0.fuse_operations$renamex$VH();
        }
        public static  @C("int(*)(char*,char*,unsigned int)") MemoryAddress renamex$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$renamex$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,unsigned int)") MemoryAddress renamex$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$renamex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void renamex$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,unsigned int)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$renamex$VH().set(seg, x);
        }
        public static void renamex$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,unsigned int)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$renamex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface statfs_x {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct statfs*)") MemorySegment allocate(statfs_x fi) {
                return RuntimeHelper.upcallStub(statfs_x.class, fi, fuse_h_constants_0.statfs_x$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct statfs*)") MemorySegment allocate(statfs_x fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle statfs_x$VH() {
            return fuse_h_constants_0.fuse_operations$statfs_x$VH();
        }
        public static  @C("int(*)(char*,struct statfs*)") MemoryAddress statfs_x$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$statfs_x$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct statfs*)") MemoryAddress statfs_x$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$statfs_x$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void statfs_x$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct statfs*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$statfs_x$VH().set(seg, x);
        }
        public static void statfs_x$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct statfs*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$statfs_x$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setvolname {

            int apply(jdk.incubator.foreign.MemoryAddress x0);
            public static  @C("int(*)(char*)") MemorySegment allocate(setvolname fi) {
                return RuntimeHelper.upcallStub(setvolname.class, fi, fuse_h_constants_0.setvolname$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*)") MemorySegment allocate(setvolname fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setvolname$VH() {
            return fuse_h_constants_0.fuse_operations$setvolname$VH();
        }
        public static  @C("int(*)(char*)") MemoryAddress setvolname$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setvolname$VH().get(seg);
        }
        public static  @C("int(*)(char*)") MemoryAddress setvolname$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setvolname$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setvolname$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setvolname$VH().set(seg, x);
        }
        public static void setvolname$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setvolname$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface exchange {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
            public static  @C("int(*)(char*,char*,unsigned long)") MemorySegment allocate(exchange fi) {
                return RuntimeHelper.upcallStub(exchange.class, fi, fuse_h_constants_0.exchange$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
            }
            public static  @C("int(*)(char*,char*,unsigned long)") MemorySegment allocate(exchange fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle exchange$VH() {
            return fuse_h_constants_0.fuse_operations$exchange$VH();
        }
        public static  @C("int(*)(char*,char*,unsigned long)") MemoryAddress exchange$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$exchange$VH().get(seg);
        }
        public static  @C("int(*)(char*,char*,unsigned long)") MemoryAddress exchange$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$exchange$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exchange$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,char*,unsigned long)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$exchange$VH().set(seg, x);
        }
        public static void exchange$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,char*,unsigned long)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$exchange$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface getxtimes {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,struct timespec*,struct timespec*)") MemorySegment allocate(getxtimes fi) {
                return RuntimeHelper.upcallStub(getxtimes.class, fi, fuse_h_constants_0.getxtimes$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct timespec*,struct timespec*)") MemorySegment allocate(getxtimes fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle getxtimes$VH() {
            return fuse_h_constants_0.fuse_operations$getxtimes$VH();
        }
        public static  @C("int(*)(char*,struct timespec*,struct timespec*)") MemoryAddress getxtimes$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$getxtimes$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct timespec*,struct timespec*)") MemoryAddress getxtimes$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$getxtimes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void getxtimes$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct timespec*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$getxtimes$VH().set(seg, x);
        }
        public static void getxtimes$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct timespec*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$getxtimes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setbkuptime {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setbkuptime fi) {
                return RuntimeHelper.upcallStub(setbkuptime.class, fi, fuse_h_constants_0.setbkuptime$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setbkuptime fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setbkuptime$VH() {
            return fuse_h_constants_0.fuse_operations$setbkuptime$VH();
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setbkuptime$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setbkuptime$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setbkuptime$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setbkuptime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setbkuptime$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setbkuptime$VH().set(seg, x);
        }
        public static void setbkuptime$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setbkuptime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setchgtime {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setchgtime fi) {
                return RuntimeHelper.upcallStub(setchgtime.class, fi, fuse_h_constants_0.setchgtime$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setchgtime fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setchgtime$VH() {
            return fuse_h_constants_0.fuse_operations$setchgtime$VH();
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setchgtime$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setchgtime$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setchgtime$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setchgtime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setchgtime$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setchgtime$VH().set(seg, x);
        }
        public static void setchgtime$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setchgtime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setcrtime {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setcrtime fi) {
                return RuntimeHelper.upcallStub(setcrtime.class, fi, fuse_h_constants_0.setcrtime$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct timespec*)") MemorySegment allocate(setcrtime fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setcrtime$VH() {
            return fuse_h_constants_0.fuse_operations$setcrtime$VH();
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setcrtime$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setcrtime$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct timespec*)") MemoryAddress setcrtime$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setcrtime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setcrtime$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setcrtime$VH().set(seg, x);
        }
        public static void setcrtime$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct timespec*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setcrtime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface chflags {

            int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
            public static  @C("int(*)(char*,uint32_t)") MemorySegment allocate(chflags fi) {
                return RuntimeHelper.upcallStub(chflags.class, fi, fuse_h_constants_0.chflags$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;I)I");
            }
            public static  @C("int(*)(char*,uint32_t)") MemorySegment allocate(chflags fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle chflags$VH() {
            return fuse_h_constants_0.fuse_operations$chflags$VH();
        }
        public static  @C("int(*)(char*,uint32_t)") MemoryAddress chflags$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$chflags$VH().get(seg);
        }
        public static  @C("int(*)(char*,uint32_t)") MemoryAddress chflags$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$chflags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void chflags$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,uint32_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$chflags$VH().set(seg, x);
        }
        public static void chflags$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,uint32_t)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$chflags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface setattr_x$0 {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("int(*)(char*,struct setattr_x*)") MemorySegment allocate(setattr_x$0 fi) {
                return RuntimeHelper.upcallStub(setattr_x$0.class, fi, fuse_h_constants_0.setattr_x$0$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct setattr_x*)") MemorySegment allocate(setattr_x$0 fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle setattr_x$VH() {
            return fuse_h_constants_0.fuse_operations$setattr_x$VH();
        }
        public static  @C("int(*)(char*,struct setattr_x*)") MemoryAddress setattr_x$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setattr_x$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct setattr_x*)") MemoryAddress setattr_x$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$setattr_x$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void setattr_x$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct setattr_x*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setattr_x$VH().set(seg, x);
        }
        public static void setattr_x$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct setattr_x*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$setattr_x$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface fsetattr_x {

            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
            public static  @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemorySegment allocate(fsetattr_x fi) {
                return RuntimeHelper.upcallStub(fsetattr_x.class, fi, fuse_h_constants_0.fsetattr_x$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
            }
            public static  @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemorySegment allocate(fsetattr_x fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle fsetattr_x$VH() {
            return fuse_h_constants_0.fuse_operations$fsetattr_x$VH();
        }
        public static  @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemoryAddress fsetattr_x$get(@C("struct fuse_operations") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$fsetattr_x$VH().get(seg);
        }
        public static  @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemoryAddress fsetattr_x$get(@C("struct fuse_operations") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_operations$fsetattr_x$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fsetattr_x$set(@C("struct fuse_operations") MemorySegment seg, @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$fsetattr_x$VH().set(seg, x);
        }
        public static void fsetattr_x$set(@C("struct fuse_operations") MemorySegment seg, long index, @C("int(*)(char*,struct setattr_x*,struct fuse_file_info*)") MemoryAddress x) {
            fuse_h_constants_0.fuse_operations$fsetattr_x$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_operations") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_operations") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_operations[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_operations[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_operations*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_operations*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_operations") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct fuse_context")public static class fuse_context {

        /* package-private */ fuse_context() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.fuse_context$struct$LAYOUT();
        }
        public static VarHandle fuse$VH() {
            return fuse_h_constants_0.fuse_context$fuse$VH();
        }
        public static  @C("struct fuse*") MemoryAddress fuse$get(@C("struct fuse_context") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_context$fuse$VH().get(seg);
        }
        public static  @C("struct fuse*") MemoryAddress fuse$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_context$fuse$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fuse$set(@C("struct fuse_context") MemorySegment seg, @C("struct fuse*") MemoryAddress x) {
            fuse_h_constants_0.fuse_context$fuse$VH().set(seg, x);
        }
        public static void fuse$set(@C("struct fuse_context") MemorySegment seg, long index, @C("struct fuse*") MemoryAddress x) {
            fuse_h_constants_0.fuse_context$fuse$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle uid$VH() {
            return fuse_h_constants_0.fuse_context$uid$VH();
        }
        public static  @C("uid_t") int uid$get(@C("struct fuse_context") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_context$uid$VH().get(seg);
        }
        public static  @C("uid_t") int uid$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_context$uid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void uid$set(@C("struct fuse_context") MemorySegment seg, @C("uid_t") int x) {
            fuse_h_constants_0.fuse_context$uid$VH().set(seg, x);
        }
        public static void uid$set(@C("struct fuse_context") MemorySegment seg, long index, @C("uid_t") int x) {
            fuse_h_constants_0.fuse_context$uid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle gid$VH() {
            return fuse_h_constants_0.fuse_context$gid$VH();
        }
        public static  @C("gid_t") int gid$get(@C("struct fuse_context") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_context$gid$VH().get(seg);
        }
        public static  @C("gid_t") int gid$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_context$gid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void gid$set(@C("struct fuse_context") MemorySegment seg, @C("gid_t") int x) {
            fuse_h_constants_0.fuse_context$gid$VH().set(seg, x);
        }
        public static void gid$set(@C("struct fuse_context") MemorySegment seg, long index, @C("gid_t") int x) {
            fuse_h_constants_0.fuse_context$gid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pid$VH() {
            return fuse_h_constants_0.fuse_context$pid$VH();
        }
        public static  @C("pid_t") int pid$get(@C("struct fuse_context") MemorySegment seg) {
            return (int)fuse_h_constants_0.fuse_context$pid$VH().get(seg);
        }
        public static  @C("pid_t") int pid$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (int)fuse_h_constants_0.fuse_context$pid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pid$set(@C("struct fuse_context") MemorySegment seg, @C("pid_t") int x) {
            fuse_h_constants_0.fuse_context$pid$VH().set(seg, x);
        }
        public static void pid$set(@C("struct fuse_context") MemorySegment seg, long index, @C("pid_t") int x) {
            fuse_h_constants_0.fuse_context$pid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle private_data$VH() {
            return fuse_h_constants_0.fuse_context$private_data$VH();
        }
        public static  @C("void*") MemoryAddress private_data$get(@C("struct fuse_context") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_context$private_data$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress private_data$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_context$private_data$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void private_data$set(@C("struct fuse_context") MemorySegment seg, @C("void*") MemoryAddress x) {
            fuse_h_constants_0.fuse_context$private_data$VH().set(seg, x);
        }
        public static void private_data$set(@C("struct fuse_context") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            fuse_h_constants_0.fuse_context$private_data$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle umask$VH() {
            return fuse_h_constants_0.fuse_context$umask$VH();
        }
        public static  @C("mode_t") short umask$get(@C("struct fuse_context") MemorySegment seg) {
            return (short)fuse_h_constants_0.fuse_context$umask$VH().get(seg);
        }
        public static  @C("mode_t") short umask$get(@C("struct fuse_context") MemorySegment seg, long index) {
            return (short)fuse_h_constants_0.fuse_context$umask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void umask$set(@C("struct fuse_context") MemorySegment seg, @C("mode_t") short x) {
            fuse_h_constants_0.fuse_context$umask$VH().set(seg, x);
        }
        public static void umask$set(@C("struct fuse_context") MemorySegment seg, long index, @C("mode_t") short x) {
            fuse_h_constants_0.fuse_context$umask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_context") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_context") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_context[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_context[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_context*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_context*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_context") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle fuse_new$MH() {
        return fuse_h_constants_0.fuse_new$MH();
    }
    public static @C("struct fuse*") MemoryAddress fuse_new (@C("struct fuse_chan*") Addressable ch, @C("struct fuse_args*") Addressable args, @C("struct fuse_operations*") Addressable op, @C("size_t") long op_size, @C("void*") Addressable user_data) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_new$MH().invokeExact(ch.address(), args.address(), op.address(), op_size, user_data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_destroy$MH() {
        return fuse_h_constants_0.fuse_destroy$MH();
    }
    public static void fuse_destroy (@C("struct fuse*") Addressable f) {
        try {
            fuse_h_constants_0.fuse_destroy$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_loop$MH() {
        return fuse_h_constants_0.fuse_loop$MH();
    }
    public static @C("int") int fuse_loop (@C("struct fuse*") Addressable f) {
        try {
            return (int)fuse_h_constants_0.fuse_loop$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_exit$MH() {
        return fuse_h_constants_0.fuse_exit$MH();
    }
    public static void fuse_exit (@C("struct fuse*") Addressable f) {
        try {
            fuse_h_constants_0.fuse_exit$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_loop_mt$MH() {
        return fuse_h_constants_0.fuse_loop_mt$MH();
    }
    public static @C("int") int fuse_loop_mt (@C("struct fuse*") Addressable f) {
        try {
            return (int)fuse_h_constants_0.fuse_loop_mt$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_get_context$MH() {
        return fuse_h_constants_0.fuse_get_context$MH();
    }
    public static @C("struct fuse_context*") MemoryAddress fuse_get_context () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_get_context$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_getgroups$MH() {
        return fuse_h_constants_0.fuse_getgroups$MH();
    }
    public static @C("int") int fuse_getgroups (@C("int") int size, @C("gid_t[]") Addressable list) {
        try {
            return (int)fuse_h_constants_0.fuse_getgroups$MH().invokeExact(size, list.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_interrupted$MH() {
        return fuse_h_constants_0.fuse_interrupted$MH();
    }
    public static @C("int") int fuse_interrupted () {
        try {
            return (int)fuse_h_constants_0.fuse_interrupted$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_invalidate_path$MH() {
        return fuse_h_constants_0.fuse_invalidate_path$MH();
    }
    public static @C("int") int fuse_invalidate_path (@C("struct fuse*") Addressable f, @C("char*") Addressable path) {
        try {
            return (int)fuse_h_constants_0.fuse_invalidate_path$MH().invokeExact(f.address(), path.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_invalidate$MH() {
        return fuse_h_constants_0.fuse_invalidate$MH();
    }
    public static @C("int") int fuse_invalidate (@C("struct fuse*") Addressable f, @C("char*") Addressable path) {
        try {
            return (int)fuse_h_constants_0.fuse_invalidate$MH().invokeExact(f.address(), path.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_is_lib_option$MH() {
        return fuse_h_constants_0.fuse_is_lib_option$MH();
    }
    public static @C("int") int fuse_is_lib_option (@C("char*") Addressable opt) {
        try {
            return (int)fuse_h_constants_0.fuse_is_lib_option$MH().invokeExact(opt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_main_real$MH() {
        return fuse_h_constants_0.fuse_main_real$MH();
    }
    public static @C("int") int fuse_main_real (@C("int") int argc, @C("char*[]") Addressable argv, @C("struct fuse_operations*") Addressable op, @C("size_t") long op_size, @C("void*") Addressable user_data) {
        try {
            return (int)fuse_h_constants_0.fuse_main_real$MH().invokeExact(argc, argv.address(), op.address(), op_size, user_data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_start_cleanup_thread$MH() {
        return fuse_h_constants_0.fuse_start_cleanup_thread$MH();
    }
    public static @C("int") int fuse_start_cleanup_thread (@C("struct fuse*") Addressable fuse) {
        try {
            return (int)fuse_h_constants_0.fuse_start_cleanup_thread$MH().invokeExact(fuse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_stop_cleanup_thread$MH() {
        return fuse_h_constants_0.fuse_stop_cleanup_thread$MH();
    }
    public static void fuse_stop_cleanup_thread (@C("struct fuse*") Addressable fuse) {
        try {
            fuse_h_constants_0.fuse_stop_cleanup_thread$MH().invokeExact(fuse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_clean_cache$MH() {
        return fuse_h_constants_0.fuse_clean_cache$MH();
    }
    public static @C("int") int fuse_clean_cache (@C("struct fuse*") Addressable fuse) {
        try {
            return (int)fuse_h_constants_0.fuse_clean_cache$MH().invokeExact(fuse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setattr_x$MH() {
        return fuse_h_constants_0.fuse_fs_setattr_x$MH();
    }
    public static @C("int") int fuse_fs_setattr_x (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct setattr_x*") Addressable attr) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_setattr_x$MH().invokeExact(fs.address(), path.address(), attr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_fsetattr_x$MH() {
        return fuse_h_constants_0.fuse_fs_fsetattr_x$MH();
    }
    public static @C("int") int fuse_fs_fsetattr_x (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct setattr_x*") Addressable attr, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_fsetattr_x$MH().invokeExact(fs.address(), path.address(), attr.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_getattr$MH() {
        return fuse_h_constants_0.fuse_fs_getattr$MH();
    }
    public static @C("int") int fuse_fs_getattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct stat*") Addressable buf) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_getattr$MH().invokeExact(fs.address(), path.address(), buf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_fgetattr$MH() {
        return fuse_h_constants_0.fuse_fs_fgetattr$MH();
    }
    public static @C("int") int fuse_fs_fgetattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct stat*") Addressable buf, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_fgetattr$MH().invokeExact(fs.address(), path.address(), buf.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_rename$MH() {
        return fuse_h_constants_0.fuse_fs_rename$MH();
    }
    public static @C("int") int fuse_fs_rename (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable oldpath, @C("char*") Addressable newpath) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_rename$MH().invokeExact(fs.address(), oldpath.address(), newpath.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_renamex$MH() {
        return fuse_h_constants_0.fuse_fs_renamex$MH();
    }
    public static @C("int") int fuse_fs_renamex (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable oldpath, @C("char*") Addressable newpath, @C("unsigned int") int flags) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_renamex$MH().invokeExact(fs.address(), oldpath.address(), newpath.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setvolname$MH() {
        return fuse_h_constants_0.fuse_fs_setvolname$MH();
    }
    public static @C("int") int fuse_fs_setvolname (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable volname) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_setvolname$MH().invokeExact(fs.address(), volname.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_exchange$MH() {
        return fuse_h_constants_0.fuse_fs_exchange$MH();
    }
    public static @C("int") int fuse_fs_exchange (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable oldpath, @C("char*") Addressable newpath, @C("unsigned long") long flags) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_exchange$MH().invokeExact(fs.address(), oldpath.address(), newpath.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_unlink$MH() {
        return fuse_h_constants_0.fuse_fs_unlink$MH();
    }
    public static @C("int") int fuse_fs_unlink (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_unlink$MH().invokeExact(fs.address(), path.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_rmdir$MH() {
        return fuse_h_constants_0.fuse_fs_rmdir$MH();
    }
    public static @C("int") int fuse_fs_rmdir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_rmdir$MH().invokeExact(fs.address(), path.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_symlink$MH() {
        return fuse_h_constants_0.fuse_fs_symlink$MH();
    }
    public static @C("int") int fuse_fs_symlink (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable linkname, @C("char*") Addressable path) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_symlink$MH().invokeExact(fs.address(), linkname.address(), path.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_link$MH() {
        return fuse_h_constants_0.fuse_fs_link$MH();
    }
    public static @C("int") int fuse_fs_link (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable oldpath, @C("char*") Addressable newpath) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_link$MH().invokeExact(fs.address(), oldpath.address(), newpath.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_release$MH() {
        return fuse_h_constants_0.fuse_fs_release$MH();
    }
    public static @C("int") int fuse_fs_release (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_release$MH().invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_open$MH() {
        return fuse_h_constants_0.fuse_fs_open$MH();
    }
    public static @C("int") int fuse_fs_open (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_open$MH().invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_read$MH() {
        return fuse_h_constants_0.fuse_fs_read$MH();
    }
    public static @C("int") int fuse_fs_read (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable buf, @C("size_t") long size, @C("off_t") long off, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_read$MH().invokeExact(fs.address(), path.address(), buf.address(), size, off, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_read_buf$MH() {
        return fuse_h_constants_0.fuse_fs_read_buf$MH();
    }
    public static @C("int") int fuse_fs_read_buf (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_bufvec**") Addressable bufp, @C("size_t") long size, @C("off_t") long off, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_read_buf$MH().invokeExact(fs.address(), path.address(), bufp.address(), size, off, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_write$MH() {
        return fuse_h_constants_0.fuse_fs_write$MH();
    }
    public static @C("int") int fuse_fs_write (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable buf, @C("size_t") long size, @C("off_t") long off, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_write$MH().invokeExact(fs.address(), path.address(), buf.address(), size, off, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_write_buf$MH() {
        return fuse_h_constants_0.fuse_fs_write_buf$MH();
    }
    public static @C("int") int fuse_fs_write_buf (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_bufvec*") Addressable buf, @C("off_t") long off, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_write_buf$MH().invokeExact(fs.address(), path.address(), buf.address(), off, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_fsync$MH() {
        return fuse_h_constants_0.fuse_fs_fsync$MH();
    }
    public static @C("int") int fuse_fs_fsync (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("int") int datasync, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_fsync$MH().invokeExact(fs.address(), path.address(), datasync, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_flush$MH() {
        return fuse_h_constants_0.fuse_fs_flush$MH();
    }
    public static @C("int") int fuse_fs_flush (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_flush$MH().invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_statfs$MH() {
        return fuse_h_constants_0.fuse_fs_statfs$MH();
    }
    public static @C("int") int fuse_fs_statfs (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct statvfs*") Addressable buf) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_statfs$MH().invokeExact(fs.address(), path.address(), buf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_statfs_x$MH() {
        return fuse_h_constants_0.fuse_fs_statfs_x$MH();
    }
    public static @C("int") int fuse_fs_statfs_x (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct statfs*") Addressable buf) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_statfs_x$MH().invokeExact(fs.address(), path.address(), buf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_opendir$MH() {
        return fuse_h_constants_0.fuse_fs_opendir$MH();
    }
    public static @C("int") int fuse_fs_opendir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_opendir$MH().invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_readdir$MH() {
        return fuse_h_constants_0.fuse_fs_readdir$MH();
    }
    public static interface fuse_fs_readdir$filler {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3);
        public static  @C("fuse_fill_dir_t") MemorySegment allocate(fuse_fs_readdir$filler fi) {
            return RuntimeHelper.upcallStub(fuse_fs_readdir$filler.class, fi, fuse_h_constants_0.fuse_fs_readdir$filler$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
        }
        public static  @C("fuse_fill_dir_t") MemorySegment allocate(fuse_fs_readdir$filler fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static @C("int") int fuse_fs_readdir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("void*") Addressable buf, @C("fuse_fill_dir_t") Addressable filler, @C("off_t") long off, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_readdir$MH().invokeExact(fs.address(), path.address(), buf.address(), filler.address(), off, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_fsyncdir$MH() {
        return fuse_h_constants_0.fuse_fs_fsyncdir$MH();
    }
    public static @C("int") int fuse_fs_fsyncdir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("int") int datasync, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_fsyncdir$MH().invokeExact(fs.address(), path.address(), datasync, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_releasedir$MH() {
        return fuse_h_constants_0.fuse_fs_releasedir$MH();
    }
    public static @C("int") int fuse_fs_releasedir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_releasedir$MH().invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_create$MH() {
        return fuse_h_constants_0.fuse_fs_create$MH();
    }
    public static @C("int") int fuse_fs_create (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("mode_t") short mode, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_create$MH().invokeExact(fs.address(), path.address(), mode, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_lock$MH() {
        return fuse_h_constants_0.fuse_fs_lock$MH();
    }
    public static @C("int") int fuse_fs_lock (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi, @C("int") int cmd, @C("struct flock*") Addressable lock) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_lock$MH().invokeExact(fs.address(), path.address(), fi.address(), cmd, lock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_flock$MH() {
        return fuse_h_constants_0.fuse_fs_flock$MH();
    }
    public static @C("int") int fuse_fs_flock (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi, @C("int") int op) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_flock$MH().invokeExact(fs.address(), path.address(), fi.address(), op);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_chflags$MH() {
        return fuse_h_constants_0.fuse_fs_chflags$MH();
    }
    public static @C("int") int fuse_fs_chflags (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("uint32_t") int flags) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_chflags$MH().invokeExact(fs.address(), path.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_getxtimes$MH() {
        return fuse_h_constants_0.fuse_fs_getxtimes$MH();
    }
    public static @C("int") int fuse_fs_getxtimes (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct timespec*") Addressable bkuptime, @C("struct timespec*") Addressable crtime) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_getxtimes$MH().invokeExact(fs.address(), path.address(), bkuptime.address(), crtime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setbkuptime$MH() {
        return fuse_h_constants_0.fuse_fs_setbkuptime$MH();
    }
    public static @C("int") int fuse_fs_setbkuptime (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct timespec*") Addressable tv) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_setbkuptime$MH().invokeExact(fs.address(), path.address(), tv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setchgtime$MH() {
        return fuse_h_constants_0.fuse_fs_setchgtime$MH();
    }
    public static @C("int") int fuse_fs_setchgtime (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct timespec*") Addressable tv) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_setchgtime$MH().invokeExact(fs.address(), path.address(), tv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setcrtime$MH() {
        return fuse_h_constants_0.fuse_fs_setcrtime$MH();
    }
    public static @C("int") int fuse_fs_setcrtime (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct timespec*") Addressable tv) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_setcrtime$MH().invokeExact(fs.address(), path.address(), tv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_chmod$MH() {
        return fuse_h_constants_0.fuse_fs_chmod$MH();
    }
    public static @C("int") int fuse_fs_chmod (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("mode_t") short mode) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_chmod$MH().invokeExact(fs.address(), path.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_chown$MH() {
        return fuse_h_constants_0.fuse_fs_chown$MH();
    }
    public static @C("int") int fuse_fs_chown (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("uid_t") int uid, @C("gid_t") int gid) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_chown$MH().invokeExact(fs.address(), path.address(), uid, gid);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_truncate$MH() {
        return fuse_h_constants_0.fuse_fs_truncate$MH();
    }
    public static @C("int") int fuse_fs_truncate (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("off_t") long size) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_truncate$MH().invokeExact(fs.address(), path.address(), size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_ftruncate$MH() {
        return fuse_h_constants_0.fuse_fs_ftruncate$MH();
    }
    public static @C("int") int fuse_fs_ftruncate (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("off_t") long size, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_ftruncate$MH().invokeExact(fs.address(), path.address(), size, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_utimens$MH() {
        return fuse_h_constants_0.fuse_fs_utimens$MH();
    }
    public static @C("int") int fuse_fs_utimens (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct timespec[]") Addressable tv) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_utimens$MH().invokeExact(fs.address(), path.address(), tv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_access$MH() {
        return fuse_h_constants_0.fuse_fs_access$MH();
    }
    public static @C("int") int fuse_fs_access (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("int") int mask) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_access$MH().invokeExact(fs.address(), path.address(), mask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_readlink$MH() {
        return fuse_h_constants_0.fuse_fs_readlink$MH();
    }
    public static @C("int") int fuse_fs_readlink (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable buf, @C("size_t") long len) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_readlink$MH().invokeExact(fs.address(), path.address(), buf.address(), len);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_mknod$MH() {
        return fuse_h_constants_0.fuse_fs_mknod$MH();
    }
    public static @C("int") int fuse_fs_mknod (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("mode_t") short mode, @C("dev_t") int rdev) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_mknod$MH().invokeExact(fs.address(), path.address(), mode, rdev);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_mkdir$MH() {
        return fuse_h_constants_0.fuse_fs_mkdir$MH();
    }
    public static @C("int") int fuse_fs_mkdir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("mode_t") short mode) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_mkdir$MH().invokeExact(fs.address(), path.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setxattr$MH() {
        return fuse_h_constants_0.fuse_fs_setxattr$MH();
    }
    public static @C("int") int fuse_fs_setxattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable name, @C("char*") Addressable value, @C("size_t") long size, @C("int") int flags, @C("uint32_t") int position) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_setxattr$MH().invokeExact(fs.address(), path.address(), name.address(), value.address(), size, flags, position);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_getxattr$MH() {
        return fuse_h_constants_0.fuse_fs_getxattr$MH();
    }
    public static @C("int") int fuse_fs_getxattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable name, @C("char*") Addressable value, @C("size_t") long size, @C("uint32_t") int position) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_getxattr$MH().invokeExact(fs.address(), path.address(), name.address(), value.address(), size, position);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_listxattr$MH() {
        return fuse_h_constants_0.fuse_fs_listxattr$MH();
    }
    public static @C("int") int fuse_fs_listxattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable list, @C("size_t") long size) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_listxattr$MH().invokeExact(fs.address(), path.address(), list.address(), size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_removexattr$MH() {
        return fuse_h_constants_0.fuse_fs_removexattr$MH();
    }
    public static @C("int") int fuse_fs_removexattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable name) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_removexattr$MH().invokeExact(fs.address(), path.address(), name.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_bmap$MH() {
        return fuse_h_constants_0.fuse_fs_bmap$MH();
    }
    public static @C("int") int fuse_fs_bmap (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("size_t") long blocksize, @C("uint64_t*") Addressable idx) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_bmap$MH().invokeExact(fs.address(), path.address(), blocksize, idx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_ioctl$MH() {
        return fuse_h_constants_0.fuse_fs_ioctl$MH();
    }
    public static @C("int") int fuse_fs_ioctl (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("int") int cmd, @C("void*") Addressable arg, @C("struct fuse_file_info*") Addressable fi, @C("unsigned int") int flags, @C("void*") Addressable data) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_ioctl$MH().invokeExact(fs.address(), path.address(), cmd, arg.address(), fi.address(), flags, data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_poll$MH() {
        return fuse_h_constants_0.fuse_fs_poll$MH();
    }
    public static @C("int") int fuse_fs_poll (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi, @C("struct fuse_pollhandle*") Addressable ph, @C("unsigned int*") Addressable reventsp) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_poll$MH().invokeExact(fs.address(), path.address(), fi.address(), ph.address(), reventsp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_fallocate$MH() {
        return fuse_h_constants_0.fuse_fs_fallocate$MH();
    }
    public static @C("int") int fuse_fs_fallocate (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("int") int mode, @C("off_t") long offset, @C("off_t") long length, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_0.fuse_fs_fallocate$MH().invokeExact(fs.address(), path.address(), mode, offset, length, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_init$MH() {
        return fuse_h_constants_0.fuse_fs_init$MH();
    }
    public static void fuse_fs_init (@C("struct fuse_fs*") Addressable fs, @C("struct fuse_conn_info*") Addressable conn) {
        try {
            fuse_h_constants_0.fuse_fs_init$MH().invokeExact(fs.address(), conn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_destroy$MH() {
        return fuse_h_constants_0.fuse_fs_destroy$MH();
    }
    public static void fuse_fs_destroy (@C("struct fuse_fs*") Addressable fs) {
        try {
            fuse_h_constants_0.fuse_fs_destroy$MH().invokeExact(fs.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_notify_poll$MH() {
        return fuse_h_constants_0.fuse_notify_poll$MH();
    }
    public static @C("int") int fuse_notify_poll (@C("struct fuse_pollhandle*") Addressable ph) {
        try {
            return (int)fuse_h_constants_0.fuse_notify_poll$MH().invokeExact(ph.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_new$MH() {
        return fuse_h_constants_0.fuse_fs_new$MH();
    }
    public static @C("struct fuse_fs*") MemoryAddress fuse_fs_new (@C("struct fuse_operations*") Addressable op, @C("size_t") long op_size, @C("void*") Addressable user_data) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_fs_new$MH().invokeExact(op.address(), op_size, user_data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    @C("struct fuse_module")public static class fuse_module {

        /* package-private */ fuse_module() {}
        public static MemoryLayout $LAYOUT() {
            return fuse_h_constants_0.fuse_module$struct$LAYOUT();
        }
        public static VarHandle name$VH() {
            return fuse_h_constants_0.fuse_module$name$VH();
        }
        public static  @C("char*") MemoryAddress name$get(@C("struct fuse_module") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_module$name$VH().get(seg);
        }
        public static  @C("char*") MemoryAddress name$get(@C("struct fuse_module") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_module$name$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void name$set(@C("struct fuse_module") MemorySegment seg, @C("char*") MemoryAddress x) {
            fuse_h_constants_0.fuse_module$name$VH().set(seg, x);
        }
        public static void name$set(@C("struct fuse_module") MemorySegment seg, long index, @C("char*") MemoryAddress x) {
            fuse_h_constants_0.fuse_module$name$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static interface factory {

            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
            public static  @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemorySegment allocate(factory fi) {
                return RuntimeHelper.upcallStub(factory.class, fi, fuse_h_constants_0.factory$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
            }
            public static  @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemorySegment allocate(factory fi, NativeScope scope) {
                return allocate(fi).handoff(scope);
            }
        }

        public static VarHandle factory$VH() {
            return fuse_h_constants_0.fuse_module$factory$VH();
        }
        public static  @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemoryAddress factory$get(@C("struct fuse_module") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_module$factory$VH().get(seg);
        }
        public static  @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemoryAddress factory$get(@C("struct fuse_module") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_module$factory$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void factory$set(@C("struct fuse_module") MemorySegment seg, @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemoryAddress x) {
            fuse_h_constants_0.fuse_module$factory$VH().set(seg, x);
        }
        public static void factory$set(@C("struct fuse_module") MemorySegment seg, long index, @C("struct fuse_fs*(*)(struct fuse_args*,struct fuse_fs**)") MemoryAddress x) {
            fuse_h_constants_0.fuse_module$factory$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle next$VH() {
            return fuse_h_constants_0.fuse_module$next$VH();
        }
        public static  @C("struct fuse_module*") MemoryAddress next$get(@C("struct fuse_module") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_module$next$VH().get(seg);
        }
        public static  @C("struct fuse_module*") MemoryAddress next$get(@C("struct fuse_module") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_0.fuse_module$next$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void next$set(@C("struct fuse_module") MemorySegment seg, @C("struct fuse_module*") MemoryAddress x) {
            fuse_h_constants_0.fuse_module$next$VH().set(seg, x);
        }
        public static void next$set(@C("struct fuse_module") MemorySegment seg, long index, @C("struct fuse_module*") MemoryAddress x) {
            fuse_h_constants_0.fuse_module$next$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle so$VH() {
            return fuse_h_constants_1.fuse_module$so$VH();
        }
        public static  @C("struct fusemod_so*") MemoryAddress so$get(@C("struct fuse_module") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fuse_module$so$VH().get(seg);
        }
        public static  @C("struct fusemod_so*") MemoryAddress so$get(@C("struct fuse_module") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fuse_module$so$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void so$set(@C("struct fuse_module") MemorySegment seg, @C("struct fusemod_so*") MemoryAddress x) {
            fuse_h_constants_1.fuse_module$so$VH().set(seg, x);
        }
        public static void so$set(@C("struct fuse_module") MemorySegment seg, long index, @C("struct fusemod_so*") MemoryAddress x) {
            fuse_h_constants_1.fuse_module$so$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ctr$VH() {
            return fuse_h_constants_1.fuse_module$ctr$VH();
        }
        public static  @C("int") int ctr$get(@C("struct fuse_module") MemorySegment seg) {
            return (int)fuse_h_constants_1.fuse_module$ctr$VH().get(seg);
        }
        public static  @C("int") int ctr$get(@C("struct fuse_module") MemorySegment seg, long index) {
            return (int)fuse_h_constants_1.fuse_module$ctr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ctr$set(@C("struct fuse_module") MemorySegment seg, @C("int") int x) {
            fuse_h_constants_1.fuse_module$ctr$VH().set(seg, x);
        }
        public static void ctr$set(@C("struct fuse_module") MemorySegment seg, long index, @C("int") int x) {
            fuse_h_constants_1.fuse_module$ctr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct fuse_module") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct fuse_module") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct fuse_module[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct fuse_module[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct fuse_module*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct fuse_module*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct fuse_module") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle fuse_register_module$MH() {
        return fuse_h_constants_1.fuse_register_module$MH();
    }
    public static void fuse_register_module (@C("struct fuse_module*") Addressable mod) {
        try {
            fuse_h_constants_1.fuse_register_module$MH().invokeExact(mod.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_setup$MH() {
        return fuse_h_constants_1.fuse_setup$MH();
    }
    public static @C("struct fuse*") MemoryAddress fuse_setup (@C("int") int argc, @C("char*[]") Addressable argv, @C("struct fuse_operations*") Addressable op, @C("size_t") long op_size, @C("char**") Addressable mountpoint, @C("int*") Addressable multithreaded, @C("void*") Addressable user_data) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fuse_setup$MH().invokeExact(argc, argv.address(), op.address(), op_size, mountpoint.address(), multithreaded.address(), user_data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_teardown$MH() {
        return fuse_h_constants_1.fuse_teardown$MH();
    }
    public static void fuse_teardown (@C("struct fuse*") Addressable fuse, @C("char*") Addressable mountpoint) {
        try {
            fuse_h_constants_1.fuse_teardown$MH().invokeExact(fuse.address(), mountpoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_read_cmd$MH() {
        return fuse_h_constants_1.fuse_read_cmd$MH();
    }
    public static @C("struct fuse_cmd*") MemoryAddress fuse_read_cmd (@C("struct fuse*") Addressable f) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fuse_read_cmd$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_process_cmd$MH() {
        return fuse_h_constants_1.fuse_process_cmd$MH();
    }
    public static void fuse_process_cmd (@C("struct fuse*") Addressable f, @C("struct fuse_cmd*") Addressable cmd) {
        try {
            fuse_h_constants_1.fuse_process_cmd$MH().invokeExact(f.address(), cmd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_loop_mt_proc$MH() {
        return fuse_h_constants_1.fuse_loop_mt_proc$MH();
    }
    public static interface fuse_loop_mt_proc$proc {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  @C("fuse_processor_t") MemorySegment allocate(fuse_loop_mt_proc$proc fi) {
            return RuntimeHelper.upcallStub(fuse_loop_mt_proc$proc.class, fi, fuse_h_constants_1.fuse_loop_mt_proc$proc$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("fuse_processor_t") MemorySegment allocate(fuse_loop_mt_proc$proc fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static @C("int") int fuse_loop_mt_proc (@C("struct fuse*") Addressable f, @C("fuse_processor_t") Addressable proc, @C("void*") Addressable data) {
        try {
            return (int)fuse_h_constants_1.fuse_loop_mt_proc$MH().invokeExact(f.address(), proc.address(), data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_exited$MH() {
        return fuse_h_constants_1.fuse_exited$MH();
    }
    public static @C("int") int fuse_exited (@C("struct fuse*") Addressable f) {
        try {
            return (int)fuse_h_constants_1.fuse_exited$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_set_getcontext_func$MH() {
        return fuse_h_constants_1.fuse_set_getcontext_func$MH();
    }
    public static interface fuse_set_getcontext_func$func {

        jdk.incubator.foreign.MemoryAddress apply();
        public static  @C("struct fuse_context*(*)()") MemorySegment allocate(fuse_set_getcontext_func$func fi) {
            return RuntimeHelper.upcallStub(fuse_set_getcontext_func$func.class, fi, fuse_h_constants_1.fuse_set_getcontext_func$func$FUNC(), "()Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  @C("struct fuse_context*(*)()") MemorySegment allocate(fuse_set_getcontext_func$func fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static void fuse_set_getcontext_func (@C("struct fuse_context*(*)()") Addressable func) {
        try {
            fuse_h_constants_1.fuse_set_getcontext_func$MH().invokeExact(func.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_get_session$MH() {
        return fuse_h_constants_1.fuse_get_session$MH();
    }
    public static @C("struct fuse_session*") MemoryAddress fuse_get_session (@C("struct fuse*") Addressable f) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fuse_get_session$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int FUSE_VERSION() {
        return fuse_h_constants_1.FUSE_VERSION();
    }
    public static @C("int") int ACCESSPERMS() {
        return fuse_h_constants_1.ACCESSPERMS();
    }
    public static @C("int") int ALLPERMS() {
        return fuse_h_constants_1.ALLPERMS();
    }
    public static @C("int") int DEFFILEMODE() {
        return fuse_h_constants_1.DEFFILEMODE();
    }
    public static @C("unsigned int") int SF_SYNTHETIC() {
        return fuse_h_constants_1.SF_SYNTHETIC();
    }
    public static @C("int") int UTIME_NOW() {
        return fuse_h_constants_1.UTIME_NOW();
    }
    public static @C("int") int UTIME_OMIT() {
        return fuse_h_constants_1.UTIME_OMIT();
    }
    public static @C("int") int FUSE_CAP_ASYNC_READ() {
        return fuse_h_constants_1.FUSE_CAP_ASYNC_READ();
    }
    public static @C("int") int FUSE_CAP_POSIX_LOCKS() {
        return fuse_h_constants_1.FUSE_CAP_POSIX_LOCKS();
    }
    public static @C("int") int FUSE_CAP_ATOMIC_O_TRUNC() {
        return fuse_h_constants_1.FUSE_CAP_ATOMIC_O_TRUNC();
    }
    public static @C("int") int FUSE_CAP_EXPORT_SUPPORT() {
        return fuse_h_constants_1.FUSE_CAP_EXPORT_SUPPORT();
    }
    public static @C("int") int FUSE_CAP_BIG_WRITES() {
        return fuse_h_constants_1.FUSE_CAP_BIG_WRITES();
    }
    public static @C("int") int FUSE_CAP_DONT_MASK() {
        return fuse_h_constants_1.FUSE_CAP_DONT_MASK();
    }
    public static @C("int") int FUSE_CAP_SPLICE_WRITE() {
        return fuse_h_constants_1.FUSE_CAP_SPLICE_WRITE();
    }
    public static @C("int") int FUSE_CAP_SPLICE_MOVE() {
        return fuse_h_constants_1.FUSE_CAP_SPLICE_MOVE();
    }
    public static @C("int") int FUSE_CAP_SPLICE_READ() {
        return fuse_h_constants_1.FUSE_CAP_SPLICE_READ();
    }
    public static @C("int") int FUSE_CAP_FLOCK_LOCKS() {
        return fuse_h_constants_1.FUSE_CAP_FLOCK_LOCKS();
    }
    public static @C("int") int FUSE_CAP_IOCTL_DIR() {
        return fuse_h_constants_1.FUSE_CAP_IOCTL_DIR();
    }
    public static @C("int") int FUSE_CAP_RENAME_SWAP() {
        return fuse_h_constants_1.FUSE_CAP_RENAME_SWAP();
    }
    public static @C("int") int FUSE_CAP_RENAME_EXCL() {
        return fuse_h_constants_1.FUSE_CAP_RENAME_EXCL();
    }
    public static @C("int") int FUSE_CAP_ALLOCATE() {
        return fuse_h_constants_1.FUSE_CAP_ALLOCATE();
    }
    public static @C("int") int FUSE_CAP_EXCHANGE_DATA() {
        return fuse_h_constants_1.FUSE_CAP_EXCHANGE_DATA();
    }
    public static @C("int") int FUSE_CAP_CASE_INSENSITIVE() {
        return fuse_h_constants_1.FUSE_CAP_CASE_INSENSITIVE();
    }
    public static @C("int") int FUSE_CAP_VOL_RENAME() {
        return fuse_h_constants_1.FUSE_CAP_VOL_RENAME();
    }
    public static @C("int") int FUSE_CAP_XTIMES() {
        return fuse_h_constants_1.FUSE_CAP_XTIMES();
    }
    public static @C("int") int FUSE_IOCTL_COMPAT() {
        return fuse_h_constants_1.FUSE_IOCTL_COMPAT();
    }
    public static @C("int") int FUSE_IOCTL_UNRESTRICTED() {
        return fuse_h_constants_1.FUSE_IOCTL_UNRESTRICTED();
    }
    public static @C("int") int FUSE_IOCTL_RETRY() {
        return fuse_h_constants_1.FUSE_IOCTL_RETRY();
    }
    public static @C("int") int FUSE_IOCTL_DIR() {
        return fuse_h_constants_1.FUSE_IOCTL_DIR();
    }
}


