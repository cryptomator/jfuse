// Generated by jextract

package de.skymatic.fusepanama.macfuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class fuse_h_0 {

    /* package-private */ fuse_h_0() {}
    public static @C("int") ValueLayout __darwin_wchar_t = C_INT;
    public static @C("int") ValueLayout __darwin_rune_t = C_INT;
    public static @C("int") ValueLayout __darwin_wint_t = C_INT;
    public static @C("long") ValueLayout __darwin_ssize_t = C_LONG;
    public static @C("long") ValueLayout __darwin_time_t = C_LONG;
    public static @C("long long") ValueLayout __darwin_blkcnt_t = C_LONG_LONG;
    public static @C("int") ValueLayout __darwin_blksize_t = C_INT;
    public static @C("int") ValueLayout __darwin_dev_t = C_INT;
    public static @C("long long") ValueLayout __darwin_off_t = C_LONG_LONG;
    public static @C("int") ValueLayout __darwin_pid_t = C_INT;
    public static @C("int") ValueLayout __darwin_suseconds_t = C_INT;
    public static @C("long long") ValueLayout register_t = C_LONG_LONG;
    public static @C("long long") ValueLayout user_ssize_t = C_LONG_LONG;
    public static @C("long long") ValueLayout user_long_t = C_LONG_LONG;
    public static @C("long long") ValueLayout user_time_t = C_LONG_LONG;
    public static @C("long long") ValueLayout user_off_t = C_LONG_LONG;
    public static @C("long") ValueLayout intptr_t = C_LONG;
    public static @C("long") ValueLayout intmax_t = C_LONG;
    public static  MethodHandle _OSSwapInt16$MH() {
        return fuse_h_constants_1._OSSwapInt16$MH();
    }
    public static @C("__uint16_t") short _OSSwapInt16 (@C("__uint16_t") short _data) {
        try {
            return (short)fuse_h_constants_1._OSSwapInt16$MH().invokeExact(_data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _OSSwapInt32$MH() {
        return fuse_h_constants_1._OSSwapInt32$MH();
    }
    public static @C("__uint32_t") int _OSSwapInt32 (@C("__uint32_t") int _data) {
        try {
            return (int)fuse_h_constants_1._OSSwapInt32$MH().invokeExact(_data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _OSSwapInt64$MH() {
        return fuse_h_constants_1._OSSwapInt64$MH();
    }
    public static @C("__uint64_t") long _OSSwapInt64 (@C("__uint64_t") long _data) {
        try {
            return (long)fuse_h_constants_1._OSSwapInt64$MH().invokeExact(_data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("long long") ValueLayout quad_t = C_LONG_LONG;
    public static @C("int") ValueLayout daddr_t = C_INT;
    public static @C("int") ValueLayout dev_t = C_INT;
    public static @C("long long") ValueLayout blkcnt_t = C_LONG_LONG;
    public static @C("int") ValueLayout blksize_t = C_INT;
    public static @C("int") ValueLayout key_t = C_INT;
    public static @C("int") ValueLayout pid_t = C_INT;
    public static @C("long long") ValueLayout off_t = C_LONG_LONG;
    public static @C("int") ValueLayout segsz_t = C_INT;
    public static @C("int") ValueLayout swblk_t = C_INT;
    public static @C("long") ValueLayout ssize_t = C_LONG;
    public static @C("long") ValueLayout time_t = C_LONG;
    public static @C("int") ValueLayout suseconds_t = C_INT;
    public static @C("int") ValueLayout errno_t = C_INT;
    public static  MethodHandle __darwin_check_fd_set_overflow$MH() {
        return fuse_h_constants_1.__darwin_check_fd_set_overflow$MH();
    }
    public static @C("int") int __darwin_check_fd_set_overflow (@C("int") int x0, @C("void*") Addressable x1, @C("int") int x2) {
        try {
            return (int)fuse_h_constants_1.__darwin_check_fd_set_overflow$MH().invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __darwin_check_fd_set$MH() {
        return fuse_h_constants_1.__darwin_check_fd_set$MH();
    }
    public static @C("int") int __darwin_check_fd_set (@C("int") int _a, @C("void*") Addressable _b) {
        try {
            return (int)fuse_h_constants_1.__darwin_check_fd_set$MH().invokeExact(_a, _b.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __darwin_fd_isset$MH() {
        return fuse_h_constants_1.__darwin_fd_isset$MH();
    }
    public static @C("int") int __darwin_fd_isset (@C("int") int _fd, @C("struct fd_set*") Addressable _p) {
        try {
            return (int)fuse_h_constants_1.__darwin_fd_isset$MH().invokeExact(_fd, _p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __darwin_fd_set$MH() {
        return fuse_h_constants_1.__darwin_fd_set$MH();
    }
    public static void __darwin_fd_set (@C("int") int _fd, @C("struct fd_set*") Addressable _p) {
        try {
            fuse_h_constants_1.__darwin_fd_set$MH().invokeExact(_fd, _p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __darwin_fd_clr$MH() {
        return fuse_h_constants_1.__darwin_fd_clr$MH();
    }
    public static void __darwin_fd_clr (@C("int") int _fd, @C("struct fd_set*") Addressable _p) {
        try {
            fuse_h_constants_1.__darwin_fd_clr$MH().invokeExact(_fd, _p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") ValueLayout fd_mask = C_INT;
    public static  MethodHandle chmod$MH() {
        return fuse_h_constants_1.chmod$MH();
    }
    public static @C("int") int chmod (@C("char*") Addressable x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_1.chmod$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fchmod$MH() {
        return fuse_h_constants_1.fchmod$MH();
    }
    public static @C("int") int fchmod (@C("int") int x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_1.fchmod$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstat$MH() {
        return fuse_h_constants_1.fstat$MH();
    }
    public static @C("int") int fstat (@C("int") int x0, @C("struct stat*") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.fstat$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstat$MH() {
        return fuse_h_constants_1.lstat$MH();
    }
    public static @C("int") int lstat (@C("char*") Addressable x0, @C("struct stat*") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.lstat$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mkdir$MH() {
        return fuse_h_constants_1.mkdir$MH();
    }
    public static @C("int") int mkdir (@C("char*") Addressable x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_1.mkdir$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mkfifo$MH() {
        return fuse_h_constants_1.mkfifo$MH();
    }
    public static @C("int") int mkfifo (@C("char*") Addressable x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_1.mkfifo$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle stat$MH() {
        return fuse_h_constants_1.stat$MH();
    }
    public static @C("int") int stat (@C("char*") Addressable x0, @C("struct stat*") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.stat$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mknod$MH() {
        return fuse_h_constants_1.mknod$MH();
    }
    public static @C("int") int mknod (@C("char*") Addressable x0, @C("mode_t") short x1, @C("dev_t") int x2) {
        try {
            return (int)fuse_h_constants_1.mknod$MH().invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle umask$MH() {
        return fuse_h_constants_1.umask$MH();
    }
    public static @C("mode_t") short umask (@C("mode_t") short x0) {
        try {
            return (short)fuse_h_constants_1.umask$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fchmodat$MH() {
        return fuse_h_constants_1.fchmodat$MH();
    }
    public static @C("int") int fchmodat (@C("int") int x0, @C("char*") Addressable x1, @C("mode_t") short x2, @C("int") int x3) {
        try {
            return (int)fuse_h_constants_1.fchmodat$MH().invokeExact(x0, x1.address(), x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstatat$MH() {
        return fuse_h_constants_1.fstatat$MH();
    }
    public static @C("int") int fstatat (@C("int") int x0, @C("char*") Addressable x1, @C("struct stat*") Addressable x2, @C("int") int x3) {
        try {
            return (int)fuse_h_constants_1.fstatat$MH().invokeExact(x0, x1.address(), x2.address(), x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mkdirat$MH() {
        return fuse_h_constants_1.mkdirat$MH();
    }
    public static @C("int") int mkdirat (@C("int") int x0, @C("char*") Addressable x1, @C("mode_t") short x2) {
        try {
            return (int)fuse_h_constants_1.mkdirat$MH().invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle futimens$MH() {
        return fuse_h_constants_1.futimens$MH();
    }
    public static @C("int") int futimens (@C("int") int __fd, @C("struct timespec[]") Addressable __times) {
        try {
            return (int)fuse_h_constants_1.futimens$MH().invokeExact(__fd, __times.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle utimensat$MH() {
        return fuse_h_constants_1.utimensat$MH();
    }
    public static @C("int") int utimensat (@C("int") int __fd, @C("char*") Addressable __path, @C("struct timespec[]") Addressable __times, @C("int") int __flag) {
        try {
            return (int)fuse_h_constants_1.utimensat$MH().invokeExact(__fd, __path.address(), __times.address(), __flag);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle chflags$MH() {
        return fuse_h_constants_1.chflags$MH();
    }
    public static @C("int") int chflags (@C("char*") Addressable x0, @C("__uint32_t") int x1) {
        try {
            return (int)fuse_h_constants_1.chflags$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle chmodx_np$MH() {
        return fuse_h_constants_1.chmodx_np$MH();
    }
    public static @C("int") int chmodx_np (@C("char*") Addressable x0, @C("filesec_t") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.chmodx_np$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fchflags$MH() {
        return fuse_h_constants_1.fchflags$MH();
    }
    public static @C("int") int fchflags (@C("int") int x0, @C("__uint32_t") int x1) {
        try {
            return (int)fuse_h_constants_1.fchflags$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fchmodx_np$MH() {
        return fuse_h_constants_1.fchmodx_np$MH();
    }
    public static @C("int") int fchmodx_np (@C("int") int x0, @C("filesec_t") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.fchmodx_np$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstatx_np$MH() {
        return fuse_h_constants_1.fstatx_np$MH();
    }
    public static @C("int") int fstatx_np (@C("int") int x0, @C("struct stat*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_1.fstatx_np$MH().invokeExact(x0, x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lchflags$MH() {
        return fuse_h_constants_1.lchflags$MH();
    }
    public static @C("int") int lchflags (@C("char*") Addressable x0, @C("__uint32_t") int x1) {
        try {
            return (int)fuse_h_constants_1.lchflags$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lchmod$MH() {
        return fuse_h_constants_1.lchmod$MH();
    }
    public static @C("int") int lchmod (@C("char*") Addressable x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_1.lchmod$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstatx_np$MH() {
        return fuse_h_constants_1.lstatx_np$MH();
    }
    public static @C("int") int lstatx_np (@C("char*") Addressable x0, @C("struct stat*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_1.lstatx_np$MH().invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mkdirx_np$MH() {
        return fuse_h_constants_1.mkdirx_np$MH();
    }
    public static @C("int") int mkdirx_np (@C("char*") Addressable x0, @C("filesec_t") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.mkdirx_np$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mkfifox_np$MH() {
        return fuse_h_constants_1.mkfifox_np$MH();
    }
    public static @C("int") int mkfifox_np (@C("char*") Addressable x0, @C("filesec_t") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.mkfifox_np$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle statx_np$MH() {
        return fuse_h_constants_1.statx_np$MH();
    }
    public static @C("int") int statx_np (@C("char*") Addressable x0, @C("struct stat*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_1.statx_np$MH().invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle umaskx_np$MH() {
        return fuse_h_constants_1.umaskx_np$MH();
    }
    public static @C("int") int umaskx_np (@C("filesec_t") Addressable x0) {
        try {
            return (int)fuse_h_constants_1.umaskx_np$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstatx64_np$MH() {
        return fuse_h_constants_1.fstatx64_np$MH();
    }
    public static @C("int") int fstatx64_np (@C("int") int x0, @C("struct stat64*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_1.fstatx64_np$MH().invokeExact(x0, x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstatx64_np$MH() {
        return fuse_h_constants_1.lstatx64_np$MH();
    }
    public static @C("int") int lstatx64_np (@C("char*") Addressable x0, @C("struct stat64*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_1.lstatx64_np$MH().invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle statx64_np$MH() {
        return fuse_h_constants_1.statx64_np$MH();
    }
    public static @C("int") int statx64_np (@C("char*") Addressable x0, @C("struct stat64*") Addressable x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_1.statx64_np$MH().invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstat64$MH() {
        return fuse_h_constants_1.fstat64$MH();
    }
    public static @C("int") int fstat64 (@C("int") int x0, @C("struct stat64*") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.fstat64$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstat64$MH() {
        return fuse_h_constants_1.lstat64$MH();
    }
    public static @C("int") int lstat64 (@C("char*") Addressable x0, @C("struct stat64*") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.lstat64$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle stat64$MH() {
        return fuse_h_constants_1.stat64$MH();
    }
    public static @C("int") int stat64 (@C("char*") Addressable x0, @C("struct stat64*") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.stat64$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_mount$MH() {
        return fuse_h_constants_1.fuse_mount$MH();
    }
    public static @C("struct fuse_chan*") MemoryAddress fuse_mount (@C("char*") Addressable mountpoint, @C("struct fuse_args*") Addressable args) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.fuse_mount$MH().invokeExact(mountpoint.address(), args.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_unmount$MH() {
        return fuse_h_constants_1.fuse_unmount$MH();
    }
    public static void fuse_unmount (@C("char*") Addressable mountpoint, @C("struct fuse_chan*") Addressable ch) {
        try {
            fuse_h_constants_1.fuse_unmount$MH().invokeExact(mountpoint.address(), ch.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_parse_cmdline$MH() {
        return fuse_h_constants_1.fuse_parse_cmdline$MH();
    }
    public static @C("int") int fuse_parse_cmdline (@C("struct fuse_args*") Addressable args, @C("char**") Addressable mountpoint, @C("int*") Addressable multithreaded, @C("int*") Addressable foreground) {
        try {
            return (int)fuse_h_constants_1.fuse_parse_cmdline$MH().invokeExact(args.address(), mountpoint.address(), multithreaded.address(), foreground.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_daemonize$MH() {
        return fuse_h_constants_1.fuse_daemonize$MH();
    }
    public static @C("int") int fuse_daemonize (@C("int") int foreground) {
        try {
            return (int)fuse_h_constants_1.fuse_daemonize$MH().invokeExact(foreground);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_version$MH() {
        return fuse_h_constants_1.fuse_version$MH();
    }
    public static @C("int") int fuse_version () {
        try {
            return (int)fuse_h_constants_1.fuse_version$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_pollhandle_destroy$MH() {
        return fuse_h_constants_1.fuse_pollhandle_destroy$MH();
    }
    public static void fuse_pollhandle_destroy (@C("struct fuse_pollhandle*") Addressable ph) {
        try {
            fuse_h_constants_1.fuse_pollhandle_destroy$MH().invokeExact(ph.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int FUSE_BUF_IS_FD() {
        return fuse_h_constants_1.FUSE_BUF_IS_FD();
    }
    public static @C("int") int FUSE_BUF_FD_SEEK() {
        return fuse_h_constants_1.FUSE_BUF_FD_SEEK();
    }
    public static @C("int") int FUSE_BUF_FD_RETRY() {
        return fuse_h_constants_1.FUSE_BUF_FD_RETRY();
    }
    public static @C("int") int FUSE_BUF_NO_SPLICE() {
        return fuse_h_constants_1.FUSE_BUF_NO_SPLICE();
    }
    public static @C("int") int FUSE_BUF_FORCE_SPLICE() {
        return fuse_h_constants_1.FUSE_BUF_FORCE_SPLICE();
    }
    public static @C("int") int FUSE_BUF_SPLICE_MOVE() {
        return fuse_h_constants_1.FUSE_BUF_SPLICE_MOVE();
    }
    public static @C("int") int FUSE_BUF_SPLICE_NONBLOCK() {
        return fuse_h_constants_1.FUSE_BUF_SPLICE_NONBLOCK();
    }
    public static  MethodHandle fuse_buf_size$MH() {
        return fuse_h_constants_1.fuse_buf_size$MH();
    }
    public static @C("size_t") long fuse_buf_size (@C("struct fuse_bufvec*") Addressable bufv) {
        try {
            return (long)fuse_h_constants_1.fuse_buf_size$MH().invokeExact(bufv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_buf_copy$MH() {
        return fuse_h_constants_1.fuse_buf_copy$MH();
    }
    public static @C("ssize_t") long fuse_buf_copy (@C("struct fuse_bufvec*") Addressable dst, @C("struct fuse_bufvec*") Addressable src, @C("enum fuse_buf_copy_flags") int flags) {
        try {
            return (long)fuse_h_constants_1.fuse_buf_copy$MH().invokeExact(dst.address(), src.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_set_signal_handlers$MH() {
        return fuse_h_constants_1.fuse_set_signal_handlers$MH();
    }
    public static @C("int") int fuse_set_signal_handlers (@C("struct fuse_session*") Addressable se) {
        try {
            return (int)fuse_h_constants_1.fuse_set_signal_handlers$MH().invokeExact(se.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_remove_signal_handlers$MH() {
        return fuse_h_constants_1.fuse_remove_signal_handlers$MH();
    }
    public static void fuse_remove_signal_handlers (@C("struct fuse_session*") Addressable se) {
        try {
            fuse_h_constants_1.fuse_remove_signal_handlers$MH().invokeExact(se.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int FILESEC_OWNER() {
        return fuse_h_constants_1.FILESEC_OWNER();
    }
    public static @C("int") int FILESEC_GROUP() {
        return fuse_h_constants_1.FILESEC_GROUP();
    }
    public static @C("int") int FILESEC_UUID() {
        return fuse_h_constants_1.FILESEC_UUID();
    }
    public static @C("int") int FILESEC_MODE() {
        return fuse_h_constants_1.FILESEC_MODE();
    }
    public static @C("int") int FILESEC_ACL() {
        return fuse_h_constants_1.FILESEC_ACL();
    }
    public static @C("int") int FILESEC_GRPUUID() {
        return fuse_h_constants_1.FILESEC_GRPUUID();
    }
    public static @C("int") int FILESEC_ACL_RAW() {
        return fuse_h_constants_1.FILESEC_ACL_RAW();
    }
    public static @C("int") int FILESEC_ACL_ALLOCSIZE() {
        return fuse_h_constants_1.FILESEC_ACL_ALLOCSIZE();
    }
    public static  MethodHandle open$MH() {
        return fuse_h_constants_1.open$MH();
    }
    public static @C("int") int open (@C("char*") Addressable x0, @C("int") int x1, Object... x2) {
        try {
            return (int)fuse_h_constants_1.open$MH().invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle openat$MH() {
        return fuse_h_constants_1.openat$MH();
    }
    public static @C("int") int openat (@C("int") int x0, @C("char*") Addressable x1, @C("int") int x2, Object... x3) {
        try {
            return (int)fuse_h_constants_1.openat$MH().invokeExact(x0, x1.address(), x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle creat$MH() {
        return fuse_h_constants_1.creat$MH();
    }
    public static @C("int") int creat (@C("char*") Addressable x0, @C("mode_t") short x1) {
        try {
            return (int)fuse_h_constants_1.creat$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fcntl$MH() {
        return fuse_h_constants_1.fcntl$MH();
    }
    public static @C("int") int fcntl (@C("int") int x0, @C("int") int x1, Object... x2) {
        try {
            return (int)fuse_h_constants_1.fcntl$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle openx_np$MH() {
        return fuse_h_constants_1.openx_np$MH();
    }
    public static @C("int") int openx_np (@C("char*") Addressable x0, @C("int") int x1, @C("filesec_t") Addressable x2) {
        try {
            return (int)fuse_h_constants_1.openx_np$MH().invokeExact(x0.address(), x1, x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle open_dprotected_np$MH() {
        return fuse_h_constants_1.open_dprotected_np$MH();
    }
    public static @C("int") int open_dprotected_np (@C("char*") Addressable x0, @C("int") int x1, @C("int") int x2, @C("int") int x3, Object... x4) {
        try {
            return (int)fuse_h_constants_1.open_dprotected_np$MH().invokeExact(x0.address(), x1, x2, x3, x4);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle flock$MH() {
        return fuse_h_constants_1.flock$MH();
    }
    public static @C("int") int flock (@C("int") int x0, @C("int") int x1) {
        try {
            return (int)fuse_h_constants_1.flock$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle filesec_init$MH() {
        return fuse_h_constants_1.filesec_init$MH();
    }
    public static @C("filesec_t") MemoryAddress filesec_init () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.filesec_init$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle filesec_dup$MH() {
        return fuse_h_constants_1.filesec_dup$MH();
    }
    public static @C("filesec_t") MemoryAddress filesec_dup (@C("filesec_t") Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.filesec_dup$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle filesec_free$MH() {
        return fuse_h_constants_1.filesec_free$MH();
    }
    public static void filesec_free (@C("filesec_t") Addressable x0) {
        try {
            fuse_h_constants_1.filesec_free$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle filesec_get_property$MH() {
        return fuse_h_constants_1.filesec_get_property$MH();
    }
    public static @C("int") int filesec_get_property (@C("filesec_t") Addressable x0, @C("filesec_property_t") int x1, @C("void*") Addressable x2) {
        try {
            return (int)fuse_h_constants_1.filesec_get_property$MH().invokeExact(x0.address(), x1, x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle filesec_query_property$MH() {
        return fuse_h_constants_1.filesec_query_property$MH();
    }
    public static @C("int") int filesec_query_property (@C("filesec_t") Addressable x0, @C("filesec_property_t") int x1, @C("int*") Addressable x2) {
        try {
            return (int)fuse_h_constants_1.filesec_query_property$MH().invokeExact(x0.address(), x1, x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle filesec_set_property$MH() {
        return fuse_h_constants_1.filesec_set_property$MH();
    }
    public static @C("int") int filesec_set_property (@C("filesec_t") Addressable x0, @C("filesec_property_t") int x1, @C("void*") Addressable x2) {
        try {
            return (int)fuse_h_constants_1.filesec_set_property$MH().invokeExact(x0.address(), x1, x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle filesec_unset_property$MH() {
        return fuse_h_constants_1.filesec_unset_property$MH();
    }
    public static @C("int") int filesec_unset_property (@C("filesec_t") Addressable x0, @C("filesec_property_t") int x1) {
        try {
            return (int)fuse_h_constants_1.filesec_unset_property$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") ValueLayout __darwin_nl_item = C_INT;
    public static @C("int") ValueLayout __darwin_wctrans_t = C_INT;
    public static  MemoryLayout getdate_err$LAYOUT() {
        return fuse_h_constants_1.getdate_err$LAYOUT();
    }
    public static  VarHandle getdate_err$VH() {
        return fuse_h_constants_1.getdate_err$VH();
    }
    public static  MemorySegment getdate_err$SEGMENT() {
        return fuse_h_constants_1.getdate_err$SEGMENT();
    }
    public static @C("int") int getdate_err$get() {
        return (int)fuse_h_constants_1.getdate_err$VH().get(fuse_h_constants_1.getdate_err$SEGMENT());
    }
    public static void getdate_err$set(@C("int") int x) {
        fuse_h_constants_1.getdate_err$VH().set(fuse_h_constants_1.getdate_err$SEGMENT(), x);
    }
    public static  MemoryLayout timezone$LAYOUT() {
        return fuse_h_constants_1.timezone$LAYOUT();
    }
    public static  VarHandle timezone$VH() {
        return fuse_h_constants_1.timezone$VH();
    }
    public static  MemorySegment timezone$SEGMENT() {
        return fuse_h_constants_1.timezone$SEGMENT();
    }
    public static @C("long") long timezone$get() {
        return (long)fuse_h_constants_1.timezone$VH().get(fuse_h_constants_1.timezone$SEGMENT());
    }
    public static void timezone$set(@C("long") long x) {
        fuse_h_constants_1.timezone$VH().set(fuse_h_constants_1.timezone$SEGMENT(), x);
    }
    public static  MemoryLayout daylight$LAYOUT() {
        return fuse_h_constants_1.daylight$LAYOUT();
    }
    public static  VarHandle daylight$VH() {
        return fuse_h_constants_1.daylight$VH();
    }
    public static  MemorySegment daylight$SEGMENT() {
        return fuse_h_constants_1.daylight$SEGMENT();
    }
    public static @C("int") int daylight$get() {
        return (int)fuse_h_constants_1.daylight$VH().get(fuse_h_constants_1.daylight$SEGMENT());
    }
    public static void daylight$set(@C("int") int x) {
        fuse_h_constants_1.daylight$VH().set(fuse_h_constants_1.daylight$SEGMENT(), x);
    }
    public static  MethodHandle asctime$MH() {
        return fuse_h_constants_1.asctime$MH();
    }
    public static @C("char*") MemoryAddress asctime (@C("struct tm*") Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.asctime$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle clock$MH() {
        return fuse_h_constants_1.clock$MH();
    }
    public static @C("clock_t") long clock () {
        try {
            return (long)fuse_h_constants_1.clock$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ctime$MH() {
        return fuse_h_constants_1.ctime$MH();
    }
    public static @C("char*") MemoryAddress ctime (@C("const time_t*") Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.ctime$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle difftime$MH() {
        return fuse_h_constants_1.difftime$MH();
    }
    public static @C("double") double difftime (@C("time_t") long x0, @C("time_t") long x1) {
        try {
            return (double)fuse_h_constants_1.difftime$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getdate$MH() {
        return fuse_h_constants_1.getdate$MH();
    }
    public static @C("struct tm*") MemoryAddress getdate (@C("char*") Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.getdate$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle gmtime$MH() {
        return fuse_h_constants_1.gmtime$MH();
    }
    public static @C("struct tm*") MemoryAddress gmtime (@C("const time_t*") Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.gmtime$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle localtime$MH() {
        return fuse_h_constants_1.localtime$MH();
    }
    public static @C("struct tm*") MemoryAddress localtime (@C("const time_t*") Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.localtime$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mktime$MH() {
        return fuse_h_constants_1.mktime$MH();
    }
    public static @C("time_t") long mktime (@C("struct tm*") Addressable x0) {
        try {
            return (long)fuse_h_constants_1.mktime$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strftime$MH() {
        return fuse_h_constants_1.strftime$MH();
    }
    public static @C("size_t") long strftime (@C("char*") Addressable x0, @C("size_t") long x1, @C("char*") Addressable x2, @C("struct tm*") Addressable x3) {
        try {
            return (long)fuse_h_constants_1.strftime$MH().invokeExact(x0.address(), x1, x2.address(), x3.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strptime$MH() {
        return fuse_h_constants_1.strptime$MH();
    }
    public static @C("char*") MemoryAddress strptime (@C("char*") Addressable x0, @C("char*") Addressable x1, @C("struct tm*") Addressable x2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.strptime$MH().invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle time$MH() {
        return fuse_h_constants_1.time$MH();
    }
    public static @C("time_t") long time (@C("time_t*") Addressable x0) {
        try {
            return (long)fuse_h_constants_1.time$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle tzset$MH() {
        return fuse_h_constants_1.tzset$MH();
    }
    public static void tzset () {
        try {
            fuse_h_constants_1.tzset$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle asctime_r$MH() {
        return fuse_h_constants_1.asctime_r$MH();
    }
    public static @C("char*") MemoryAddress asctime_r (@C("struct tm*") Addressable x0, @C("char*") Addressable x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.asctime_r$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ctime_r$MH() {
        return fuse_h_constants_1.ctime_r$MH();
    }
    public static @C("char*") MemoryAddress ctime_r (@C("const time_t*") Addressable x0, @C("char*") Addressable x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.ctime_r$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle gmtime_r$MH() {
        return fuse_h_constants_1.gmtime_r$MH();
    }
    public static @C("struct tm*") MemoryAddress gmtime_r (@C("const time_t*") Addressable x0, @C("struct tm*") Addressable x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.gmtime_r$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle localtime_r$MH() {
        return fuse_h_constants_1.localtime_r$MH();
    }
    public static @C("struct tm*") MemoryAddress localtime_r (@C("const time_t*") Addressable x0, @C("struct tm*") Addressable x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_1.localtime_r$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle posix2time$MH() {
        return fuse_h_constants_1.posix2time$MH();
    }
    public static @C("time_t") long posix2time (@C("time_t") long x0) {
        try {
            return (long)fuse_h_constants_1.posix2time$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle tzsetwall$MH() {
        return fuse_h_constants_1.tzsetwall$MH();
    }
    public static void tzsetwall () {
        try {
            fuse_h_constants_1.tzsetwall$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle time2posix$MH() {
        return fuse_h_constants_1.time2posix$MH();
    }
    public static @C("time_t") long time2posix (@C("time_t") long x0) {
        try {
            return (long)fuse_h_constants_1.time2posix$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle timelocal$MH() {
        return fuse_h_constants_1.timelocal$MH();
    }
    public static @C("time_t") long timelocal (@C("struct tm*") Addressable x0) {
        try {
            return (long)fuse_h_constants_1.timelocal$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle timegm$MH() {
        return fuse_h_constants_1.timegm$MH();
    }
    public static @C("time_t") long timegm (@C("struct tm*") Addressable x0) {
        try {
            return (long)fuse_h_constants_1.timegm$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle nanosleep$MH() {
        return fuse_h_constants_1.nanosleep$MH();
    }
    public static @C("int") int nanosleep (@C("struct timespec*") Addressable __rqtp, @C("struct timespec*") Addressable __rmtp) {
        try {
            return (int)fuse_h_constants_1.nanosleep$MH().invokeExact(__rqtp.address(), __rmtp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int _CLOCK_REALTIME() {
        return fuse_h_constants_1._CLOCK_REALTIME();
    }
    public static @C("int") int _CLOCK_MONOTONIC() {
        return fuse_h_constants_1._CLOCK_MONOTONIC();
    }
    public static @C("int") int _CLOCK_MONOTONIC_RAW() {
        return fuse_h_constants_1._CLOCK_MONOTONIC_RAW();
    }
    public static @C("int") int _CLOCK_MONOTONIC_RAW_APPROX() {
        return fuse_h_constants_1._CLOCK_MONOTONIC_RAW_APPROX();
    }
    public static @C("int") int _CLOCK_UPTIME_RAW() {
        return fuse_h_constants_1._CLOCK_UPTIME_RAW();
    }
    public static @C("int") int _CLOCK_UPTIME_RAW_APPROX() {
        return fuse_h_constants_1._CLOCK_UPTIME_RAW_APPROX();
    }
    public static @C("int") int _CLOCK_PROCESS_CPUTIME_ID() {
        return fuse_h_constants_1._CLOCK_PROCESS_CPUTIME_ID();
    }
    public static @C("int") int _CLOCK_THREAD_CPUTIME_ID() {
        return fuse_h_constants_1._CLOCK_THREAD_CPUTIME_ID();
    }
    public static  MethodHandle clock_getres$MH() {
        return fuse_h_constants_1.clock_getres$MH();
    }
    public static @C("int") int clock_getres (@C("clockid_t") int __clock_id, @C("struct timespec*") Addressable __res) {
        try {
            return (int)fuse_h_constants_1.clock_getres$MH().invokeExact(__clock_id, __res.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle clock_gettime$MH() {
        return fuse_h_constants_1.clock_gettime$MH();
    }
    public static @C("int") int clock_gettime (@C("clockid_t") int __clock_id, @C("struct timespec*") Addressable __tp) {
        try {
            return (int)fuse_h_constants_1.clock_gettime$MH().invokeExact(__clock_id, __tp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle clock_gettime_nsec_np$MH() {
        return fuse_h_constants_1.clock_gettime_nsec_np$MH();
    }
    public static @C("__uint64_t") long clock_gettime_nsec_np (@C("clockid_t") int __clock_id) {
        try {
            return (long)fuse_h_constants_1.clock_gettime_nsec_np$MH().invokeExact(__clock_id);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle clock_settime$MH() {
        return fuse_h_constants_1.clock_settime$MH();
    }
    public static @C("int") int clock_settime (@C("clockid_t") int __clock_id, @C("struct timespec*") Addressable __tp) {
        try {
            return (int)fuse_h_constants_1.clock_settime$MH().invokeExact(__clock_id, __tp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle timespec_get$MH() {
        return fuse_h_constants_1.timespec_get$MH();
    }
    public static @C("int") int timespec_get (@C("struct timespec*") Addressable ts, @C("int") int base) {
        try {
            return (int)fuse_h_constants_1.timespec_get$MH().invokeExact(ts.address(), base);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle utime$MH() {
        return fuse_h_constants_1.utime$MH();
    }
    public static @C("int") int utime (@C("char*") Addressable x0, @C("struct utimbuf*") Addressable x1) {
        try {
            return (int)fuse_h_constants_1.utime$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstatvfs$MH() {
        return fuse_h_constants_2.fstatvfs$MH();
    }
    public static @C("int") int fstatvfs (@C("int") int x0, @C("struct statvfs*") Addressable x1) {
        try {
            return (int)fuse_h_constants_2.fstatvfs$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle statvfs$MH() {
        return fuse_h_constants_2.statvfs$MH();
    }
    public static @C("int") int statvfs (@C("char*") Addressable x0, @C("struct statvfs*") Addressable x1) {
        try {
            return (int)fuse_h_constants_2.statvfs$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int UIO_READ() {
        return fuse_h_constants_2.UIO_READ();
    }
    public static @C("int") int UIO_WRITE() {
        return fuse_h_constants_2.UIO_WRITE();
    }
    public static  MethodHandle readv$MH() {
        return fuse_h_constants_2.readv$MH();
    }
    public static @C("ssize_t") long readv (@C("int") int x0, @C("struct iovec*") Addressable x1, @C("int") int x2) {
        try {
            return (long)fuse_h_constants_2.readv$MH().invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle writev$MH() {
        return fuse_h_constants_2.writev$MH();
    }
    public static @C("ssize_t") long writev (@C("int") int x0, @C("struct iovec*") Addressable x1, @C("int") int x2) {
        try {
            return (long)fuse_h_constants_2.writev$MH().invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle preadv$MH() {
        return fuse_h_constants_2.preadv$MH();
    }
    public static @C("ssize_t") long preadv (@C("int") int x0, @C("struct iovec*") Addressable x1, @C("int") int x2, @C("off_t") long x3) {
        try {
            return (long)fuse_h_constants_2.preadv$MH().invokeExact(x0, x1.address(), x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle pwritev$MH() {
        return fuse_h_constants_2.pwritev$MH();
    }
    public static @C("ssize_t") long pwritev (@C("int") int x0, @C("struct iovec*") Addressable x1, @C("int") int x2, @C("off_t") long x3) {
        try {
            return (long)fuse_h_constants_2.pwritev$MH().invokeExact(x0, x1.address(), x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") ValueLayout sig_atomic_t = C_INT;
    public static  MethodHandle signal$MH() {
        return fuse_h_constants_2.signal$MH();
    }
    public static @C("void(*)(int)") MemoryAddress signal (@C("int") int x0, @C("void(*)(int)") Addressable x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_2.signal$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") ValueLayout au_asid_t = C_INT;
    public static  MethodHandle audit$MH() {
        return fuse_h_constants_3.audit$MH();
    }
    public static @C("int") int audit (@C("void*") Addressable x0, @C("int") int x1) {
        try {
            return (int)fuse_h_constants_3.audit$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle auditon$MH() {
        return fuse_h_constants_3.auditon$MH();
    }
    public static @C("int") int auditon (@C("int") int x0, @C("void*") Addressable x1, @C("int") int x2) {
        try {
            return (int)fuse_h_constants_3.auditon$MH().invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle auditctl$MH() {
        return fuse_h_constants_3.auditctl$MH();
    }
    public static @C("int") int auditctl (@C("char*") Addressable x0) {
        try {
            return (int)fuse_h_constants_3.auditctl$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getauid$MH() {
        return fuse_h_constants_3.getauid$MH();
    }
    public static @C("int") int getauid (@C("au_id_t*") Addressable x0) {
        try {
            return (int)fuse_h_constants_3.getauid$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle setauid$MH() {
        return fuse_h_constants_3.setauid$MH();
    }
    public static @C("int") int setauid (@C("const au_id_t*") Addressable x0) {
        try {
            return (int)fuse_h_constants_3.setauid$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getaudit_addr$MH() {
        return fuse_h_constants_3.getaudit_addr$MH();
    }
    public static @C("int") int getaudit_addr (@C("struct auditinfo_addr*") Addressable x0, @C("int") int x1) {
        try {
            return (int)fuse_h_constants_3.getaudit_addr$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle setaudit_addr$MH() {
        return fuse_h_constants_3.setaudit_addr$MH();
    }
    public static @C("int") int setaudit_addr (@C("struct auditinfo_addr*") Addressable x0, @C("int") int x1) {
        try {
            return (int)fuse_h_constants_3.setaudit_addr$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getaudit$MH() {
        return fuse_h_constants_3.getaudit$MH();
    }
    public static @C("int") int getaudit (@C("struct auditinfo*") Addressable x0) {
        try {
            return (int)fuse_h_constants_3.getaudit$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle setaudit$MH() {
        return fuse_h_constants_3.setaudit$MH();
    }
    public static @C("int") int setaudit (@C("struct auditinfo*") Addressable x0) {
        try {
            return (int)fuse_h_constants_3.setaudit$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") ValueLayout integer_t = C_INT;
    public static @C("int") ValueLayout mach_port_delta_t = C_INT;
    public static @C("int") ValueLayout mach_port_flavor_t = C_INT;
    public static @C("int") int kGUARD_EXC_DESTROY() {
        return fuse_h_constants_3.kGUARD_EXC_DESTROY();
    }
    public static @C("int") int kGUARD_EXC_MOD_REFS() {
        return fuse_h_constants_3.kGUARD_EXC_MOD_REFS();
    }
    public static @C("int") int kGUARD_EXC_SET_CONTEXT() {
        return fuse_h_constants_3.kGUARD_EXC_SET_CONTEXT();
    }
    public static @C("int") int kGUARD_EXC_UNGUARDED() {
        return fuse_h_constants_3.kGUARD_EXC_UNGUARDED();
    }
    public static @C("int") int kGUARD_EXC_INCORRECT_GUARD() {
        return fuse_h_constants_3.kGUARD_EXC_INCORRECT_GUARD();
    }
    public static @C("int") int kGUARD_EXC_IMMOVABLE() {
        return fuse_h_constants_3.kGUARD_EXC_IMMOVABLE();
    }
    public static @C("int") int kGUARD_EXC_STRICT_REPLY() {
        return fuse_h_constants_3.kGUARD_EXC_STRICT_REPLY();
    }
    public static @C("int") int kGUARD_EXC_MSG_FILTERED() {
        return fuse_h_constants_3.kGUARD_EXC_MSG_FILTERED();
    }
    public static @C("int") int kGUARD_EXC_INVALID_RIGHT() {
        return fuse_h_constants_3.kGUARD_EXC_INVALID_RIGHT();
    }
    public static @C("int") int kGUARD_EXC_INVALID_NAME() {
        return fuse_h_constants_3.kGUARD_EXC_INVALID_NAME();
    }
    public static @C("int") int kGUARD_EXC_INVALID_VALUE() {
        return fuse_h_constants_3.kGUARD_EXC_INVALID_VALUE();
    }
    public static @C("int") int kGUARD_EXC_INVALID_ARGUMENT() {
        return fuse_h_constants_3.kGUARD_EXC_INVALID_ARGUMENT();
    }
    public static @C("int") int kGUARD_EXC_RIGHT_EXISTS() {
        return fuse_h_constants_3.kGUARD_EXC_RIGHT_EXISTS();
    }
    public static @C("int") int kGUARD_EXC_KERN_NO_SPACE() {
        return fuse_h_constants_3.kGUARD_EXC_KERN_NO_SPACE();
    }
    public static @C("int") int kGUARD_EXC_KERN_FAILURE() {
        return fuse_h_constants_3.kGUARD_EXC_KERN_FAILURE();
    }
    public static @C("int") int kGUARD_EXC_KERN_RESOURCE() {
        return fuse_h_constants_3.kGUARD_EXC_KERN_RESOURCE();
    }
    public static @C("int") int kGUARD_EXC_SEND_INVALID_REPLY() {
        return fuse_h_constants_3.kGUARD_EXC_SEND_INVALID_REPLY();
    }
    public static @C("int") int kGUARD_EXC_SEND_INVALID_VOUCHER() {
        return fuse_h_constants_3.kGUARD_EXC_SEND_INVALID_VOUCHER();
    }
    public static @C("int") int kGUARD_EXC_SEND_INVALID_RIGHT() {
        return fuse_h_constants_3.kGUARD_EXC_SEND_INVALID_RIGHT();
    }
    public static @C("int") int kGUARD_EXC_RCV_INVALID_NAME() {
        return fuse_h_constants_3.kGUARD_EXC_RCV_INVALID_NAME();
    }
    public static @C("int") int kGUARD_EXC_RCV_GUARDED_DESC() {
        return fuse_h_constants_3.kGUARD_EXC_RCV_GUARDED_DESC();
    }
    public static  MethodHandle audit_session_self$MH() {
        return fuse_h_constants_3.audit_session_self$MH();
    }
    public static @C("mach_port_name_t") int audit_session_self () {
        try {
            return (int)fuse_h_constants_3.audit_session_self$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle audit_session_join$MH() {
        return fuse_h_constants_3.audit_session_join$MH();
    }
    public static @C("au_asid_t") int audit_session_join (@C("mach_port_name_t") int port) {
        try {
            return (int)fuse_h_constants_3.audit_session_join$MH().invokeExact(port);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle audit_session_port$MH() {
        return fuse_h_constants_3.audit_session_port$MH();
    }
    public static @C("int") int audit_session_port (@C("au_asid_t") int asid, @C("mach_port_name_t*") Addressable portname) {
        try {
            return (int)fuse_h_constants_3.audit_session_port$MH().invokeExact(asid, portname.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle adjtime$MH() {
        return fuse_h_constants_3.adjtime$MH();
    }
    public static @C("int") int adjtime (@C("struct timeval*") Addressable x0, @C("struct timeval*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.adjtime$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle futimes$MH() {
        return fuse_h_constants_3.futimes$MH();
    }
    public static @C("int") int futimes (@C("int") int x0, @C("struct timeval*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.futimes$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lutimes$MH() {
        return fuse_h_constants_3.lutimes$MH();
    }
    public static @C("int") int lutimes (@C("char*") Addressable x0, @C("struct timeval*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.lutimes$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle settimeofday$MH() {
        return fuse_h_constants_3.settimeofday$MH();
    }
    public static @C("int") int settimeofday (@C("struct timeval*") Addressable x0, @C("struct timezone*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.settimeofday$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getitimer$MH() {
        return fuse_h_constants_3.getitimer$MH();
    }
    public static @C("int") int getitimer (@C("int") int x0, @C("struct itimerval*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.getitimer$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle gettimeofday$MH() {
        return fuse_h_constants_3.gettimeofday$MH();
    }
    public static @C("int") int gettimeofday (@C("struct timeval*") Addressable x0, @C("void*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.gettimeofday$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle select$MH() {
        return fuse_h_constants_3.select$MH();
    }
    public static @C("int") int select (@C("int") int x0, @C("fd_set*") Addressable x1, @C("fd_set*") Addressable x2, @C("fd_set*") Addressable x3, @C("struct timeval*") Addressable x4) {
        try {
            return (int)fuse_h_constants_3.select$MH().invokeExact(x0, x1.address(), x2.address(), x3.address(), x4.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle setitimer$MH() {
        return fuse_h_constants_3.setitimer$MH();
    }
    public static @C("int") int setitimer (@C("int") int x0, @C("struct itimerval*") Addressable x1, @C("struct itimerval*") Addressable x2) {
        try {
            return (int)fuse_h_constants_3.setitimer$MH().invokeExact(x0, x1.address(), x2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle utimes$MH() {
        return fuse_h_constants_3.utimes$MH();
    }
    public static @C("int") int utimes (@C("char*") Addressable x0, @C("struct timeval*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.utimes$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fhopen$MH() {
        return fuse_h_constants_3.fhopen$MH();
    }
    public static @C("int") int fhopen (@C("struct fhandle*") Addressable x0, @C("int") int x1) {
        try {
            return (int)fuse_h_constants_3.fhopen$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstatfs$MH() {
        return fuse_h_constants_3.fstatfs$MH();
    }
    public static @C("int") int fstatfs (@C("int") int x0, @C("struct statfs*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.fstatfs$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fstatfs64$MH() {
        return fuse_h_constants_3.fstatfs64$MH();
    }
    public static @C("int") int fstatfs64 (@C("int") int x0, @C("struct statfs64*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.fstatfs64$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getfh$MH() {
        return fuse_h_constants_3.getfh$MH();
    }
    public static @C("int") int getfh (@C("char*") Addressable x0, @C("fhandle_t*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.getfh$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getfsstat$MH() {
        return fuse_h_constants_3.getfsstat$MH();
    }
    public static @C("int") int getfsstat (@C("struct statfs*") Addressable x0, @C("int") int x1, @C("int") int x2) {
        try {
            return (int)fuse_h_constants_3.getfsstat$MH().invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getfsstat64$MH() {
        return fuse_h_constants_3.getfsstat64$MH();
    }
    public static @C("int") int getfsstat64 (@C("struct statfs64*") Addressable x0, @C("int") int x1, @C("int") int x2) {
        try {
            return (int)fuse_h_constants_3.getfsstat64$MH().invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getmntinfo$MH() {
        return fuse_h_constants_3.getmntinfo$MH();
    }
    public static @C("int") int getmntinfo (@C("struct statfs**") Addressable x0, @C("int") int x1) {
        try {
            return (int)fuse_h_constants_3.getmntinfo$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getmntinfo_r_np$MH() {
        return fuse_h_constants_3.getmntinfo_r_np$MH();
    }
    public static @C("int") int getmntinfo_r_np (@C("struct statfs**") Addressable x0, @C("int") int x1) {
        try {
            return (int)fuse_h_constants_3.getmntinfo_r_np$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getmntinfo64$MH() {
        return fuse_h_constants_3.getmntinfo64$MH();
    }
    public static @C("int") int getmntinfo64 (@C("struct statfs64**") Addressable x0, @C("int") int x1) {
        try {
            return (int)fuse_h_constants_3.getmntinfo64$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mount$MH() {
        return fuse_h_constants_3.mount$MH();
    }
    public static @C("int") int mount (@C("char*") Addressable x0, @C("char*") Addressable x1, @C("int") int x2, @C("void*") Addressable x3) {
        try {
            return (int)fuse_h_constants_3.mount$MH().invokeExact(x0.address(), x1.address(), x2, x3.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fmount$MH() {
        return fuse_h_constants_3.fmount$MH();
    }
    public static @C("int") int fmount (@C("char*") Addressable x0, @C("int") int x1, @C("int") int x2, @C("void*") Addressable x3) {
        try {
            return (int)fuse_h_constants_3.fmount$MH().invokeExact(x0.address(), x1, x2, x3.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle statfs$MH() {
        return fuse_h_constants_3.statfs$MH();
    }
    public static @C("int") int statfs (@C("char*") Addressable x0, @C("struct statfs*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.statfs$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle statfs64$MH() {
        return fuse_h_constants_3.statfs64$MH();
    }
    public static @C("int") int statfs64 (@C("char*") Addressable x0, @C("struct statfs64*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.statfs64$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle unmount$MH() {
        return fuse_h_constants_3.unmount$MH();
    }
    public static @C("int") int unmount (@C("char*") Addressable x0, @C("int") int x1) {
        try {
            return (int)fuse_h_constants_3.unmount$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getvfsbyname$MH() {
        return fuse_h_constants_3.getvfsbyname$MH();
    }
    public static @C("int") int getvfsbyname (@C("char*") Addressable x0, @C("struct vfsconf*") Addressable x1) {
        try {
            return (int)fuse_h_constants_3.getvfsbyname$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_new$MH() {
        return fuse_h_constants_4.fuse_new$MH();
    }
    public static @C("struct fuse*") MemoryAddress fuse_new (@C("struct fuse_chan*") Addressable ch, @C("struct fuse_args*") Addressable args, @C("struct fuse_operations*") Addressable op, @C("size_t") long op_size, @C("void*") Addressable user_data) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_new$MH().invokeExact(ch.address(), args.address(), op.address(), op_size, user_data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_destroy$MH() {
        return fuse_h_constants_4.fuse_destroy$MH();
    }
    public static void fuse_destroy (@C("struct fuse*") Addressable f) {
        try {
            fuse_h_constants_4.fuse_destroy$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_loop$MH() {
        return fuse_h_constants_4.fuse_loop$MH();
    }
    public static @C("int") int fuse_loop (@C("struct fuse*") Addressable f) {
        try {
            return (int)fuse_h_constants_4.fuse_loop$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_exit$MH() {
        return fuse_h_constants_4.fuse_exit$MH();
    }
    public static void fuse_exit (@C("struct fuse*") Addressable f) {
        try {
            fuse_h_constants_4.fuse_exit$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_loop_mt$MH() {
        return fuse_h_constants_4.fuse_loop_mt$MH();
    }
    public static @C("int") int fuse_loop_mt (@C("struct fuse*") Addressable f) {
        try {
            return (int)fuse_h_constants_4.fuse_loop_mt$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_get_context$MH() {
        return fuse_h_constants_4.fuse_get_context$MH();
    }
    public static @C("struct fuse_context*") MemoryAddress fuse_get_context () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_get_context$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_getgroups$MH() {
        return fuse_h_constants_4.fuse_getgroups$MH();
    }
    public static @C("int") int fuse_getgroups (@C("int") int size, @C("gid_t[]") Addressable list) {
        try {
            return (int)fuse_h_constants_4.fuse_getgroups$MH().invokeExact(size, list.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_interrupted$MH() {
        return fuse_h_constants_4.fuse_interrupted$MH();
    }
    public static @C("int") int fuse_interrupted () {
        try {
            return (int)fuse_h_constants_4.fuse_interrupted$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_invalidate_path$MH() {
        return fuse_h_constants_4.fuse_invalidate_path$MH();
    }
    public static @C("int") int fuse_invalidate_path (@C("struct fuse*") Addressable f, @C("char*") Addressable path) {
        try {
            return (int)fuse_h_constants_4.fuse_invalidate_path$MH().invokeExact(f.address(), path.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_invalidate$MH() {
        return fuse_h_constants_4.fuse_invalidate$MH();
    }
    public static @C("int") int fuse_invalidate (@C("struct fuse*") Addressable f, @C("char*") Addressable path) {
        try {
            return (int)fuse_h_constants_4.fuse_invalidate$MH().invokeExact(f.address(), path.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_is_lib_option$MH() {
        return fuse_h_constants_4.fuse_is_lib_option$MH();
    }
    public static @C("int") int fuse_is_lib_option (@C("char*") Addressable opt) {
        try {
            return (int)fuse_h_constants_4.fuse_is_lib_option$MH().invokeExact(opt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_main_real$MH() {
        return fuse_h_constants_4.fuse_main_real$MH();
    }
    public static @C("int") int fuse_main_real (@C("int") int argc, @C("char*[]") Addressable argv, @C("struct fuse_operations*") Addressable op, @C("size_t") long op_size, @C("void*") Addressable user_data) {
        try {
            return (int)fuse_h_constants_4.fuse_main_real$MH().invokeExact(argc, argv.address(), op.address(), op_size, user_data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_start_cleanup_thread$MH() {
        return fuse_h_constants_4.fuse_start_cleanup_thread$MH();
    }
    public static @C("int") int fuse_start_cleanup_thread (@C("struct fuse*") Addressable fuse) {
        try {
            return (int)fuse_h_constants_4.fuse_start_cleanup_thread$MH().invokeExact(fuse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_stop_cleanup_thread$MH() {
        return fuse_h_constants_4.fuse_stop_cleanup_thread$MH();
    }
    public static void fuse_stop_cleanup_thread (@C("struct fuse*") Addressable fuse) {
        try {
            fuse_h_constants_4.fuse_stop_cleanup_thread$MH().invokeExact(fuse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_clean_cache$MH() {
        return fuse_h_constants_4.fuse_clean_cache$MH();
    }
    public static @C("int") int fuse_clean_cache (@C("struct fuse*") Addressable fuse) {
        try {
            return (int)fuse_h_constants_4.fuse_clean_cache$MH().invokeExact(fuse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setattr_x$MH() {
        return fuse_h_constants_4.fuse_fs_setattr_x$MH();
    }
    public static @C("int") int fuse_fs_setattr_x (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct setattr_x*") Addressable attr) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_setattr_x$MH().invokeExact(fs.address(), path.address(), attr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_fsetattr_x$MH() {
        return fuse_h_constants_4.fuse_fs_fsetattr_x$MH();
    }
    public static @C("int") int fuse_fs_fsetattr_x (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct setattr_x*") Addressable attr, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_fsetattr_x$MH().invokeExact(fs.address(), path.address(), attr.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_getattr$MH() {
        return fuse_h_constants_4.fuse_fs_getattr$MH();
    }
    public static @C("int") int fuse_fs_getattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct stat*") Addressable buf) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_getattr$MH().invokeExact(fs.address(), path.address(), buf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_fgetattr$MH() {
        return fuse_h_constants_4.fuse_fs_fgetattr$MH();
    }
    public static @C("int") int fuse_fs_fgetattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct stat*") Addressable buf, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_fgetattr$MH().invokeExact(fs.address(), path.address(), buf.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_rename$MH() {
        return fuse_h_constants_4.fuse_fs_rename$MH();
    }
    public static @C("int") int fuse_fs_rename (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable oldpath, @C("char*") Addressable newpath) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_rename$MH().invokeExact(fs.address(), oldpath.address(), newpath.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_renamex$MH() {
        return fuse_h_constants_4.fuse_fs_renamex$MH();
    }
    public static @C("int") int fuse_fs_renamex (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable oldpath, @C("char*") Addressable newpath, @C("unsigned int") int flags) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_renamex$MH().invokeExact(fs.address(), oldpath.address(), newpath.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setvolname$MH() {
        return fuse_h_constants_4.fuse_fs_setvolname$MH();
    }
    public static @C("int") int fuse_fs_setvolname (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable volname) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_setvolname$MH().invokeExact(fs.address(), volname.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_exchange$MH() {
        return fuse_h_constants_4.fuse_fs_exchange$MH();
    }
    public static @C("int") int fuse_fs_exchange (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable oldpath, @C("char*") Addressable newpath, @C("unsigned long") long flags) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_exchange$MH().invokeExact(fs.address(), oldpath.address(), newpath.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_unlink$MH() {
        return fuse_h_constants_4.fuse_fs_unlink$MH();
    }
    public static @C("int") int fuse_fs_unlink (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_unlink$MH().invokeExact(fs.address(), path.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_rmdir$MH() {
        return fuse_h_constants_4.fuse_fs_rmdir$MH();
    }
    public static @C("int") int fuse_fs_rmdir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_rmdir$MH().invokeExact(fs.address(), path.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_symlink$MH() {
        return fuse_h_constants_4.fuse_fs_symlink$MH();
    }
    public static @C("int") int fuse_fs_symlink (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable linkname, @C("char*") Addressable path) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_symlink$MH().invokeExact(fs.address(), linkname.address(), path.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_link$MH() {
        return fuse_h_constants_4.fuse_fs_link$MH();
    }
    public static @C("int") int fuse_fs_link (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable oldpath, @C("char*") Addressable newpath) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_link$MH().invokeExact(fs.address(), oldpath.address(), newpath.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_release$MH() {
        return fuse_h_constants_4.fuse_fs_release$MH();
    }
    public static @C("int") int fuse_fs_release (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_release$MH().invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_open$MH() {
        return fuse_h_constants_4.fuse_fs_open$MH();
    }
    public static @C("int") int fuse_fs_open (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_open$MH().invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_read$MH() {
        return fuse_h_constants_4.fuse_fs_read$MH();
    }
    public static @C("int") int fuse_fs_read (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable buf, @C("size_t") long size, @C("off_t") long off, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_read$MH().invokeExact(fs.address(), path.address(), buf.address(), size, off, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_read_buf$MH() {
        return fuse_h_constants_4.fuse_fs_read_buf$MH();
    }
    public static @C("int") int fuse_fs_read_buf (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_bufvec**") Addressable bufp, @C("size_t") long size, @C("off_t") long off, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_read_buf$MH().invokeExact(fs.address(), path.address(), bufp.address(), size, off, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_write$MH() {
        return fuse_h_constants_4.fuse_fs_write$MH();
    }
    public static @C("int") int fuse_fs_write (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable buf, @C("size_t") long size, @C("off_t") long off, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_write$MH().invokeExact(fs.address(), path.address(), buf.address(), size, off, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_write_buf$MH() {
        return fuse_h_constants_4.fuse_fs_write_buf$MH();
    }
    public static @C("int") int fuse_fs_write_buf (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_bufvec*") Addressable buf, @C("off_t") long off, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_write_buf$MH().invokeExact(fs.address(), path.address(), buf.address(), off, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_fsync$MH() {
        return fuse_h_constants_4.fuse_fs_fsync$MH();
    }
    public static @C("int") int fuse_fs_fsync (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("int") int datasync, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_fsync$MH().invokeExact(fs.address(), path.address(), datasync, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_flush$MH() {
        return fuse_h_constants_4.fuse_fs_flush$MH();
    }
    public static @C("int") int fuse_fs_flush (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_flush$MH().invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_statfs$MH() {
        return fuse_h_constants_4.fuse_fs_statfs$MH();
    }
    public static @C("int") int fuse_fs_statfs (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct statvfs*") Addressable buf) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_statfs$MH().invokeExact(fs.address(), path.address(), buf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_statfs_x$MH() {
        return fuse_h_constants_4.fuse_fs_statfs_x$MH();
    }
    public static @C("int") int fuse_fs_statfs_x (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct statfs*") Addressable buf) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_statfs_x$MH().invokeExact(fs.address(), path.address(), buf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_opendir$MH() {
        return fuse_h_constants_4.fuse_fs_opendir$MH();
    }
    public static @C("int") int fuse_fs_opendir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_opendir$MH().invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_readdir$MH() {
        return fuse_h_constants_4.fuse_fs_readdir$MH();
    }
    public static @C("int") int fuse_fs_readdir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("void*") Addressable buf, @C("fuse_fill_dir_t") Addressable filler, @C("off_t") long off, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_readdir$MH().invokeExact(fs.address(), path.address(), buf.address(), filler.address(), off, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_fsyncdir$MH() {
        return fuse_h_constants_4.fuse_fs_fsyncdir$MH();
    }
    public static @C("int") int fuse_fs_fsyncdir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("int") int datasync, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_fsyncdir$MH().invokeExact(fs.address(), path.address(), datasync, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_releasedir$MH() {
        return fuse_h_constants_4.fuse_fs_releasedir$MH();
    }
    public static @C("int") int fuse_fs_releasedir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_releasedir$MH().invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_create$MH() {
        return fuse_h_constants_4.fuse_fs_create$MH();
    }
    public static @C("int") int fuse_fs_create (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("mode_t") short mode, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_create$MH().invokeExact(fs.address(), path.address(), mode, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_lock$MH() {
        return fuse_h_constants_4.fuse_fs_lock$MH();
    }
    public static @C("int") int fuse_fs_lock (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi, @C("int") int cmd, @C("struct flock*") Addressable lock) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_lock$MH().invokeExact(fs.address(), path.address(), fi.address(), cmd, lock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_flock$MH() {
        return fuse_h_constants_4.fuse_fs_flock$MH();
    }
    public static @C("int") int fuse_fs_flock (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi, @C("int") int op) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_flock$MH().invokeExact(fs.address(), path.address(), fi.address(), op);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_chflags$MH() {
        return fuse_h_constants_4.fuse_fs_chflags$MH();
    }
    public static @C("int") int fuse_fs_chflags (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("uint32_t") int flags) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_chflags$MH().invokeExact(fs.address(), path.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_getxtimes$MH() {
        return fuse_h_constants_4.fuse_fs_getxtimes$MH();
    }
    public static @C("int") int fuse_fs_getxtimes (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct timespec*") Addressable bkuptime, @C("struct timespec*") Addressable crtime) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_getxtimes$MH().invokeExact(fs.address(), path.address(), bkuptime.address(), crtime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setbkuptime$MH() {
        return fuse_h_constants_4.fuse_fs_setbkuptime$MH();
    }
    public static @C("int") int fuse_fs_setbkuptime (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct timespec*") Addressable tv) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_setbkuptime$MH().invokeExact(fs.address(), path.address(), tv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setchgtime$MH() {
        return fuse_h_constants_4.fuse_fs_setchgtime$MH();
    }
    public static @C("int") int fuse_fs_setchgtime (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct timespec*") Addressable tv) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_setchgtime$MH().invokeExact(fs.address(), path.address(), tv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setcrtime$MH() {
        return fuse_h_constants_4.fuse_fs_setcrtime$MH();
    }
    public static @C("int") int fuse_fs_setcrtime (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct timespec*") Addressable tv) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_setcrtime$MH().invokeExact(fs.address(), path.address(), tv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_chmod$MH() {
        return fuse_h_constants_4.fuse_fs_chmod$MH();
    }
    public static @C("int") int fuse_fs_chmod (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("mode_t") short mode) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_chmod$MH().invokeExact(fs.address(), path.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_chown$MH() {
        return fuse_h_constants_4.fuse_fs_chown$MH();
    }
    public static @C("int") int fuse_fs_chown (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("uid_t") int uid, @C("gid_t") int gid) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_chown$MH().invokeExact(fs.address(), path.address(), uid, gid);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_truncate$MH() {
        return fuse_h_constants_4.fuse_fs_truncate$MH();
    }
    public static @C("int") int fuse_fs_truncate (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("off_t") long size) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_truncate$MH().invokeExact(fs.address(), path.address(), size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_ftruncate$MH() {
        return fuse_h_constants_4.fuse_fs_ftruncate$MH();
    }
    public static @C("int") int fuse_fs_ftruncate (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("off_t") long size, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_ftruncate$MH().invokeExact(fs.address(), path.address(), size, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_utimens$MH() {
        return fuse_h_constants_4.fuse_fs_utimens$MH();
    }
    public static @C("int") int fuse_fs_utimens (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct timespec[]") Addressable tv) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_utimens$MH().invokeExact(fs.address(), path.address(), tv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_access$MH() {
        return fuse_h_constants_4.fuse_fs_access$MH();
    }
    public static @C("int") int fuse_fs_access (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("int") int mask) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_access$MH().invokeExact(fs.address(), path.address(), mask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_readlink$MH() {
        return fuse_h_constants_4.fuse_fs_readlink$MH();
    }
    public static @C("int") int fuse_fs_readlink (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable buf, @C("size_t") long len) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_readlink$MH().invokeExact(fs.address(), path.address(), buf.address(), len);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_mknod$MH() {
        return fuse_h_constants_4.fuse_fs_mknod$MH();
    }
    public static @C("int") int fuse_fs_mknod (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("mode_t") short mode, @C("dev_t") int rdev) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_mknod$MH().invokeExact(fs.address(), path.address(), mode, rdev);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_mkdir$MH() {
        return fuse_h_constants_4.fuse_fs_mkdir$MH();
    }
    public static @C("int") int fuse_fs_mkdir (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("mode_t") short mode) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_mkdir$MH().invokeExact(fs.address(), path.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_setxattr$MH() {
        return fuse_h_constants_4.fuse_fs_setxattr$MH();
    }
    public static @C("int") int fuse_fs_setxattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable name, @C("char*") Addressable value, @C("size_t") long size, @C("int") int flags, @C("uint32_t") int position) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_setxattr$MH().invokeExact(fs.address(), path.address(), name.address(), value.address(), size, flags, position);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_getxattr$MH() {
        return fuse_h_constants_4.fuse_fs_getxattr$MH();
    }
    public static @C("int") int fuse_fs_getxattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable name, @C("char*") Addressable value, @C("size_t") long size, @C("uint32_t") int position) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_getxattr$MH().invokeExact(fs.address(), path.address(), name.address(), value.address(), size, position);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_listxattr$MH() {
        return fuse_h_constants_4.fuse_fs_listxattr$MH();
    }
    public static @C("int") int fuse_fs_listxattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable list, @C("size_t") long size) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_listxattr$MH().invokeExact(fs.address(), path.address(), list.address(), size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_removexattr$MH() {
        return fuse_h_constants_4.fuse_fs_removexattr$MH();
    }
    public static @C("int") int fuse_fs_removexattr (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("char*") Addressable name) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_removexattr$MH().invokeExact(fs.address(), path.address(), name.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_bmap$MH() {
        return fuse_h_constants_4.fuse_fs_bmap$MH();
    }
    public static @C("int") int fuse_fs_bmap (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("size_t") long blocksize, @C("uint64_t*") Addressable idx) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_bmap$MH().invokeExact(fs.address(), path.address(), blocksize, idx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_ioctl$MH() {
        return fuse_h_constants_4.fuse_fs_ioctl$MH();
    }
    public static @C("int") int fuse_fs_ioctl (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("int") int cmd, @C("void*") Addressable arg, @C("struct fuse_file_info*") Addressable fi, @C("unsigned int") int flags, @C("void*") Addressable data) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_ioctl$MH().invokeExact(fs.address(), path.address(), cmd, arg.address(), fi.address(), flags, data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_poll$MH() {
        return fuse_h_constants_4.fuse_fs_poll$MH();
    }
    public static @C("int") int fuse_fs_poll (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("struct fuse_file_info*") Addressable fi, @C("struct fuse_pollhandle*") Addressable ph, @C("unsigned int*") Addressable reventsp) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_poll$MH().invokeExact(fs.address(), path.address(), fi.address(), ph.address(), reventsp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_fallocate$MH() {
        return fuse_h_constants_4.fuse_fs_fallocate$MH();
    }
    public static @C("int") int fuse_fs_fallocate (@C("struct fuse_fs*") Addressable fs, @C("char*") Addressable path, @C("int") int mode, @C("off_t") long offset, @C("off_t") long length, @C("struct fuse_file_info*") Addressable fi) {
        try {
            return (int)fuse_h_constants_4.fuse_fs_fallocate$MH().invokeExact(fs.address(), path.address(), mode, offset, length, fi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_init$MH() {
        return fuse_h_constants_4.fuse_fs_init$MH();
    }
    public static void fuse_fs_init (@C("struct fuse_fs*") Addressable fs, @C("struct fuse_conn_info*") Addressable conn) {
        try {
            fuse_h_constants_4.fuse_fs_init$MH().invokeExact(fs.address(), conn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_destroy$MH() {
        return fuse_h_constants_4.fuse_fs_destroy$MH();
    }
    public static void fuse_fs_destroy (@C("struct fuse_fs*") Addressable fs) {
        try {
            fuse_h_constants_4.fuse_fs_destroy$MH().invokeExact(fs.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_notify_poll$MH() {
        return fuse_h_constants_4.fuse_notify_poll$MH();
    }
    public static @C("int") int fuse_notify_poll (@C("struct fuse_pollhandle*") Addressable ph) {
        try {
            return (int)fuse_h_constants_4.fuse_notify_poll$MH().invokeExact(ph.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_fs_new$MH() {
        return fuse_h_constants_4.fuse_fs_new$MH();
    }
    public static @C("struct fuse_fs*") MemoryAddress fuse_fs_new (@C("struct fuse_operations*") Addressable op, @C("size_t") long op_size, @C("void*") Addressable user_data) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_fs_new$MH().invokeExact(op.address(), op_size, user_data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_register_module$MH() {
        return fuse_h_constants_4.fuse_register_module$MH();
    }
    public static void fuse_register_module (@C("struct fuse_module*") Addressable mod) {
        try {
            fuse_h_constants_4.fuse_register_module$MH().invokeExact(mod.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_setup$MH() {
        return fuse_h_constants_4.fuse_setup$MH();
    }
    public static @C("struct fuse*") MemoryAddress fuse_setup (@C("int") int argc, @C("char*[]") Addressable argv, @C("struct fuse_operations*") Addressable op, @C("size_t") long op_size, @C("char**") Addressable mountpoint, @C("int*") Addressable multithreaded, @C("void*") Addressable user_data) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_setup$MH().invokeExact(argc, argv.address(), op.address(), op_size, mountpoint.address(), multithreaded.address(), user_data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_teardown$MH() {
        return fuse_h_constants_4.fuse_teardown$MH();
    }
    public static void fuse_teardown (@C("struct fuse*") Addressable fuse, @C("char*") Addressable mountpoint) {
        try {
            fuse_h_constants_4.fuse_teardown$MH().invokeExact(fuse.address(), mountpoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_read_cmd$MH() {
        return fuse_h_constants_4.fuse_read_cmd$MH();
    }
    public static @C("struct fuse_cmd*") MemoryAddress fuse_read_cmd (@C("struct fuse*") Addressable f) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_read_cmd$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_process_cmd$MH() {
        return fuse_h_constants_4.fuse_process_cmd$MH();
    }
    public static void fuse_process_cmd (@C("struct fuse*") Addressable f, @C("struct fuse_cmd*") Addressable cmd) {
        try {
            fuse_h_constants_4.fuse_process_cmd$MH().invokeExact(f.address(), cmd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_loop_mt_proc$MH() {
        return fuse_h_constants_4.fuse_loop_mt_proc$MH();
    }
    public static @C("int") int fuse_loop_mt_proc (@C("struct fuse*") Addressable f, @C("fuse_processor_t") Addressable proc, @C("void*") Addressable data) {
        try {
            return (int)fuse_h_constants_4.fuse_loop_mt_proc$MH().invokeExact(f.address(), proc.address(), data.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_exited$MH() {
        return fuse_h_constants_4.fuse_exited$MH();
    }
    public static @C("int") int fuse_exited (@C("struct fuse*") Addressable f) {
        try {
            return (int)fuse_h_constants_4.fuse_exited$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_set_getcontext_func$MH() {
        return fuse_h_constants_4.fuse_set_getcontext_func$MH();
    }
    public static void fuse_set_getcontext_func (@C("struct fuse_context*(*)()") Addressable func) {
        try {
            fuse_h_constants_4.fuse_set_getcontext_func$MH().invokeExact(func.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle fuse_get_session$MH() {
        return fuse_h_constants_4.fuse_get_session$MH();
    }
    public static @C("struct fuse_session*") MemoryAddress fuse_get_session (@C("struct fuse*") Addressable f) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)fuse_h_constants_4.fuse_get_session$MH().invokeExact(f.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int FUSE_OPT_KEY_OPT() {
        return fuse_h_constants_4.FUSE_OPT_KEY_OPT();
    }
    public static @C("int") int FUSE_OPT_KEY_NONOPT() {
        return fuse_h_constants_4.FUSE_OPT_KEY_NONOPT();
    }
    public static @C("int") int FUSE_OPT_KEY_KEEP() {
        return fuse_h_constants_4.FUSE_OPT_KEY_KEEP();
    }
    public static @C("int") int FUSE_OPT_KEY_DISCARD() {
        return fuse_h_constants_4.FUSE_OPT_KEY_DISCARD();
    }
    public static @C("char*") MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return fuse_h_constants_4.__DARWIN_SUF_64_BIT_INO_T();
    }
    public static @C("char*") MemorySegment __DARWIN_SUF_1050() {
        return fuse_h_constants_4.__DARWIN_SUF_1050();
    }
    public static @C("char*") MemorySegment __DARWIN_SUF_EXTSN() {
        return fuse_h_constants_4.__DARWIN_SUF_EXTSN();
    }
    public static @C("long") long __DARWIN_C_ANSI() {
        return fuse_h_constants_4.__DARWIN_C_ANSI();
    }
    public static @C("long") long __DARWIN_C_FULL() {
        return fuse_h_constants_4.__DARWIN_C_FULL();
    }
    public static @C("long") long __DARWIN_C_LEVEL() {
        return fuse_h_constants_4.__DARWIN_C_LEVEL();
    }
    public static @C("void*") MemoryAddress __DARWIN_NULL() {
        return fuse_h_constants_4.__DARWIN_NULL();
    }
    public static @C("unsigned long long") long USER_ADDR_NULL() {
        return fuse_h_constants_4.USER_ADDR_NULL();
    }
    public static @C("long long") long INT64_MAX() {
        return fuse_h_constants_4.INT64_MAX();
    }
    public static @C("int") int INT8_MIN() {
        return fuse_h_constants_4.INT8_MIN();
    }
    public static @C("int") int INT16_MIN() {
        return fuse_h_constants_4.INT16_MIN();
    }
    public static @C("int") int INT32_MIN() {
        return fuse_h_constants_4.INT32_MIN();
    }
    public static @C("long long") long INT64_MIN() {
        return fuse_h_constants_4.INT64_MIN();
    }
    public static @C("unsigned int") int UINT32_MAX() {
        return fuse_h_constants_4.UINT32_MAX();
    }
    public static @C("unsigned long long") long UINT64_MAX() {
        return fuse_h_constants_4.UINT64_MAX();
    }
    public static @C("int") int INT_LEAST8_MIN() {
        return fuse_h_constants_4.INT_LEAST8_MIN();
    }
    public static @C("int") int INT_LEAST16_MIN() {
        return fuse_h_constants_4.INT_LEAST16_MIN();
    }
    public static @C("int") int INT_LEAST32_MIN() {
        return fuse_h_constants_4.INT_LEAST32_MIN();
    }
    public static @C("long long") long INT_LEAST64_MIN() {
        return fuse_h_constants_4.INT_LEAST64_MIN();
    }
    public static @C("int") int INT_LEAST8_MAX() {
        return fuse_h_constants_4.INT_LEAST8_MAX();
    }
    public static @C("int") int INT_LEAST16_MAX() {
        return fuse_h_constants_4.INT_LEAST16_MAX();
    }
    public static @C("int") int INT_LEAST32_MAX() {
        return fuse_h_constants_4.INT_LEAST32_MAX();
    }
    public static @C("long long") long INT_LEAST64_MAX() {
        return fuse_h_constants_4.INT_LEAST64_MAX();
    }
    public static @C("int") int UINT_LEAST8_MAX() {
        return fuse_h_constants_4.UINT_LEAST8_MAX();
    }
    public static @C("int") int UINT_LEAST16_MAX() {
        return fuse_h_constants_4.UINT_LEAST16_MAX();
    }
    public static @C("unsigned int") int UINT_LEAST32_MAX() {
        return fuse_h_constants_4.UINT_LEAST32_MAX();
    }
    public static @C("unsigned long long") long UINT_LEAST64_MAX() {
        return fuse_h_constants_4.UINT_LEAST64_MAX();
    }
    public static @C("int") int INT_FAST8_MIN() {
        return fuse_h_constants_4.INT_FAST8_MIN();
    }
    public static @C("int") int INT_FAST16_MIN() {
        return fuse_h_constants_4.INT_FAST16_MIN();
    }
    public static @C("int") int INT_FAST32_MIN() {
        return fuse_h_constants_4.INT_FAST32_MIN();
    }
    public static @C("long long") long INT_FAST64_MIN() {
        return fuse_h_constants_4.INT_FAST64_MIN();
    }
    public static @C("int") int INT_FAST8_MAX() {
        return fuse_h_constants_4.INT_FAST8_MAX();
    }
    public static @C("int") int INT_FAST16_MAX() {
        return fuse_h_constants_4.INT_FAST16_MAX();
    }
    public static @C("int") int INT_FAST32_MAX() {
        return fuse_h_constants_4.INT_FAST32_MAX();
    }
    public static @C("long long") long INT_FAST64_MAX() {
        return fuse_h_constants_4.INT_FAST64_MAX();
    }
    public static @C("int") int UINT_FAST8_MAX() {
        return fuse_h_constants_4.UINT_FAST8_MAX();
    }
    public static @C("int") int UINT_FAST16_MAX() {
        return fuse_h_constants_4.UINT_FAST16_MAX();
    }
    public static @C("unsigned int") int UINT_FAST32_MAX() {
        return fuse_h_constants_4.UINT_FAST32_MAX();
    }
    public static @C("unsigned long long") long UINT_FAST64_MAX() {
        return fuse_h_constants_4.UINT_FAST64_MAX();
    }
    public static @C("long") long INTPTR_MAX() {
        return fuse_h_constants_4.INTPTR_MAX();
    }
    public static @C("long") long INTPTR_MIN() {
        return fuse_h_constants_4.INTPTR_MIN();
    }
    public static @C("unsigned long") long UINTPTR_MAX() {
        return fuse_h_constants_4.UINTPTR_MAX();
    }
    public static @C("long") long INTMAX_MAX() {
        return fuse_h_constants_4.INTMAX_MAX();
    }
    public static @C("unsigned long") long UINTMAX_MAX() {
        return fuse_h_constants_4.UINTMAX_MAX();
    }
    public static @C("long") long INTMAX_MIN() {
        return fuse_h_constants_4.INTMAX_MIN();
    }
    public static @C("long") long PTRDIFF_MIN() {
        return fuse_h_constants_4.PTRDIFF_MIN();
    }
    public static @C("long") long PTRDIFF_MAX() {
        return fuse_h_constants_4.PTRDIFF_MAX();
    }
    public static @C("unsigned long") long SIZE_MAX() {
        return fuse_h_constants_4.SIZE_MAX();
    }
    public static @C("unsigned long") long RSIZE_MAX() {
        return fuse_h_constants_4.RSIZE_MAX();
    }
    public static @C("int") int WCHAR_MAX() {
        return fuse_h_constants_4.WCHAR_MAX();
    }
    public static @C("int") int WCHAR_MIN() {
        return fuse_h_constants_4.WCHAR_MIN();
    }
    public static @C("int") int WINT_MIN() {
        return fuse_h_constants_4.WINT_MIN();
    }
    public static @C("int") int WINT_MAX() {
        return fuse_h_constants_4.WINT_MAX();
    }
    public static @C("int") int SIG_ATOMIC_MIN() {
        return fuse_h_constants_4.SIG_ATOMIC_MIN();
    }
    public static @C("int") int SIG_ATOMIC_MAX() {
        return fuse_h_constants_4.SIG_ATOMIC_MAX();
    }
    public static @C("int") int __DARWIN_BYTE_ORDER() {
        return fuse_h_constants_4.__DARWIN_BYTE_ORDER();
    }
    public static @C("int") int LITTLE_ENDIAN() {
        return fuse_h_constants_4.LITTLE_ENDIAN();
    }
    public static @C("int") int BIG_ENDIAN() {
        return fuse_h_constants_4.BIG_ENDIAN();
    }
    public static @C("int") int PDP_ENDIAN() {
        return fuse_h_constants_4.PDP_ENDIAN();
    }
    public static @C("int") int BYTE_ORDER() {
        return fuse_h_constants_4.BYTE_ORDER();
    }
    public static @C("int") int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return fuse_h_constants_4.__MAC_OS_X_VERSION_MIN_REQUIRED();
    }
    public static @C("int") int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return fuse_h_constants_4.__MAC_OS_X_VERSION_MAX_ALLOWED();
    }
    public static @C("unsigned long") long __DARWIN_NFDBITS() {
        return fuse_h_constants_4.__DARWIN_NFDBITS();
    }
    public static @C("int") int NBBY() {
        return fuse_h_constants_4.NBBY();
    }
    public static @C("unsigned long") long NFDBITS() {
        return fuse_h_constants_4.NFDBITS();
    }
    public static @C("int") int FD_SETSIZE() {
        return fuse_h_constants_4.FD_SETSIZE();
    }
    public static @C("int") int FUSE_VERSION() {
        return fuse_h_constants_4.FUSE_VERSION();
    }
    public static @C("int") int S_ISTXT() {
        return fuse_h_constants_4.S_ISTXT();
    }
    public static @C("int") int S_IREAD() {
        return fuse_h_constants_4.S_IREAD();
    }
    public static @C("int") int S_IWRITE() {
        return fuse_h_constants_4.S_IWRITE();
    }
    public static @C("int") int S_IEXEC() {
        return fuse_h_constants_4.S_IEXEC();
    }
    public static @C("int") int ACCESSPERMS() {
        return fuse_h_constants_4.ACCESSPERMS();
    }
    public static @C("int") int ALLPERMS() {
        return fuse_h_constants_4.ALLPERMS();
    }
    public static @C("int") int DEFFILEMODE() {
        return fuse_h_constants_4.DEFFILEMODE();
    }
    public static @C("unsigned int") int SF_SYNTHETIC() {
        return fuse_h_constants_4.SF_SYNTHETIC();
    }
    public static @C("int") int UTIME_NOW() {
        return fuse_h_constants_4.UTIME_NOW();
    }
    public static @C("int") int UTIME_OMIT() {
        return fuse_h_constants_4.UTIME_OMIT();
    }
    public static @C("int") int FUSE_CAP_ASYNC_READ() {
        return fuse_h_constants_4.FUSE_CAP_ASYNC_READ();
    }
    public static @C("int") int FUSE_CAP_POSIX_LOCKS() {
        return fuse_h_constants_4.FUSE_CAP_POSIX_LOCKS();
    }
    public static @C("int") int FUSE_CAP_ATOMIC_O_TRUNC() {
        return fuse_h_constants_4.FUSE_CAP_ATOMIC_O_TRUNC();
    }
    public static @C("int") int FUSE_CAP_EXPORT_SUPPORT() {
        return fuse_h_constants_4.FUSE_CAP_EXPORT_SUPPORT();
    }
    public static @C("int") int FUSE_CAP_BIG_WRITES() {
        return fuse_h_constants_4.FUSE_CAP_BIG_WRITES();
    }
    public static @C("int") int FUSE_CAP_DONT_MASK() {
        return fuse_h_constants_4.FUSE_CAP_DONT_MASK();
    }
    public static @C("int") int FUSE_CAP_SPLICE_WRITE() {
        return fuse_h_constants_4.FUSE_CAP_SPLICE_WRITE();
    }
    public static @C("int") int FUSE_CAP_SPLICE_MOVE() {
        return fuse_h_constants_4.FUSE_CAP_SPLICE_MOVE();
    }
    public static @C("int") int FUSE_CAP_SPLICE_READ() {
        return fuse_h_constants_4.FUSE_CAP_SPLICE_READ();
    }
    public static @C("int") int FUSE_CAP_FLOCK_LOCKS() {
        return fuse_h_constants_4.FUSE_CAP_FLOCK_LOCKS();
    }
    public static @C("int") int FUSE_CAP_IOCTL_DIR() {
        return fuse_h_constants_4.FUSE_CAP_IOCTL_DIR();
    }
    public static @C("int") int FUSE_CAP_RENAME_SWAP() {
        return fuse_h_constants_4.FUSE_CAP_RENAME_SWAP();
    }
    public static @C("int") int FUSE_CAP_RENAME_EXCL() {
        return fuse_h_constants_4.FUSE_CAP_RENAME_EXCL();
    }
    public static @C("int") int FUSE_CAP_ALLOCATE() {
        return fuse_h_constants_4.FUSE_CAP_ALLOCATE();
    }
    public static @C("int") int FUSE_CAP_EXCHANGE_DATA() {
        return fuse_h_constants_4.FUSE_CAP_EXCHANGE_DATA();
    }
    public static @C("int") int FUSE_CAP_CASE_INSENSITIVE() {
        return fuse_h_constants_4.FUSE_CAP_CASE_INSENSITIVE();
    }
    public static @C("int") int FUSE_CAP_VOL_RENAME() {
        return fuse_h_constants_4.FUSE_CAP_VOL_RENAME();
    }
    public static @C("int") int FUSE_CAP_XTIMES() {
        return fuse_h_constants_4.FUSE_CAP_XTIMES();
    }
    public static @C("int") int FUSE_IOCTL_COMPAT() {
        return fuse_h_constants_4.FUSE_IOCTL_COMPAT();
    }
    public static @C("int") int FUSE_IOCTL_UNRESTRICTED() {
        return fuse_h_constants_4.FUSE_IOCTL_UNRESTRICTED();
    }
    public static @C("int") int FUSE_IOCTL_RETRY() {
        return fuse_h_constants_4.FUSE_IOCTL_RETRY();
    }
    public static @C("int") int FUSE_IOCTL_DIR() {
        return fuse_h_constants_4.FUSE_IOCTL_DIR();
    }
    public static @C("int") int O_FSYNC() {
        return fuse_h_constants_4.O_FSYNC();
    }
    public static @C("int") int AT_FDCWD() {
        return fuse_h_constants_4.AT_FDCWD();
    }
    public static @C("int") int FAPPEND() {
        return fuse_h_constants_4.FAPPEND();
    }
    public static @C("int") int FASYNC() {
        return fuse_h_constants_4.FASYNC();
    }
    public static @C("int") int FFSYNC() {
        return fuse_h_constants_4.FFSYNC();
    }
    public static @C("int") int FFDSYNC() {
        return fuse_h_constants_4.FFDSYNC();
    }
    public static @C("int") int FNONBLOCK() {
        return fuse_h_constants_4.FNONBLOCK();
    }
    public static @C("int") int FNDELAY() {
        return fuse_h_constants_4.FNDELAY();
    }
    public static @C("int") int O_NDELAY() {
        return fuse_h_constants_4.O_NDELAY();
    }
    public static @C("int") int CPF_MASK() {
        return fuse_h_constants_4.CPF_MASK();
    }
    public static @C("unsigned int") int O_POPUP() {
        return fuse_h_constants_4.O_POPUP();
    }
    public static @C("int") int FILESEC_GUID() {
        return fuse_h_constants_4.FILESEC_GUID();
    }
    public static @C("void*") MemoryAddress _FILESEC_UNSET_PROPERTY() {
        return fuse_h_constants_4._FILESEC_UNSET_PROPERTY();
    }
    public static @C("void*") MemoryAddress _FILESEC_REMOVE_ACL() {
        return fuse_h_constants_4._FILESEC_REMOVE_ACL();
    }
    public static @C("int") int __DARWIN_WCHAR_MAX() {
        return fuse_h_constants_4.__DARWIN_WCHAR_MAX();
    }
    public static @C("int") int __DARWIN_WCHAR_MIN() {
        return fuse_h_constants_4.__DARWIN_WCHAR_MIN();
    }
    public static @C("int") int __DARWIN_WEOF() {
        return fuse_h_constants_4.__DARWIN_WEOF();
    }
    public static @C("void*") MemoryAddress NULL() {
        return fuse_h_constants_4.NULL();
    }
    public static @C("int") int CLOCK_REALTIME() {
        return fuse_h_constants_4.CLOCK_REALTIME();
    }
    public static @C("int") int CLOCK_MONOTONIC() {
        return fuse_h_constants_4.CLOCK_MONOTONIC();
    }
    public static @C("int") int CLOCK_MONOTONIC_RAW() {
        return fuse_h_constants_4.CLOCK_MONOTONIC_RAW();
    }
    public static @C("int") int CLOCK_MONOTONIC_RAW_APPROX() {
        return fuse_h_constants_4.CLOCK_MONOTONIC_RAW_APPROX();
    }
    public static @C("int") int CLOCK_UPTIME_RAW() {
        return fuse_h_constants_4.CLOCK_UPTIME_RAW();
    }
    public static @C("int") int CLOCK_UPTIME_RAW_APPROX() {
        return fuse_h_constants_4.CLOCK_UPTIME_RAW_APPROX();
    }
    public static @C("int") int CLOCK_PROCESS_CPUTIME_ID() {
        return fuse_h_constants_4.CLOCK_PROCESS_CPUTIME_ID();
    }
    public static @C("int") int CLOCK_THREAD_CPUTIME_ID() {
        return fuse_h_constants_4.CLOCK_THREAD_CPUTIME_ID();
    }
    public static @C("int") int ARG_MAX() {
        return fuse_h_constants_4.ARG_MAX();
    }
    public static @C("unsigned int") int GID_MAX() {
        return fuse_h_constants_4.GID_MAX();
    }
    public static @C("unsigned int") int UID_MAX() {
        return fuse_h_constants_4.UID_MAX();
    }
    public static @C("int") int MAXUPRC() {
        return fuse_h_constants_4.MAXUPRC();
    }
    public static @C("int") int NCARGS() {
        return fuse_h_constants_4.NCARGS();
    }
    public static @C("int") int NGROUPS() {
        return fuse_h_constants_4.NGROUPS();
    }
    public static @C("unsigned long") long __DARWIN_ALIGNBYTES() {
        return fuse_h_constants_4.__DARWIN_ALIGNBYTES();
    }
    public static @C("unsigned long") long __DARWIN_ALIGNBYTES32() {
        return fuse_h_constants_4.__DARWIN_ALIGNBYTES32();
    }
    public static @C("unsigned long") long ALIGNBYTES() {
        return fuse_h_constants_4.ALIGNBYTES();
    }
    public static @C("int") int PGOFSET() {
        return fuse_h_constants_4.PGOFSET();
    }
    public static @C("int") int MAXPHYS() {
        return fuse_h_constants_4.MAXPHYS();
    }
    public static @C("int") int MSIZE() {
        return fuse_h_constants_4.MSIZE();
    }
    public static @C("int") int MCLBYTES() {
        return fuse_h_constants_4.MCLBYTES();
    }
    public static @C("int") int MBIGCLBYTES() {
        return fuse_h_constants_4.MBIGCLBYTES();
    }
    public static @C("int") int M16KCLBYTES() {
        return fuse_h_constants_4.M16KCLBYTES();
    }
    public static @C("int") int MCLOFSET() {
        return fuse_h_constants_4.MCLOFSET();
    }
    public static @C("int") int NMBCLUSTERS() {
        return fuse_h_constants_4.NMBCLUSTERS();
    }
    public static @C("int") int CLK_TCK() {
        return fuse_h_constants_4.CLK_TCK();
    }
    public static @C("int") int SCHAR_MIN() {
        return fuse_h_constants_4.SCHAR_MIN();
    }
    public static @C("int") int CHAR_MIN() {
        return fuse_h_constants_4.CHAR_MIN();
    }
    public static @C("int") int SHRT_MIN() {
        return fuse_h_constants_4.SHRT_MIN();
    }
    public static @C("unsigned int") int UINT_MAX() {
        return fuse_h_constants_4.UINT_MAX();
    }
    public static @C("int") int INT_MIN() {
        return fuse_h_constants_4.INT_MIN();
    }
    public static @C("unsigned long") long ULONG_MAX() {
        return fuse_h_constants_4.ULONG_MAX();
    }
    public static @C("long") long LONG_MAX() {
        return fuse_h_constants_4.LONG_MAX();
    }
    public static @C("long") long LONG_MIN() {
        return fuse_h_constants_4.LONG_MIN();
    }
    public static @C("unsigned long long") long ULLONG_MAX() {
        return fuse_h_constants_4.ULLONG_MAX();
    }
    public static @C("long long") long LLONG_MAX() {
        return fuse_h_constants_4.LLONG_MAX();
    }
    public static @C("long long") long LLONG_MIN() {
        return fuse_h_constants_4.LLONG_MIN();
    }
    public static @C("long") long SSIZE_MAX() {
        return fuse_h_constants_4.SSIZE_MAX();
    }
    public static @C("unsigned long") long SIZE_T_MAX() {
        return fuse_h_constants_4.SIZE_T_MAX();
    }
    public static @C("unsigned long long") long UQUAD_MAX() {
        return fuse_h_constants_4.UQUAD_MAX();
    }
    public static @C("long long") long QUAD_MAX() {
        return fuse_h_constants_4.QUAD_MAX();
    }
    public static @C("long long") long QUAD_MIN() {
        return fuse_h_constants_4.QUAD_MIN();
    }
    public static @C("int") int _POSIX_RE_DUP_MAX() {
        return fuse_h_constants_4._POSIX_RE_DUP_MAX();
    }
    public static @C("long long") long OFF_MIN() {
        return fuse_h_constants_4.OFF_MIN();
    }
    public static @C("long long") long OFF_MAX() {
        return fuse_h_constants_4.OFF_MAX();
    }
    public static @C("int") int NSIG() {
        return fuse_h_constants_4.NSIG();
    }
    public static @C("int") int SIGIOT() {
        return fuse_h_constants_4.SIGIOT();
    }
    public static @C("void(*)(int)") MemoryAddress SIG_DFL() {
        return fuse_h_constants_4.SIG_DFL();
    }
    public static @C("void(*)(int)") MemoryAddress SIG_IGN() {
        return fuse_h_constants_4.SIG_IGN();
    }
    public static @C("void(*)(int)") MemoryAddress SIG_HOLD() {
        return fuse_h_constants_4.SIG_HOLD();
    }
    public static @C("void(*)(int)") MemoryAddress SIG_ERR() {
        return fuse_h_constants_4.SIG_ERR();
    }
    public static @C("int") int _X86_INSTRUCTION_STATE_MAX_INSN_BYTES() {
        return fuse_h_constants_4._X86_INSTRUCTION_STATE_MAX_INSN_BYTES();
    }
    public static @C("int") int SA_USERSPACE_MASK() {
        return fuse_h_constants_4.SA_USERSPACE_MASK();
    }
    public static @C("int") int SV_ONSTACK() {
        return fuse_h_constants_4.SV_ONSTACK();
    }
    public static @C("int") int SV_INTERRUPT() {
        return fuse_h_constants_4.SV_INTERRUPT();
    }
    public static @C("int") int SV_RESETHAND() {
        return fuse_h_constants_4.SV_RESETHAND();
    }
    public static @C("int") int SV_NODEFER() {
        return fuse_h_constants_4.SV_NODEFER();
    }
    public static @C("int") int SV_NOCLDSTOP() {
        return fuse_h_constants_4.SV_NOCLDSTOP();
    }
    public static @C("int") int SV_SIGINFO() {
        return fuse_h_constants_4.SV_SIGINFO();
    }
    public static @C("void(*)(int)") MemoryAddress BADSIG() {
        return fuse_h_constants_4.BADSIG();
    }
    public static @C("unsigned long") long NBPW() {
        return fuse_h_constants_4.NBPW();
    }
    public static @C("int") int NODEV() {
        return fuse_h_constants_4.NODEV();
    }
    public static @C("int") int CLBYTES() {
        return fuse_h_constants_4.CLBYTES();
    }
    public static @C("int") int CLOFSET() {
        return fuse_h_constants_4.CLOFSET();
    }
    public static @C("int") int CLOFF() {
        return fuse_h_constants_4.CLOFF();
    }
    public static @C("int") int CLSHIFT() {
        return fuse_h_constants_4.CLSHIFT();
    }
    public static @C("int") int CBQSIZE() {
        return fuse_h_constants_4.CBQSIZE();
    }
    public static @C("unsigned long") long CBSIZE() {
        return fuse_h_constants_4.CBSIZE();
    }
    public static @C("int") int CROUND() {
        return fuse_h_constants_4.CROUND();
    }
    public static @C("int") int MAXBSIZE() {
        return fuse_h_constants_4.MAXBSIZE();
    }
    public static @C("int") int MAXPHYSIO() {
        return fuse_h_constants_4.MAXPHYSIO();
    }
    public static @C("int") int MAXPHYSIO_WIRED() {
        return fuse_h_constants_4.MAXPHYSIO_WIRED();
    }
    public static @C("int") int MAXPATHLEN() {
        return fuse_h_constants_4.MAXPATHLEN();
    }
    public static @C("int") int FSCALE() {
        return fuse_h_constants_4.FSCALE();
    }
    public static @C("unsigned int") int AUDIT_RECORD_MAGIC() {
        return fuse_h_constants_4.AUDIT_RECORD_MAGIC();
    }
    public static @C("int") int MAXAUDITDATA() {
        return fuse_h_constants_4.MAXAUDITDATA();
    }
    public static @C("int") int MAX_AUDIT_RECORD_SIZE() {
        return fuse_h_constants_4.MAX_AUDIT_RECORD_SIZE();
    }
    public static @C("int") int MIN_AUDIT_FILE_SIZE() {
        return fuse_h_constants_4.MIN_AUDIT_FILE_SIZE();
    }
    public static @C("char*") MemorySegment AUDITDEV_FILENAME() {
        return fuse_h_constants_4.AUDITDEV_FILENAME();
    }
    public static @C("unsigned int") int AU_DEFAUDITID() {
        return fuse_h_constants_4.AU_DEFAUDITID();
    }
    public static @C("int") int AU_ASSIGN_ASID() {
        return fuse_h_constants_4.AU_ASSIGN_ASID();
    }
    public static @C("unsigned char") byte AT_IPC_MSG() {
        return fuse_h_constants_4.AT_IPC_MSG();
    }
    public static @C("unsigned char") byte AT_IPC_SEM() {
        return fuse_h_constants_4.AT_IPC_SEM();
    }
    public static @C("unsigned char") byte AT_IPC_SHM() {
        return fuse_h_constants_4.AT_IPC_SHM();
    }
    public static @C("int") int AUC_DISABLED() {
        return fuse_h_constants_4.AUC_DISABLED();
    }
    public static @C("int") int AQ_BUFSZ() {
        return fuse_h_constants_4.AQ_BUFSZ();
    }
    public static @C("unsigned char") byte AUDIT_CTLMODE_NORMAL() {
        return fuse_h_constants_4.AUDIT_CTLMODE_NORMAL();
    }
    public static @C("unsigned char") byte AUDIT_CTLMODE_EXTERNAL() {
        return fuse_h_constants_4.AUDIT_CTLMODE_EXTERNAL();
    }
    public static @C("unsigned char") byte AUDIT_EXPIRE_OP_AND() {
        return fuse_h_constants_4.AUDIT_EXPIRE_OP_AND();
    }
    public static @C("unsigned char") byte AUDIT_EXPIRE_OP_OR() {
        return fuse_h_constants_4.AUDIT_EXPIRE_OP_OR();
    }
    public static @C("unsigned int") int MACH_PORT_DEAD() {
        return fuse_h_constants_4.MACH_PORT_DEAD();
    }
    public static @C("unsigned int") int MACH_PORT_RIGHT_SEND() {
        return fuse_h_constants_4.MACH_PORT_RIGHT_SEND();
    }
    public static @C("unsigned int") int MACH_PORT_RIGHT_RECEIVE() {
        return fuse_h_constants_4.MACH_PORT_RIGHT_RECEIVE();
    }
    public static @C("unsigned int") int MACH_PORT_RIGHT_SEND_ONCE() {
        return fuse_h_constants_4.MACH_PORT_RIGHT_SEND_ONCE();
    }
    public static @C("unsigned int") int MACH_PORT_RIGHT_PORT_SET() {
        return fuse_h_constants_4.MACH_PORT_RIGHT_PORT_SET();
    }
    public static @C("unsigned int") int MACH_PORT_RIGHT_DEAD_NAME() {
        return fuse_h_constants_4.MACH_PORT_RIGHT_DEAD_NAME();
    }
    public static @C("unsigned int") int MACH_PORT_RIGHT_LABELH() {
        return fuse_h_constants_4.MACH_PORT_RIGHT_LABELH();
    }
    public static @C("unsigned int") int MACH_PORT_RIGHT_NUMBER() {
        return fuse_h_constants_4.MACH_PORT_RIGHT_NUMBER();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_NONE() {
        return fuse_h_constants_4.MACH_PORT_TYPE_NONE();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_SEND() {
        return fuse_h_constants_4.MACH_PORT_TYPE_SEND();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_RECEIVE() {
        return fuse_h_constants_4.MACH_PORT_TYPE_RECEIVE();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_SEND_ONCE() {
        return fuse_h_constants_4.MACH_PORT_TYPE_SEND_ONCE();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_PORT_SET() {
        return fuse_h_constants_4.MACH_PORT_TYPE_PORT_SET();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_DEAD_NAME() {
        return fuse_h_constants_4.MACH_PORT_TYPE_DEAD_NAME();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_LABELH() {
        return fuse_h_constants_4.MACH_PORT_TYPE_LABELH();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_SEND_RECEIVE() {
        return fuse_h_constants_4.MACH_PORT_TYPE_SEND_RECEIVE();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_SEND_RIGHTS() {
        return fuse_h_constants_4.MACH_PORT_TYPE_SEND_RIGHTS();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_PORT_RIGHTS() {
        return fuse_h_constants_4.MACH_PORT_TYPE_PORT_RIGHTS();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_PORT_OR_DEAD() {
        return fuse_h_constants_4.MACH_PORT_TYPE_PORT_OR_DEAD();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_ALL_RIGHTS() {
        return fuse_h_constants_4.MACH_PORT_TYPE_ALL_RIGHTS();
    }
    public static @C("unsigned int") int MACH_PORT_TYPE_DNREQUEST() {
        return fuse_h_constants_4.MACH_PORT_TYPE_DNREQUEST();
    }
    public static @C("int") int MACH_PORT_QLIMIT_ZERO() {
        return fuse_h_constants_4.MACH_PORT_QLIMIT_ZERO();
    }
    public static @C("int") int MACH_PORT_QLIMIT_BASIC() {
        return fuse_h_constants_4.MACH_PORT_QLIMIT_BASIC();
    }
    public static @C("int") int MACH_PORT_QLIMIT_SMALL() {
        return fuse_h_constants_4.MACH_PORT_QLIMIT_SMALL();
    }
    public static @C("int") int MACH_PORT_QLIMIT_LARGE() {
        return fuse_h_constants_4.MACH_PORT_QLIMIT_LARGE();
    }
    public static @C("int") int MACH_PORT_QLIMIT_KERNEL() {
        return fuse_h_constants_4.MACH_PORT_QLIMIT_KERNEL();
    }
    public static @C("int") int MACH_PORT_QLIMIT_MIN() {
        return fuse_h_constants_4.MACH_PORT_QLIMIT_MIN();
    }
    public static @C("int") int MACH_PORT_QLIMIT_DEFAULT() {
        return fuse_h_constants_4.MACH_PORT_QLIMIT_DEFAULT();
    }
    public static @C("int") int MACH_PORT_QLIMIT_MAX() {
        return fuse_h_constants_4.MACH_PORT_QLIMIT_MAX();
    }
    public static @C("unsigned int") int MACH_PORT_LIMITS_INFO_COUNT() {
        return fuse_h_constants_4.MACH_PORT_LIMITS_INFO_COUNT();
    }
    public static @C("unsigned int") int MACH_PORT_RECEIVE_STATUS_COUNT() {
        return fuse_h_constants_4.MACH_PORT_RECEIVE_STATUS_COUNT();
    }
    public static @C("unsigned int") int MACH_PORT_INFO_EXT_COUNT() {
        return fuse_h_constants_4.MACH_PORT_INFO_EXT_COUNT();
    }
    public static @C("unsigned int") int MAX_FATAL_kGUARD_EXC_CODE() {
        return fuse_h_constants_4.MAX_FATAL_kGUARD_EXC_CODE();
    }
    public static @C("unsigned long long") long MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP() {
        return fuse_h_constants_4.MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP();
    }
    public static @C("unsigned long long") long MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT() {
        return fuse_h_constants_4.MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT();
    }
    public static @C("unsigned long long") long MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER() {
        return fuse_h_constants_4.MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER();
    }
    public static @C("unsigned long long") long MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR() {
        return fuse_h_constants_4.MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR();
    }
    public static @C("unsigned long long") long MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA() {
        return fuse_h_constants_4.MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA();
    }
    public static @C("unsigned long long") long MPG_FLAGS_STRICT_REPLY_MASK() {
        return fuse_h_constants_4.MPG_FLAGS_STRICT_REPLY_MASK();
    }
    public static @C("struct ucred*") MemoryAddress NOCRED() {
        return fuse_h_constants_4.NOCRED();
    }
    public static @C("struct ucred*") MemoryAddress FSCRED() {
        return fuse_h_constants_4.FSCRED();
    }
    public static @C("unsigned int") int ATTR_CMN_RETURNED_ATTRS() {
        return fuse_h_constants_4.ATTR_CMN_RETURNED_ATTRS();
    }
    public static @C("unsigned int") int ATTR_CMN_VALIDMASK() {
        return fuse_h_constants_4.ATTR_CMN_VALIDMASK();
    }
    public static @C("unsigned int") int ATTR_VOL_INFO() {
        return fuse_h_constants_4.ATTR_VOL_INFO();
    }
    public static @C("unsigned int") int ATTR_VOL_VALIDMASK() {
        return fuse_h_constants_4.ATTR_VOL_VALIDMASK();
    }
    public static @C("unsigned int") int ATTR_VOL_SETMASK() {
        return fuse_h_constants_4.ATTR_VOL_SETMASK();
    }
    public static @C("unsigned int") int ATTR_FORK_RESERVED() {
        return fuse_h_constants_4.ATTR_FORK_RESERVED();
    }
    public static @C("unsigned int") int ATTR_BULK_REQUIRED() {
        return fuse_h_constants_4.ATTR_BULK_REQUIRED();
    }
    public static @C("unsigned int") int SRCHFS_NEGATEPARAMS() {
        return fuse_h_constants_4.SRCHFS_NEGATEPARAMS();
    }
    public static @C("unsigned int") int SRCHFS_VALIDOPTIONSMASK() {
        return fuse_h_constants_4.SRCHFS_VALIDOPTIONSMASK();
    }
    public static @C("int") int FST_EOF() {
        return fuse_h_constants_4.FST_EOF();
    }
    public static @C("int") int MNAMELEN() {
        return fuse_h_constants_4.MNAMELEN();
    }
    public static @C("unsigned int") int MNT_STRICTATIME() {
        return fuse_h_constants_4.MNT_STRICTATIME();
    }
    public static @C("int") int MNT_UNKNOWNPERMISSIONS() {
        return fuse_h_constants_4.MNT_UNKNOWNPERMISSIONS();
    }
    public static @C("unsigned int") int MNT_VISFLAGMASK() {
        return fuse_h_constants_4.MNT_VISFLAGMASK();
    }
    public static @C("int") int MNT_CMDFLAGS() {
        return fuse_h_constants_4.MNT_CMDFLAGS();
    }
    public static @C("int") int VFS_CTL_STATFS() {
        return fuse_h_constants_4.VFS_CTL_STATFS();
    }
    public static @C("int") int NFS_MAX_FH_SIZE() {
        return fuse_h_constants_4.NFS_MAX_FH_SIZE();
    }
}


