// Generated by jextract

package de.skymatic.fusepanama.macfuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class fuse_h_constants_1 extends fuse_h_constants_0 {

    /* package-private */ fuse_h_constants_1() {}
    static final MemoryLayout fuse_module$so$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_module$so$LAYOUT() { return fuse_module$so$LAYOUT_; }

    static final VarHandle fuse_module$so$VH_ = MemoryHandles.asAddressVarHandle(fuse_module$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("so")));
    static final java.lang.invoke.VarHandle fuse_module$so$VH() { return fuse_module$so$VH_; }

    static final MemoryLayout fuse_module$ctr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_module$ctr$LAYOUT() { return fuse_module$ctr$LAYOUT_; }

    static final VarHandle fuse_module$ctr$VH_ = fuse_module$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ctr"));
    static final java.lang.invoke.VarHandle fuse_module$ctr$VH() { return fuse_module$ctr$VH_; }

    static final FunctionDescriptor fuse_register_module$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_register_module$FUNC() { return fuse_register_module$FUNC_; }

    static final MethodHandle fuse_register_module$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_register_module",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_register_module$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_register_module$MH() { return fuse_register_module$MH_; }

    static final FunctionDescriptor fuse_setup$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_setup$FUNC() { return fuse_setup$FUNC_; }

    static final MethodHandle fuse_setup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_setup",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        fuse_setup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_setup$MH() { return fuse_setup$MH_; }

    static final FunctionDescriptor fuse_teardown$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_teardown$FUNC() { return fuse_teardown$FUNC_; }

    static final MethodHandle fuse_teardown$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_teardown",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_teardown$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_teardown$MH() { return fuse_teardown$MH_; }

    static final FunctionDescriptor fuse_read_cmd$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_read_cmd$FUNC() { return fuse_read_cmd$FUNC_; }

    static final MethodHandle fuse_read_cmd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_read_cmd",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        fuse_read_cmd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_read_cmd$MH() { return fuse_read_cmd$MH_; }

    static final FunctionDescriptor fuse_process_cmd$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_process_cmd$FUNC() { return fuse_process_cmd$FUNC_; }

    static final MethodHandle fuse_process_cmd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_process_cmd",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_process_cmd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_process_cmd$MH() { return fuse_process_cmd$MH_; }

    static final FunctionDescriptor fuse_loop_mt_proc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_loop_mt_proc$FUNC() { return fuse_loop_mt_proc$FUNC_; }

    static final MethodHandle fuse_loop_mt_proc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_loop_mt_proc",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_loop_mt_proc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_loop_mt_proc$MH() { return fuse_loop_mt_proc$MH_; }

    static final FunctionDescriptor fuse_loop_mt_proc$proc$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_loop_mt_proc$proc$FUNC() { return fuse_loop_mt_proc$proc$FUNC_; }

    static final FunctionDescriptor fuse_exited$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_exited$FUNC() { return fuse_exited$FUNC_; }

    static final MethodHandle fuse_exited$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_exited",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_exited$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_exited$MH() { return fuse_exited$MH_; }

    static final FunctionDescriptor fuse_set_getcontext_func$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_set_getcontext_func$FUNC() { return fuse_set_getcontext_func$FUNC_; }

    static final MethodHandle fuse_set_getcontext_func$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_set_getcontext_func",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_set_getcontext_func$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_set_getcontext_func$MH() { return fuse_set_getcontext_func$MH_; }

    static final FunctionDescriptor fuse_set_getcontext_func$func$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor fuse_set_getcontext_func$func$FUNC() { return fuse_set_getcontext_func$func$FUNC_; }

    static final FunctionDescriptor fuse_get_session$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_get_session$FUNC() { return fuse_get_session$FUNC_; }

    static final MethodHandle fuse_get_session$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_get_session",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        fuse_get_session$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_get_session$MH() { return fuse_get_session$MH_; }

    static final int FUSE_VERSION() { return (int)29L; }

    static final int ACCESSPERMS() { return (int)511L; }

    static final int ALLPERMS() { return (int)4095L; }

    static final int DEFFILEMODE() { return (int)438L; }

    static final int SF_SYNTHETIC() { return (int)3221225472L; }

    static final int UTIME_NOW() { return (int)-1L; }

    static final int UTIME_OMIT() { return (int)-2L; }

    static final int FUSE_CAP_ASYNC_READ() { return (int)1L; }

    static final int FUSE_CAP_POSIX_LOCKS() { return (int)2L; }

    static final int FUSE_CAP_ATOMIC_O_TRUNC() { return (int)8L; }

    static final int FUSE_CAP_EXPORT_SUPPORT() { return (int)16L; }

    static final int FUSE_CAP_BIG_WRITES() { return (int)32L; }

    static final int FUSE_CAP_DONT_MASK() { return (int)64L; }

    static final int FUSE_CAP_SPLICE_WRITE() { return (int)128L; }

    static final int FUSE_CAP_SPLICE_MOVE() { return (int)256L; }

    static final int FUSE_CAP_SPLICE_READ() { return (int)512L; }

    static final int FUSE_CAP_FLOCK_LOCKS() { return (int)1024L; }

    static final int FUSE_CAP_IOCTL_DIR() { return (int)2048L; }

    static final int FUSE_CAP_RENAME_SWAP() { return (int)33554432L; }

    static final int FUSE_CAP_RENAME_EXCL() { return (int)67108864L; }

    static final int FUSE_CAP_ALLOCATE() { return (int)134217728L; }

    static final int FUSE_CAP_EXCHANGE_DATA() { return (int)268435456L; }

    static final int FUSE_CAP_CASE_INSENSITIVE() { return (int)536870912L; }

    static final int FUSE_CAP_VOL_RENAME() { return (int)1073741824L; }

    static final int FUSE_CAP_XTIMES() { return (int)-2147483648L; }

    static final int FUSE_IOCTL_COMPAT() { return (int)1L; }

    static final int FUSE_IOCTL_UNRESTRICTED() { return (int)2L; }

    static final int FUSE_IOCTL_RETRY() { return (int)4L; }

    static final int FUSE_IOCTL_DIR() { return (int)16L; }

}

