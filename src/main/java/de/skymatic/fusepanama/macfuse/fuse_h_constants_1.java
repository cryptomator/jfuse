// Generated by jextract

package de.skymatic.fusepanama.macfuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class fuse_h_constants_1 extends fuse_h_constants_0 {

    /* package-private */ fuse_h_constants_1() {}
    static final FunctionDescriptor fuse_opt_parse$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_opt_parse$FUNC() { return fuse_opt_parse$FUNC_; }

    static final MethodHandle fuse_opt_parse$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_opt_parse",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_opt_parse$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_opt_parse$MH() { return fuse_opt_parse$MH_; }

    static final FunctionDescriptor fuse_opt_parse$proc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_opt_parse$proc$FUNC() { return fuse_opt_parse$proc$FUNC_; }

    static final FunctionDescriptor fuse_opt_add_opt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_opt_add_opt$FUNC() { return fuse_opt_add_opt$FUNC_; }

    static final MethodHandle fuse_opt_add_opt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_opt_add_opt",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_opt_add_opt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_opt_add_opt$MH() { return fuse_opt_add_opt$MH_; }

    static final FunctionDescriptor fuse_opt_add_opt_escaped$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_opt_add_opt_escaped$FUNC() { return fuse_opt_add_opt_escaped$FUNC_; }

    static final MethodHandle fuse_opt_add_opt_escaped$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_opt_add_opt_escaped",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_opt_add_opt_escaped$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_opt_add_opt_escaped$MH() { return fuse_opt_add_opt_escaped$MH_; }

    static final FunctionDescriptor fuse_opt_add_arg$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_opt_add_arg$FUNC() { return fuse_opt_add_arg$FUNC_; }

    static final MethodHandle fuse_opt_add_arg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_opt_add_arg",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_opt_add_arg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_opt_add_arg$MH() { return fuse_opt_add_arg$MH_; }

    static final FunctionDescriptor fuse_opt_insert_arg$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_opt_insert_arg$FUNC() { return fuse_opt_insert_arg$FUNC_; }

    static final MethodHandle fuse_opt_insert_arg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_opt_insert_arg",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        fuse_opt_insert_arg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_opt_insert_arg$MH() { return fuse_opt_insert_arg$MH_; }

    static final FunctionDescriptor fuse_opt_free_args$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_opt_free_args$FUNC() { return fuse_opt_free_args$FUNC_; }

    static final MethodHandle fuse_opt_free_args$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_opt_free_args",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_opt_free_args$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_opt_free_args$MH() { return fuse_opt_free_args$MH_; }

    static final FunctionDescriptor fuse_opt_match$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_opt_match$FUNC() { return fuse_opt_match$FUNC_; }

    static final MethodHandle fuse_opt_match$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_opt_match",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_opt_match$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_opt_match$MH() { return fuse_opt_match$MH_; }

    static final MemoryLayout __mbstate_t$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofSequence(128, C_CHAR).withName("__mbstate8"),
        C_LONG_LONG.withName("_mbstateL")
    );
    static final jdk.incubator.foreign.MemoryLayout __mbstate_t$union$LAYOUT() { return __mbstate_t$union$LAYOUT_; }

    static final MemoryLayout __mbstate_t$_mbstateL$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout __mbstate_t$_mbstateL$LAYOUT() { return __mbstate_t$_mbstateL$LAYOUT_; }

    static final VarHandle __mbstate_t$_mbstateL$VH_ = __mbstate_t$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("_mbstateL"));
    static final java.lang.invoke.VarHandle __mbstate_t$_mbstateL$VH() { return __mbstate_t$_mbstateL$VH_; }

    static final MemoryLayout __darwin_mbstate_t$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofSequence(128, C_CHAR).withName("__mbstate8"),
        C_LONG_LONG.withName("_mbstateL")
    );
    static final jdk.incubator.foreign.MemoryLayout __darwin_mbstate_t$union$LAYOUT() { return __darwin_mbstate_t$union$LAYOUT_; }

    static final MemoryLayout __darwin_mbstate_t$_mbstateL$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout __darwin_mbstate_t$_mbstateL$LAYOUT() { return __darwin_mbstate_t$_mbstateL$LAYOUT_; }

    static final VarHandle __darwin_mbstate_t$_mbstateL$VH_ = __darwin_mbstate_t$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("_mbstateL"));
    static final java.lang.invoke.VarHandle __darwin_mbstate_t$_mbstateL$VH() { return __darwin_mbstate_t$_mbstateL$VH_; }

    static final MemoryLayout __darwin_pthread_handler_rec$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("__routine"),
        C_POINTER.withName("__arg"),
        C_POINTER.withName("__next")
    ).withName("__darwin_pthread_handler_rec");
    static final jdk.incubator.foreign.MemoryLayout __darwin_pthread_handler_rec$struct$LAYOUT() { return __darwin_pthread_handler_rec$struct$LAYOUT_; }

    static final FunctionDescriptor __routine$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor __routine$FUNC() { return __routine$FUNC_; }

    static final MemoryLayout __darwin_pthread_handler_rec$__routine$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __darwin_pthread_handler_rec$__routine$LAYOUT() { return __darwin_pthread_handler_rec$__routine$LAYOUT_; }

    static final VarHandle __darwin_pthread_handler_rec$__routine$VH_ = MemoryHandles.asAddressVarHandle(__darwin_pthread_handler_rec$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__routine")));
    static final java.lang.invoke.VarHandle __darwin_pthread_handler_rec$__routine$VH() { return __darwin_pthread_handler_rec$__routine$VH_; }

    static final MemoryLayout __darwin_pthread_handler_rec$__arg$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __darwin_pthread_handler_rec$__arg$LAYOUT() { return __darwin_pthread_handler_rec$__arg$LAYOUT_; }

    static final VarHandle __darwin_pthread_handler_rec$__arg$VH_ = MemoryHandles.asAddressVarHandle(__darwin_pthread_handler_rec$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__arg")));
    static final java.lang.invoke.VarHandle __darwin_pthread_handler_rec$__arg$VH() { return __darwin_pthread_handler_rec$__arg$VH_; }

    static final MemoryLayout __darwin_pthread_handler_rec$__next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __darwin_pthread_handler_rec$__next$LAYOUT() { return __darwin_pthread_handler_rec$__next$LAYOUT_; }

    static final VarHandle __darwin_pthread_handler_rec$__next$VH_ = MemoryHandles.asAddressVarHandle(__darwin_pthread_handler_rec$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__next")));
    static final java.lang.invoke.VarHandle __darwin_pthread_handler_rec$__next$VH() { return __darwin_pthread_handler_rec$__next$VH_; }

    static final MemoryLayout _opaque_pthread_attr_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("__sig"),
        MemoryLayout.ofSequence(56, C_CHAR).withName("__opaque")
    ).withName("_opaque_pthread_attr_t");
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_attr_t$struct$LAYOUT() { return _opaque_pthread_attr_t$struct$LAYOUT_; }

    static final MemoryLayout _opaque_pthread_attr_t$__sig$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_attr_t$__sig$LAYOUT() { return _opaque_pthread_attr_t$__sig$LAYOUT_; }

    static final VarHandle _opaque_pthread_attr_t$__sig$VH_ = _opaque_pthread_attr_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sig"));
    static final java.lang.invoke.VarHandle _opaque_pthread_attr_t$__sig$VH() { return _opaque_pthread_attr_t$__sig$VH_; }

    static final MemoryLayout _opaque_pthread_cond_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("__sig"),
        MemoryLayout.ofSequence(40, C_CHAR).withName("__opaque")
    ).withName("_opaque_pthread_cond_t");
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_cond_t$struct$LAYOUT() { return _opaque_pthread_cond_t$struct$LAYOUT_; }

    static final MemoryLayout _opaque_pthread_cond_t$__sig$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_cond_t$__sig$LAYOUT() { return _opaque_pthread_cond_t$__sig$LAYOUT_; }

    static final VarHandle _opaque_pthread_cond_t$__sig$VH_ = _opaque_pthread_cond_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sig"));
    static final java.lang.invoke.VarHandle _opaque_pthread_cond_t$__sig$VH() { return _opaque_pthread_cond_t$__sig$VH_; }

    static final MemoryLayout _opaque_pthread_condattr_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("__sig"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("__opaque")
    ).withName("_opaque_pthread_condattr_t");
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_condattr_t$struct$LAYOUT() { return _opaque_pthread_condattr_t$struct$LAYOUT_; }

    static final MemoryLayout _opaque_pthread_condattr_t$__sig$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_condattr_t$__sig$LAYOUT() { return _opaque_pthread_condattr_t$__sig$LAYOUT_; }

    static final VarHandle _opaque_pthread_condattr_t$__sig$VH_ = _opaque_pthread_condattr_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sig"));
    static final java.lang.invoke.VarHandle _opaque_pthread_condattr_t$__sig$VH() { return _opaque_pthread_condattr_t$__sig$VH_; }

    static final MemoryLayout _opaque_pthread_mutex_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("__sig"),
        MemoryLayout.ofSequence(56, C_CHAR).withName("__opaque")
    ).withName("_opaque_pthread_mutex_t");
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_mutex_t$struct$LAYOUT() { return _opaque_pthread_mutex_t$struct$LAYOUT_; }

    static final MemoryLayout _opaque_pthread_mutex_t$__sig$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_mutex_t$__sig$LAYOUT() { return _opaque_pthread_mutex_t$__sig$LAYOUT_; }

    static final VarHandle _opaque_pthread_mutex_t$__sig$VH_ = _opaque_pthread_mutex_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sig"));
    static final java.lang.invoke.VarHandle _opaque_pthread_mutex_t$__sig$VH() { return _opaque_pthread_mutex_t$__sig$VH_; }

    static final MemoryLayout _opaque_pthread_mutexattr_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("__sig"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("__opaque")
    ).withName("_opaque_pthread_mutexattr_t");
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_mutexattr_t$struct$LAYOUT() { return _opaque_pthread_mutexattr_t$struct$LAYOUT_; }

    static final MemoryLayout _opaque_pthread_mutexattr_t$__sig$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_mutexattr_t$__sig$LAYOUT() { return _opaque_pthread_mutexattr_t$__sig$LAYOUT_; }

    static final VarHandle _opaque_pthread_mutexattr_t$__sig$VH_ = _opaque_pthread_mutexattr_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sig"));
    static final java.lang.invoke.VarHandle _opaque_pthread_mutexattr_t$__sig$VH() { return _opaque_pthread_mutexattr_t$__sig$VH_; }

    static final MemoryLayout _opaque_pthread_once_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("__sig"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("__opaque")
    ).withName("_opaque_pthread_once_t");
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_once_t$struct$LAYOUT() { return _opaque_pthread_once_t$struct$LAYOUT_; }

    static final MemoryLayout _opaque_pthread_once_t$__sig$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_once_t$__sig$LAYOUT() { return _opaque_pthread_once_t$__sig$LAYOUT_; }

    static final VarHandle _opaque_pthread_once_t$__sig$VH_ = _opaque_pthread_once_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sig"));
    static final java.lang.invoke.VarHandle _opaque_pthread_once_t$__sig$VH() { return _opaque_pthread_once_t$__sig$VH_; }

    static final MemoryLayout _opaque_pthread_rwlock_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("__sig"),
        MemoryLayout.ofSequence(192, C_CHAR).withName("__opaque")
    ).withName("_opaque_pthread_rwlock_t");
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_rwlock_t$struct$LAYOUT() { return _opaque_pthread_rwlock_t$struct$LAYOUT_; }

    static final MemoryLayout _opaque_pthread_rwlock_t$__sig$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_rwlock_t$__sig$LAYOUT() { return _opaque_pthread_rwlock_t$__sig$LAYOUT_; }

    static final VarHandle _opaque_pthread_rwlock_t$__sig$VH_ = _opaque_pthread_rwlock_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sig"));
    static final java.lang.invoke.VarHandle _opaque_pthread_rwlock_t$__sig$VH() { return _opaque_pthread_rwlock_t$__sig$VH_; }

    static final MemoryLayout _opaque_pthread_rwlockattr_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("__sig"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("__opaque")
    ).withName("_opaque_pthread_rwlockattr_t");
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_rwlockattr_t$struct$LAYOUT() { return _opaque_pthread_rwlockattr_t$struct$LAYOUT_; }

    static final MemoryLayout _opaque_pthread_rwlockattr_t$__sig$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_rwlockattr_t$__sig$LAYOUT() { return _opaque_pthread_rwlockattr_t$__sig$LAYOUT_; }

    static final VarHandle _opaque_pthread_rwlockattr_t$__sig$VH_ = _opaque_pthread_rwlockattr_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sig"));
    static final java.lang.invoke.VarHandle _opaque_pthread_rwlockattr_t$__sig$VH() { return _opaque_pthread_rwlockattr_t$__sig$VH_; }

    static final MemoryLayout _opaque_pthread_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("__sig"),
        C_POINTER.withName("__cleanup_stack"),
        MemoryLayout.ofSequence(8176, C_CHAR).withName("__opaque")
    ).withName("_opaque_pthread_t");
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_t$struct$LAYOUT() { return _opaque_pthread_t$struct$LAYOUT_; }

    static final MemoryLayout _opaque_pthread_t$__sig$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_t$__sig$LAYOUT() { return _opaque_pthread_t$__sig$LAYOUT_; }

    static final VarHandle _opaque_pthread_t$__sig$VH_ = _opaque_pthread_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sig"));
    static final java.lang.invoke.VarHandle _opaque_pthread_t$__sig$VH() { return _opaque_pthread_t$__sig$VH_; }

    static final MemoryLayout _opaque_pthread_t$__cleanup_stack$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _opaque_pthread_t$__cleanup_stack$LAYOUT() { return _opaque_pthread_t$__cleanup_stack$LAYOUT_; }

    static final VarHandle _opaque_pthread_t$__cleanup_stack$VH_ = MemoryHandles.asAddressVarHandle(_opaque_pthread_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("__cleanup_stack")));
    static final java.lang.invoke.VarHandle _opaque_pthread_t$__cleanup_stack$VH() { return _opaque_pthread_t$__cleanup_stack$VH_; }

    static final FunctionDescriptor _OSSwapInt16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _OSSwapInt16$FUNC() { return _OSSwapInt16$FUNC_; }

    static final MethodHandle _OSSwapInt16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_OSSwapInt16",
        "(S)S",
        _OSSwapInt16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _OSSwapInt16$MH() { return _OSSwapInt16$MH_; }

    static final FunctionDescriptor _OSSwapInt32$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _OSSwapInt32$FUNC() { return _OSSwapInt32$FUNC_; }

    static final MethodHandle _OSSwapInt32$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_OSSwapInt32",
        "(I)I",
        _OSSwapInt32$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _OSSwapInt32$MH() { return _OSSwapInt32$MH_; }

    static final FunctionDescriptor _OSSwapInt64$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _OSSwapInt64$FUNC() { return _OSSwapInt64$FUNC_; }

    static final MethodHandle _OSSwapInt64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_OSSwapInt64",
        "(J)J",
        _OSSwapInt64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _OSSwapInt64$MH() { return _OSSwapInt64$MH_; }

    static final MemoryLayout fd_set$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(32, C_INT).withName("fds_bits")
    ).withName("fd_set");
    static final jdk.incubator.foreign.MemoryLayout fd_set$struct$LAYOUT() { return fd_set$struct$LAYOUT_; }

    static final FunctionDescriptor __darwin_check_fd_set_overflow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __darwin_check_fd_set_overflow$FUNC() { return __darwin_check_fd_set_overflow$FUNC_; }

    static final MethodHandle __darwin_check_fd_set_overflow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__darwin_check_fd_set_overflow",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        __darwin_check_fd_set_overflow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __darwin_check_fd_set_overflow$MH() { return __darwin_check_fd_set_overflow$MH_; }

    static final FunctionDescriptor __darwin_check_fd_set$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor __darwin_check_fd_set$FUNC() { return __darwin_check_fd_set$FUNC_; }

    static final MethodHandle __darwin_check_fd_set$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__darwin_check_fd_set",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        __darwin_check_fd_set$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __darwin_check_fd_set$MH() { return __darwin_check_fd_set$MH_; }

    static final FunctionDescriptor __darwin_fd_isset$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor __darwin_fd_isset$FUNC() { return __darwin_fd_isset$FUNC_; }

    static final MethodHandle __darwin_fd_isset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__darwin_fd_isset",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        __darwin_fd_isset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __darwin_fd_isset$MH() { return __darwin_fd_isset$MH_; }

    static final FunctionDescriptor __darwin_fd_set$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor __darwin_fd_set$FUNC() { return __darwin_fd_set$FUNC_; }

    static final MethodHandle __darwin_fd_set$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__darwin_fd_set",
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        __darwin_fd_set$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __darwin_fd_set$MH() { return __darwin_fd_set$MH_; }

    static final FunctionDescriptor __darwin_fd_clr$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor __darwin_fd_clr$FUNC() { return __darwin_fd_clr$FUNC_; }

    static final MethodHandle __darwin_fd_clr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__darwin_fd_clr",
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        __darwin_fd_clr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __darwin_fd_clr$MH() { return __darwin_fd_clr$MH_; }

    static final MemoryLayout timespec$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("tv_sec"),
        C_LONG.withName("tv_nsec")
    ).withName("timespec");
    static final jdk.incubator.foreign.MemoryLayout timespec$struct$LAYOUT() { return timespec$struct$LAYOUT_; }

    static final MemoryLayout timespec$tv_sec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout timespec$tv_sec$LAYOUT() { return timespec$tv_sec$LAYOUT_; }

    static final VarHandle timespec$tv_sec$VH_ = timespec$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("tv_sec"));
    static final java.lang.invoke.VarHandle timespec$tv_sec$VH() { return timespec$tv_sec$VH_; }

    static final MemoryLayout timespec$tv_nsec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout timespec$tv_nsec$LAYOUT() { return timespec$tv_nsec$LAYOUT_; }

    static final VarHandle timespec$tv_nsec$VH_ = timespec$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("tv_nsec"));
    static final java.lang.invoke.VarHandle timespec$tv_nsec$VH() { return timespec$tv_nsec$VH_; }

    static final MemoryLayout ostat$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("st_dev"),
        MemoryLayout.ofPaddingBits(48),
        C_LONG_LONG.withName("st_ino"),
        C_SHORT.withName("st_mode"),
        C_SHORT.withName("st_nlink"),
        C_SHORT.withName("st_uid"),
        C_SHORT.withName("st_gid"),
        C_SHORT.withName("st_rdev"),
        MemoryLayout.ofPaddingBits(16),
        C_INT.withName("st_size"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_atimespec"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_mtimespec"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_ctimespec"),
        C_INT.withName("st_blksize"),
        C_INT.withName("st_blocks"),
        C_INT.withName("st_flags"),
        C_INT.withName("st_gen")
    ).withName("ostat");
    static final jdk.incubator.foreign.MemoryLayout ostat$struct$LAYOUT() { return ostat$struct$LAYOUT_; }

    static final MemoryLayout ostat$st_dev$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_dev$LAYOUT() { return ostat$st_dev$LAYOUT_; }

    static final VarHandle ostat$st_dev$VH_ = ostat$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("st_dev"));
    static final java.lang.invoke.VarHandle ostat$st_dev$VH() { return ostat$st_dev$VH_; }

    static final MemoryLayout ostat$st_ino$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_ino$LAYOUT() { return ostat$st_ino$LAYOUT_; }

    static final VarHandle ostat$st_ino$VH_ = ostat$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("st_ino"));
    static final java.lang.invoke.VarHandle ostat$st_ino$VH() { return ostat$st_ino$VH_; }

    static final MemoryLayout ostat$st_mode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_mode$LAYOUT() { return ostat$st_mode$LAYOUT_; }

    static final VarHandle ostat$st_mode$VH_ = ostat$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("st_mode"));
    static final java.lang.invoke.VarHandle ostat$st_mode$VH() { return ostat$st_mode$VH_; }

    static final MemoryLayout ostat$st_nlink$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_nlink$LAYOUT() { return ostat$st_nlink$LAYOUT_; }

    static final VarHandle ostat$st_nlink$VH_ = ostat$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("st_nlink"));
    static final java.lang.invoke.VarHandle ostat$st_nlink$VH() { return ostat$st_nlink$VH_; }

    static final MemoryLayout ostat$st_uid$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_uid$LAYOUT() { return ostat$st_uid$LAYOUT_; }

    static final VarHandle ostat$st_uid$VH_ = ostat$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("st_uid"));
    static final java.lang.invoke.VarHandle ostat$st_uid$VH() { return ostat$st_uid$VH_; }

    static final MemoryLayout ostat$st_gid$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_gid$LAYOUT() { return ostat$st_gid$LAYOUT_; }

    static final VarHandle ostat$st_gid$VH_ = ostat$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("st_gid"));
    static final java.lang.invoke.VarHandle ostat$st_gid$VH() { return ostat$st_gid$VH_; }

    static final MemoryLayout ostat$st_rdev$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_rdev$LAYOUT() { return ostat$st_rdev$LAYOUT_; }

    static final VarHandle ostat$st_rdev$VH_ = ostat$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("st_rdev"));
    static final java.lang.invoke.VarHandle ostat$st_rdev$VH() { return ostat$st_rdev$VH_; }

    static final MemoryLayout ostat$st_size$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_size$LAYOUT() { return ostat$st_size$LAYOUT_; }

    static final VarHandle ostat$st_size$VH_ = ostat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_size"));
    static final java.lang.invoke.VarHandle ostat$st_size$VH() { return ostat$st_size$VH_; }

    static final MemoryLayout ostat$st_blksize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_blksize$LAYOUT() { return ostat$st_blksize$LAYOUT_; }

    static final VarHandle ostat$st_blksize$VH_ = ostat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_blksize"));
    static final java.lang.invoke.VarHandle ostat$st_blksize$VH() { return ostat$st_blksize$VH_; }

    static final MemoryLayout ostat$st_blocks$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_blocks$LAYOUT() { return ostat$st_blocks$LAYOUT_; }

    static final VarHandle ostat$st_blocks$VH_ = ostat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_blocks"));
    static final java.lang.invoke.VarHandle ostat$st_blocks$VH() { return ostat$st_blocks$VH_; }

    static final MemoryLayout ostat$st_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_flags$LAYOUT() { return ostat$st_flags$LAYOUT_; }

    static final VarHandle ostat$st_flags$VH_ = ostat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_flags"));
    static final java.lang.invoke.VarHandle ostat$st_flags$VH() { return ostat$st_flags$VH_; }

    static final MemoryLayout ostat$st_gen$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout ostat$st_gen$LAYOUT() { return ostat$st_gen$LAYOUT_; }

    static final VarHandle ostat$st_gen$VH_ = ostat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_gen"));
    static final java.lang.invoke.VarHandle ostat$st_gen$VH() { return ostat$st_gen$VH_; }

    static final MemoryLayout stat$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("st_dev"),
        C_SHORT.withName("st_mode"),
        C_SHORT.withName("st_nlink"),
        C_LONG_LONG.withName("st_ino"),
        C_INT.withName("st_uid"),
        C_INT.withName("st_gid"),
        C_INT.withName("st_rdev"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_atimespec"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_mtimespec"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_ctimespec"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_birthtimespec"),
        C_LONG_LONG.withName("st_size"),
        C_LONG_LONG.withName("st_blocks"),
        C_INT.withName("st_blksize"),
        C_INT.withName("st_flags"),
        C_INT.withName("st_gen"),
        C_INT.withName("st_lspare"),
        MemoryLayout.ofSequence(2, C_LONG_LONG).withName("st_qspare")
    ).withName("stat");
    static final jdk.incubator.foreign.MemoryLayout stat$struct$LAYOUT() { return stat$struct$LAYOUT_; }

    static final MemoryLayout stat$st_dev$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat$st_dev$LAYOUT() { return stat$st_dev$LAYOUT_; }

    static final VarHandle stat$st_dev$VH_ = stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_dev"));
    static final java.lang.invoke.VarHandle stat$st_dev$VH() { return stat$st_dev$VH_; }

    static final MemoryLayout stat$st_mode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout stat$st_mode$LAYOUT() { return stat$st_mode$LAYOUT_; }

    static final VarHandle stat$st_mode$VH_ = stat$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("st_mode"));
    static final java.lang.invoke.VarHandle stat$st_mode$VH() { return stat$st_mode$VH_; }

    static final MemoryLayout stat$st_nlink$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout stat$st_nlink$LAYOUT() { return stat$st_nlink$LAYOUT_; }

    static final VarHandle stat$st_nlink$VH_ = stat$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("st_nlink"));
    static final java.lang.invoke.VarHandle stat$st_nlink$VH() { return stat$st_nlink$VH_; }

    static final MemoryLayout stat$st_ino$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout stat$st_ino$LAYOUT() { return stat$st_ino$LAYOUT_; }

    static final VarHandle stat$st_ino$VH_ = stat$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("st_ino"));
    static final java.lang.invoke.VarHandle stat$st_ino$VH() { return stat$st_ino$VH_; }

    static final MemoryLayout stat$st_uid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat$st_uid$LAYOUT() { return stat$st_uid$LAYOUT_; }

    static final VarHandle stat$st_uid$VH_ = stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_uid"));
    static final java.lang.invoke.VarHandle stat$st_uid$VH() { return stat$st_uid$VH_; }

    static final MemoryLayout stat$st_gid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat$st_gid$LAYOUT() { return stat$st_gid$LAYOUT_; }

    static final VarHandle stat$st_gid$VH_ = stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_gid"));
    static final java.lang.invoke.VarHandle stat$st_gid$VH() { return stat$st_gid$VH_; }

    static final MemoryLayout stat$st_rdev$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat$st_rdev$LAYOUT() { return stat$st_rdev$LAYOUT_; }

    static final VarHandle stat$st_rdev$VH_ = stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_rdev"));
    static final java.lang.invoke.VarHandle stat$st_rdev$VH() { return stat$st_rdev$VH_; }

    static final MemoryLayout stat$st_size$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout stat$st_size$LAYOUT() { return stat$st_size$LAYOUT_; }

    static final VarHandle stat$st_size$VH_ = stat$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("st_size"));
    static final java.lang.invoke.VarHandle stat$st_size$VH() { return stat$st_size$VH_; }

    static final MemoryLayout stat$st_blocks$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout stat$st_blocks$LAYOUT() { return stat$st_blocks$LAYOUT_; }

    static final VarHandle stat$st_blocks$VH_ = stat$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("st_blocks"));
    static final java.lang.invoke.VarHandle stat$st_blocks$VH() { return stat$st_blocks$VH_; }

    static final MemoryLayout stat$st_blksize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat$st_blksize$LAYOUT() { return stat$st_blksize$LAYOUT_; }

    static final VarHandle stat$st_blksize$VH_ = stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_blksize"));
    static final java.lang.invoke.VarHandle stat$st_blksize$VH() { return stat$st_blksize$VH_; }

    static final MemoryLayout stat$st_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat$st_flags$LAYOUT() { return stat$st_flags$LAYOUT_; }

    static final VarHandle stat$st_flags$VH_ = stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_flags"));
    static final java.lang.invoke.VarHandle stat$st_flags$VH() { return stat$st_flags$VH_; }

    static final MemoryLayout stat$st_gen$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat$st_gen$LAYOUT() { return stat$st_gen$LAYOUT_; }

    static final VarHandle stat$st_gen$VH_ = stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_gen"));
    static final java.lang.invoke.VarHandle stat$st_gen$VH() { return stat$st_gen$VH_; }

    static final MemoryLayout stat$st_lspare$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat$st_lspare$LAYOUT() { return stat$st_lspare$LAYOUT_; }

    static final VarHandle stat$st_lspare$VH_ = stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_lspare"));
    static final java.lang.invoke.VarHandle stat$st_lspare$VH() { return stat$st_lspare$VH_; }

    static final MemoryLayout stat64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("st_dev"),
        C_SHORT.withName("st_mode"),
        C_SHORT.withName("st_nlink"),
        C_LONG_LONG.withName("st_ino"),
        C_INT.withName("st_uid"),
        C_INT.withName("st_gid"),
        C_INT.withName("st_rdev"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_atimespec"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_mtimespec"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_ctimespec"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("st_birthtimespec"),
        C_LONG_LONG.withName("st_size"),
        C_LONG_LONG.withName("st_blocks"),
        C_INT.withName("st_blksize"),
        C_INT.withName("st_flags"),
        C_INT.withName("st_gen"),
        C_INT.withName("st_lspare"),
        MemoryLayout.ofSequence(2, C_LONG_LONG).withName("st_qspare")
    ).withName("stat64");
    static final jdk.incubator.foreign.MemoryLayout stat64$struct$LAYOUT() { return stat64$struct$LAYOUT_; }

    static final MemoryLayout stat64$st_dev$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_dev$LAYOUT() { return stat64$st_dev$LAYOUT_; }

    static final VarHandle stat64$st_dev$VH_ = stat64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_dev"));
    static final java.lang.invoke.VarHandle stat64$st_dev$VH() { return stat64$st_dev$VH_; }

    static final MemoryLayout stat64$st_mode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_mode$LAYOUT() { return stat64$st_mode$LAYOUT_; }

    static final VarHandle stat64$st_mode$VH_ = stat64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("st_mode"));
    static final java.lang.invoke.VarHandle stat64$st_mode$VH() { return stat64$st_mode$VH_; }

    static final MemoryLayout stat64$st_nlink$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_nlink$LAYOUT() { return stat64$st_nlink$LAYOUT_; }

    static final VarHandle stat64$st_nlink$VH_ = stat64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("st_nlink"));
    static final java.lang.invoke.VarHandle stat64$st_nlink$VH() { return stat64$st_nlink$VH_; }

    static final MemoryLayout stat64$st_ino$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_ino$LAYOUT() { return stat64$st_ino$LAYOUT_; }

    static final VarHandle stat64$st_ino$VH_ = stat64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("st_ino"));
    static final java.lang.invoke.VarHandle stat64$st_ino$VH() { return stat64$st_ino$VH_; }

    static final MemoryLayout stat64$st_uid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_uid$LAYOUT() { return stat64$st_uid$LAYOUT_; }

    static final VarHandle stat64$st_uid$VH_ = stat64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_uid"));
    static final java.lang.invoke.VarHandle stat64$st_uid$VH() { return stat64$st_uid$VH_; }

    static final MemoryLayout stat64$st_gid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_gid$LAYOUT() { return stat64$st_gid$LAYOUT_; }

    static final VarHandle stat64$st_gid$VH_ = stat64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_gid"));
    static final java.lang.invoke.VarHandle stat64$st_gid$VH() { return stat64$st_gid$VH_; }

    static final MemoryLayout stat64$st_rdev$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_rdev$LAYOUT() { return stat64$st_rdev$LAYOUT_; }

    static final VarHandle stat64$st_rdev$VH_ = stat64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_rdev"));
    static final java.lang.invoke.VarHandle stat64$st_rdev$VH() { return stat64$st_rdev$VH_; }

    static final MemoryLayout stat64$st_size$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_size$LAYOUT() { return stat64$st_size$LAYOUT_; }

    static final VarHandle stat64$st_size$VH_ = stat64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("st_size"));
    static final java.lang.invoke.VarHandle stat64$st_size$VH() { return stat64$st_size$VH_; }

    static final MemoryLayout stat64$st_blocks$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_blocks$LAYOUT() { return stat64$st_blocks$LAYOUT_; }

    static final VarHandle stat64$st_blocks$VH_ = stat64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("st_blocks"));
    static final java.lang.invoke.VarHandle stat64$st_blocks$VH() { return stat64$st_blocks$VH_; }

    static final MemoryLayout stat64$st_blksize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_blksize$LAYOUT() { return stat64$st_blksize$LAYOUT_; }

    static final VarHandle stat64$st_blksize$VH_ = stat64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_blksize"));
    static final java.lang.invoke.VarHandle stat64$st_blksize$VH() { return stat64$st_blksize$VH_; }

    static final MemoryLayout stat64$st_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_flags$LAYOUT() { return stat64$st_flags$LAYOUT_; }

    static final VarHandle stat64$st_flags$VH_ = stat64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_flags"));
    static final java.lang.invoke.VarHandle stat64$st_flags$VH() { return stat64$st_flags$VH_; }

    static final MemoryLayout stat64$st_gen$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_gen$LAYOUT() { return stat64$st_gen$LAYOUT_; }

    static final VarHandle stat64$st_gen$VH_ = stat64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_gen"));
    static final java.lang.invoke.VarHandle stat64$st_gen$VH() { return stat64$st_gen$VH_; }

    static final MemoryLayout stat64$st_lspare$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout stat64$st_lspare$LAYOUT() { return stat64$st_lspare$LAYOUT_; }

    static final VarHandle stat64$st_lspare$VH_ = stat64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("st_lspare"));
    static final java.lang.invoke.VarHandle stat64$st_lspare$VH() { return stat64$st_lspare$VH_; }

    static final FunctionDescriptor chmod$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor chmod$FUNC() { return chmod$FUNC_; }

    static final MethodHandle chmod$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "chmod",
        "(Ljdk/incubator/foreign/MemoryAddress;S)I",
        chmod$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle chmod$MH() { return chmod$MH_; }

    static final FunctionDescriptor fchmod$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fchmod$FUNC() { return fchmod$FUNC_; }

    static final MethodHandle fchmod$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fchmod",
        "(IS)I",
        fchmod$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fchmod$MH() { return fchmod$MH_; }

    static final FunctionDescriptor fstat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fstat$FUNC() { return fstat$FUNC_; }

    static final MethodHandle fstat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fstat",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        fstat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fstat$MH() { return fstat$MH_; }

    static final FunctionDescriptor lstat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor lstat$FUNC() { return lstat$FUNC_; }

    static final MethodHandle lstat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        lstat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle lstat$MH() { return lstat$MH_; }

    static final FunctionDescriptor mkdir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor mkdir$FUNC() { return mkdir$FUNC_; }

    static final MethodHandle mkdir$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "mkdir",
        "(Ljdk/incubator/foreign/MemoryAddress;S)I",
        mkdir$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle mkdir$MH() { return mkdir$MH_; }

    static final FunctionDescriptor mkfifo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor mkfifo$FUNC() { return mkfifo$FUNC_; }

    static final MethodHandle mkfifo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "mkfifo",
        "(Ljdk/incubator/foreign/MemoryAddress;S)I",
        mkfifo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle mkfifo$MH() { return mkfifo$MH_; }

    static final FunctionDescriptor stat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor stat$FUNC() { return stat$FUNC_; }

    static final MethodHandle stat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "stat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        stat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle stat$MH() { return stat$MH_; }

    static final FunctionDescriptor mknod$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor mknod$FUNC() { return mknod$FUNC_; }

    static final MethodHandle mknod$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "mknod",
        "(Ljdk/incubator/foreign/MemoryAddress;SI)I",
        mknod$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle mknod$MH() { return mknod$MH_; }

    static final FunctionDescriptor umask$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor umask$FUNC() { return umask$FUNC_; }

    static final MethodHandle umask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "umask",
        "(S)S",
        umask$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle umask$MH() { return umask$MH_; }

    static final FunctionDescriptor fchmodat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_SHORT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fchmodat$FUNC() { return fchmodat$FUNC_; }

    static final MethodHandle fchmodat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fchmodat",
        "(ILjdk/incubator/foreign/MemoryAddress;SI)I",
        fchmodat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fchmodat$MH() { return fchmodat$MH_; }

    static final FunctionDescriptor fstatat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fstatat$FUNC() { return fstatat$FUNC_; }

    static final MethodHandle fstatat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fstatat",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        fstatat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fstatat$MH() { return fstatat$MH_; }

    static final FunctionDescriptor mkdirat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor mkdirat$FUNC() { return mkdirat$FUNC_; }

    static final MethodHandle mkdirat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "mkdirat",
        "(ILjdk/incubator/foreign/MemoryAddress;S)I",
        mkdirat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle mkdirat$MH() { return mkdirat$MH_; }

    static final FunctionDescriptor futimens$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor futimens$FUNC() { return futimens$FUNC_; }

    static final MethodHandle futimens$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "futimens",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        futimens$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle futimens$MH() { return futimens$MH_; }

    static final FunctionDescriptor utimensat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor utimensat$FUNC() { return utimensat$FUNC_; }

    static final MethodHandle utimensat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "utimensat",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        utimensat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle utimensat$MH() { return utimensat$MH_; }

    static final FunctionDescriptor chflags$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor chflags$FUNC() { return chflags$FUNC_; }

    static final MethodHandle chflags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "chflags",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        chflags$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle chflags$MH() { return chflags$MH_; }

    static final FunctionDescriptor chmodx_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor chmodx_np$FUNC() { return chmodx_np$FUNC_; }

    static final MethodHandle chmodx_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "chmodx_np",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        chmodx_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle chmodx_np$MH() { return chmodx_np$MH_; }

    static final FunctionDescriptor fchflags$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fchflags$FUNC() { return fchflags$FUNC_; }

    static final MethodHandle fchflags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fchflags",
        "(II)I",
        fchflags$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fchflags$MH() { return fchflags$MH_; }

    static final FunctionDescriptor fchmodx_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fchmodx_np$FUNC() { return fchmodx_np$FUNC_; }

    static final MethodHandle fchmodx_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fchmodx_np",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        fchmodx_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fchmodx_np$MH() { return fchmodx_np$MH_; }

    static final FunctionDescriptor fstatx_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fstatx_np$FUNC() { return fstatx_np$FUNC_; }

    static final MethodHandle fstatx_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fstatx_np",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fstatx_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fstatx_np$MH() { return fstatx_np$MH_; }

    static final FunctionDescriptor lchflags$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor lchflags$FUNC() { return lchflags$FUNC_; }

    static final MethodHandle lchflags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lchflags",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        lchflags$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle lchflags$MH() { return lchflags$MH_; }

    static final FunctionDescriptor lchmod$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor lchmod$FUNC() { return lchmod$FUNC_; }

    static final MethodHandle lchmod$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lchmod",
        "(Ljdk/incubator/foreign/MemoryAddress;S)I",
        lchmod$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle lchmod$MH() { return lchmod$MH_; }

    static final FunctionDescriptor lstatx_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor lstatx_np$FUNC() { return lstatx_np$FUNC_; }

    static final MethodHandle lstatx_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstatx_np",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        lstatx_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle lstatx_np$MH() { return lstatx_np$MH_; }

    static final FunctionDescriptor mkdirx_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor mkdirx_np$FUNC() { return mkdirx_np$FUNC_; }

    static final MethodHandle mkdirx_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "mkdirx_np",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        mkdirx_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle mkdirx_np$MH() { return mkdirx_np$MH_; }

    static final FunctionDescriptor mkfifox_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor mkfifox_np$FUNC() { return mkfifox_np$FUNC_; }

    static final MethodHandle mkfifox_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "mkfifox_np",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        mkfifox_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle mkfifox_np$MH() { return mkfifox_np$MH_; }

    static final FunctionDescriptor statx_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor statx_np$FUNC() { return statx_np$FUNC_; }

    static final MethodHandle statx_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "statx_np",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        statx_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle statx_np$MH() { return statx_np$MH_; }

    static final FunctionDescriptor umaskx_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor umaskx_np$FUNC() { return umaskx_np$FUNC_; }

    static final MethodHandle umaskx_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "umaskx_np",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        umaskx_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle umaskx_np$MH() { return umaskx_np$MH_; }

    static final FunctionDescriptor fstatx64_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fstatx64_np$FUNC() { return fstatx64_np$FUNC_; }

    static final MethodHandle fstatx64_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fstatx64_np",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fstatx64_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fstatx64_np$MH() { return fstatx64_np$MH_; }

    static final FunctionDescriptor lstatx64_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor lstatx64_np$FUNC() { return lstatx64_np$FUNC_; }

    static final MethodHandle lstatx64_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstatx64_np",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        lstatx64_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle lstatx64_np$MH() { return lstatx64_np$MH_; }

    static final FunctionDescriptor statx64_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor statx64_np$FUNC() { return statx64_np$FUNC_; }

    static final MethodHandle statx64_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "statx64_np",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        statx64_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle statx64_np$MH() { return statx64_np$MH_; }

    static final FunctionDescriptor fstat64$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fstat64$FUNC() { return fstat64$FUNC_; }

    static final MethodHandle fstat64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fstat64",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        fstat64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fstat64$MH() { return fstat64$MH_; }

    static final FunctionDescriptor lstat64$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor lstat64$FUNC() { return lstat64$FUNC_; }

    static final MethodHandle lstat64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstat64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        lstat64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle lstat64$MH() { return lstat64$MH_; }

    static final FunctionDescriptor stat64$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor stat64$FUNC() { return stat64$FUNC_; }

    static final MethodHandle stat64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "stat64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        stat64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle stat64$MH() { return stat64$MH_; }

    static final MemoryLayout setattr_x$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("valid"),
        C_SHORT.withName("mode"),
        MemoryLayout.ofPaddingBits(16),
        C_INT.withName("uid"),
        C_INT.withName("gid"),
        C_LONG_LONG.withName("size"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("acctime"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("modtime"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("crtime"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("chgtime"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("bkuptime"),
        C_INT.withName("flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("setattr_x");
    static final jdk.incubator.foreign.MemoryLayout setattr_x$struct$LAYOUT() { return setattr_x$struct$LAYOUT_; }

    static final MemoryLayout setattr_x$valid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout setattr_x$valid$LAYOUT() { return setattr_x$valid$LAYOUT_; }

    static final VarHandle setattr_x$valid$VH_ = setattr_x$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("valid"));
    static final java.lang.invoke.VarHandle setattr_x$valid$VH() { return setattr_x$valid$VH_; }

    static final MemoryLayout setattr_x$mode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout setattr_x$mode$LAYOUT() { return setattr_x$mode$LAYOUT_; }

    static final VarHandle setattr_x$mode$VH_ = setattr_x$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("mode"));
    static final java.lang.invoke.VarHandle setattr_x$mode$VH() { return setattr_x$mode$VH_; }

    static final MemoryLayout setattr_x$uid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout setattr_x$uid$LAYOUT() { return setattr_x$uid$LAYOUT_; }

    static final VarHandle setattr_x$uid$VH_ = setattr_x$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("uid"));
    static final java.lang.invoke.VarHandle setattr_x$uid$VH() { return setattr_x$uid$VH_; }

    static final MemoryLayout setattr_x$gid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout setattr_x$gid$LAYOUT() { return setattr_x$gid$LAYOUT_; }

    static final VarHandle setattr_x$gid$VH_ = setattr_x$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("gid"));
    static final java.lang.invoke.VarHandle setattr_x$gid$VH() { return setattr_x$gid$VH_; }

    static final MemoryLayout setattr_x$size$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout setattr_x$size$LAYOUT() { return setattr_x$size$LAYOUT_; }

    static final VarHandle setattr_x$size$VH_ = setattr_x$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("size"));
    static final java.lang.invoke.VarHandle setattr_x$size$VH() { return setattr_x$size$VH_; }

    static final MemoryLayout setattr_x$flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout setattr_x$flags$LAYOUT() { return setattr_x$flags$LAYOUT_; }

    static final VarHandle setattr_x$flags$VH_ = setattr_x$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("flags"));
    static final java.lang.invoke.VarHandle setattr_x$flags$VH() { return setattr_x$flags$VH_; }

    static final MemoryLayout fuse_file_info$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("flags"),
        MemoryLayout.ofPaddingBits(32),
        C_LONG.withName("fh_old"),
        C_INT.withName("writepage"),
        C_INT,
        C_LONG_LONG.withName("fh"),
        C_LONG_LONG.withName("lock_owner")
    ).withName("fuse_file_info");
    static final jdk.incubator.foreign.MemoryLayout fuse_file_info$struct$LAYOUT() { return fuse_file_info$struct$LAYOUT_; }

    static final MemoryLayout fuse_file_info$flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_file_info$flags$LAYOUT() { return fuse_file_info$flags$LAYOUT_; }

    static final VarHandle fuse_file_info$flags$VH_ = fuse_file_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("flags"));
    static final java.lang.invoke.VarHandle fuse_file_info$flags$VH() { return fuse_file_info$flags$VH_; }

    static final MemoryLayout fuse_file_info$fh_old$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fuse_file_info$fh_old$LAYOUT() { return fuse_file_info$fh_old$LAYOUT_; }

    static final VarHandle fuse_file_info$fh_old$VH_ = fuse_file_info$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fh_old"));
    static final java.lang.invoke.VarHandle fuse_file_info$fh_old$VH() { return fuse_file_info$fh_old$VH_; }

    static final MemoryLayout fuse_file_info$writepage$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_file_info$writepage$LAYOUT() { return fuse_file_info$writepage$LAYOUT_; }

    static final VarHandle fuse_file_info$writepage$VH_ = fuse_file_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("writepage"));
    static final java.lang.invoke.VarHandle fuse_file_info$writepage$VH() { return fuse_file_info$writepage$VH_; }

    static final MemoryLayout fuse_file_info$fh$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fuse_file_info$fh$LAYOUT() { return fuse_file_info$fh$LAYOUT_; }

    static final VarHandle fuse_file_info$fh$VH_ = fuse_file_info$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fh"));
    static final java.lang.invoke.VarHandle fuse_file_info$fh$VH() { return fuse_file_info$fh$VH_; }

    static final MemoryLayout fuse_file_info$lock_owner$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fuse_file_info$lock_owner$LAYOUT() { return fuse_file_info$lock_owner$LAYOUT_; }

    static final VarHandle fuse_file_info$lock_owner$VH_ = fuse_file_info$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lock_owner"));
    static final java.lang.invoke.VarHandle fuse_file_info$lock_owner$VH() { return fuse_file_info$lock_owner$VH_; }

    static final MemoryLayout fuse_conn_info$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("proto_major"),
        C_INT.withName("proto_minor"),
        C_INT.withName("async_read"),
        C_INT.withName("max_write"),
        C_INT.withName("max_readahead"),
        MemoryLayout.ofStruct(
            C_INT
        ).withName("enable"),
        C_INT.withName("capable"),
        C_INT.withName("want"),
        C_INT.withName("max_background"),
        C_INT.withName("congestion_threshold"),
        MemoryLayout.ofSequence(22, C_INT).withName("reserved")
    ).withName("fuse_conn_info");
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$struct$LAYOUT() { return fuse_conn_info$struct$LAYOUT_; }

    static final MemoryLayout fuse_conn_info$proto_major$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$proto_major$LAYOUT() { return fuse_conn_info$proto_major$LAYOUT_; }

    static final VarHandle fuse_conn_info$proto_major$VH_ = fuse_conn_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("proto_major"));
    static final java.lang.invoke.VarHandle fuse_conn_info$proto_major$VH() { return fuse_conn_info$proto_major$VH_; }

    static final MemoryLayout fuse_conn_info$proto_minor$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$proto_minor$LAYOUT() { return fuse_conn_info$proto_minor$LAYOUT_; }

    static final VarHandle fuse_conn_info$proto_minor$VH_ = fuse_conn_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("proto_minor"));
    static final java.lang.invoke.VarHandle fuse_conn_info$proto_minor$VH() { return fuse_conn_info$proto_minor$VH_; }

    static final MemoryLayout fuse_conn_info$async_read$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$async_read$LAYOUT() { return fuse_conn_info$async_read$LAYOUT_; }

    static final VarHandle fuse_conn_info$async_read$VH_ = fuse_conn_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("async_read"));
    static final java.lang.invoke.VarHandle fuse_conn_info$async_read$VH() { return fuse_conn_info$async_read$VH_; }

    static final MemoryLayout fuse_conn_info$max_write$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$max_write$LAYOUT() { return fuse_conn_info$max_write$LAYOUT_; }

    static final VarHandle fuse_conn_info$max_write$VH_ = fuse_conn_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("max_write"));
    static final java.lang.invoke.VarHandle fuse_conn_info$max_write$VH() { return fuse_conn_info$max_write$VH_; }

    static final MemoryLayout fuse_conn_info$max_readahead$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$max_readahead$LAYOUT() { return fuse_conn_info$max_readahead$LAYOUT_; }

    static final VarHandle fuse_conn_info$max_readahead$VH_ = fuse_conn_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("max_readahead"));
    static final java.lang.invoke.VarHandle fuse_conn_info$max_readahead$VH() { return fuse_conn_info$max_readahead$VH_; }

    static final MemoryLayout fuse_conn_info$enable$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT
    );
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$enable$struct$LAYOUT() { return fuse_conn_info$enable$struct$LAYOUT_; }

    static final MemoryLayout fuse_conn_info$capable$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$capable$LAYOUT() { return fuse_conn_info$capable$LAYOUT_; }

    static final VarHandle fuse_conn_info$capable$VH_ = fuse_conn_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("capable"));
    static final java.lang.invoke.VarHandle fuse_conn_info$capable$VH() { return fuse_conn_info$capable$VH_; }

    static final MemoryLayout fuse_conn_info$want$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$want$LAYOUT() { return fuse_conn_info$want$LAYOUT_; }

    static final VarHandle fuse_conn_info$want$VH_ = fuse_conn_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("want"));
    static final java.lang.invoke.VarHandle fuse_conn_info$want$VH() { return fuse_conn_info$want$VH_; }

    static final MemoryLayout fuse_conn_info$max_background$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$max_background$LAYOUT() { return fuse_conn_info$max_background$LAYOUT_; }

    static final VarHandle fuse_conn_info$max_background$VH_ = fuse_conn_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("max_background"));
    static final java.lang.invoke.VarHandle fuse_conn_info$max_background$VH() { return fuse_conn_info$max_background$VH_; }

    static final MemoryLayout fuse_conn_info$congestion_threshold$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_conn_info$congestion_threshold$LAYOUT() { return fuse_conn_info$congestion_threshold$LAYOUT_; }

    static final VarHandle fuse_conn_info$congestion_threshold$VH_ = fuse_conn_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("congestion_threshold"));
    static final java.lang.invoke.VarHandle fuse_conn_info$congestion_threshold$VH() { return fuse_conn_info$congestion_threshold$VH_; }

    static final FunctionDescriptor fuse_mount$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_mount$FUNC() { return fuse_mount$FUNC_; }

    static final MethodHandle fuse_mount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_mount",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        fuse_mount$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_mount$MH() { return fuse_mount$MH_; }

    static final FunctionDescriptor fuse_unmount$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_unmount$FUNC() { return fuse_unmount$FUNC_; }

    static final MethodHandle fuse_unmount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_unmount",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_unmount$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_unmount$MH() { return fuse_unmount$MH_; }

    static final FunctionDescriptor fuse_parse_cmdline$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_parse_cmdline$FUNC() { return fuse_parse_cmdline$FUNC_; }

    static final MethodHandle fuse_parse_cmdline$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_parse_cmdline",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_parse_cmdline$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_parse_cmdline$MH() { return fuse_parse_cmdline$MH_; }

    static final FunctionDescriptor fuse_daemonize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_daemonize$FUNC() { return fuse_daemonize$FUNC_; }

    static final MethodHandle fuse_daemonize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_daemonize",
        "(I)I",
        fuse_daemonize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_daemonize$MH() { return fuse_daemonize$MH_; }

    static final FunctionDescriptor fuse_version$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor fuse_version$FUNC() { return fuse_version$FUNC_; }

    static final MethodHandle fuse_version$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_version",
        "()I",
        fuse_version$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_version$MH() { return fuse_version$MH_; }

    static final FunctionDescriptor fuse_pollhandle_destroy$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_pollhandle_destroy$FUNC() { return fuse_pollhandle_destroy$FUNC_; }

    static final MethodHandle fuse_pollhandle_destroy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_pollhandle_destroy",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_pollhandle_destroy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_pollhandle_destroy$MH() { return fuse_pollhandle_destroy$MH_; }

    static final int FUSE_BUF_IS_FD() { return (int)2L; }

    static final int FUSE_BUF_FD_SEEK() { return (int)4L; }

    static final int FUSE_BUF_FD_RETRY() { return (int)8L; }

    static final int FUSE_BUF_NO_SPLICE() { return (int)2L; }

    static final int FUSE_BUF_FORCE_SPLICE() { return (int)4L; }

    static final int FUSE_BUF_SPLICE_MOVE() { return (int)8L; }

    static final int FUSE_BUF_SPLICE_NONBLOCK() { return (int)16L; }

    static final MemoryLayout fuse_buf$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("size"),
        C_INT.withName("flags"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("mem"),
        C_INT.withName("fd"),
        MemoryLayout.ofPaddingBits(32),
        C_LONG_LONG.withName("pos")
    ).withName("fuse_buf");
    static final jdk.incubator.foreign.MemoryLayout fuse_buf$struct$LAYOUT() { return fuse_buf$struct$LAYOUT_; }

    static final MemoryLayout fuse_buf$size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fuse_buf$size$LAYOUT() { return fuse_buf$size$LAYOUT_; }

    static final VarHandle fuse_buf$size$VH_ = fuse_buf$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("size"));
    static final java.lang.invoke.VarHandle fuse_buf$size$VH() { return fuse_buf$size$VH_; }

    static final MemoryLayout fuse_buf$flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_buf$flags$LAYOUT() { return fuse_buf$flags$LAYOUT_; }

    static final VarHandle fuse_buf$flags$VH_ = fuse_buf$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("flags"));
    static final java.lang.invoke.VarHandle fuse_buf$flags$VH() { return fuse_buf$flags$VH_; }

    static final MemoryLayout fuse_buf$mem$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_buf$mem$LAYOUT() { return fuse_buf$mem$LAYOUT_; }

    static final VarHandle fuse_buf$mem$VH_ = MemoryHandles.asAddressVarHandle(fuse_buf$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("mem")));
    static final java.lang.invoke.VarHandle fuse_buf$mem$VH() { return fuse_buf$mem$VH_; }

    static final MemoryLayout fuse_buf$fd$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fuse_buf$fd$LAYOUT() { return fuse_buf$fd$LAYOUT_; }

    static final VarHandle fuse_buf$fd$VH_ = fuse_buf$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fd"));
    static final java.lang.invoke.VarHandle fuse_buf$fd$VH() { return fuse_buf$fd$VH_; }

    static final MemoryLayout fuse_buf$pos$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fuse_buf$pos$LAYOUT() { return fuse_buf$pos$LAYOUT_; }

    static final VarHandle fuse_buf$pos$VH_ = fuse_buf$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pos"));
    static final java.lang.invoke.VarHandle fuse_buf$pos$VH() { return fuse_buf$pos$VH_; }

    static final MemoryLayout fuse_bufvec$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("count"),
        C_LONG.withName("idx"),
        C_LONG.withName("off"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("size"),
            C_INT.withName("flags"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("mem"),
            C_INT.withName("fd"),
            MemoryLayout.ofPaddingBits(32),
            C_LONG_LONG.withName("pos")
        ).withName("fuse_buf")).withName("buf")
    ).withName("fuse_bufvec");
    static final jdk.incubator.foreign.MemoryLayout fuse_bufvec$struct$LAYOUT() { return fuse_bufvec$struct$LAYOUT_; }

    static final MemoryLayout fuse_bufvec$count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fuse_bufvec$count$LAYOUT() { return fuse_bufvec$count$LAYOUT_; }

    static final VarHandle fuse_bufvec$count$VH_ = fuse_bufvec$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("count"));
    static final java.lang.invoke.VarHandle fuse_bufvec$count$VH() { return fuse_bufvec$count$VH_; }

    static final MemoryLayout fuse_bufvec$idx$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fuse_bufvec$idx$LAYOUT() { return fuse_bufvec$idx$LAYOUT_; }

    static final VarHandle fuse_bufvec$idx$VH_ = fuse_bufvec$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("idx"));
    static final java.lang.invoke.VarHandle fuse_bufvec$idx$VH() { return fuse_bufvec$idx$VH_; }

    static final MemoryLayout fuse_bufvec$off$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fuse_bufvec$off$LAYOUT() { return fuse_bufvec$off$LAYOUT_; }

    static final VarHandle fuse_bufvec$off$VH_ = fuse_bufvec$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("off"));
    static final java.lang.invoke.VarHandle fuse_bufvec$off$VH() { return fuse_bufvec$off$VH_; }

    static final FunctionDescriptor fuse_buf_size$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_buf_size$FUNC() { return fuse_buf_size$FUNC_; }

    static final MethodHandle fuse_buf_size$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_buf_size",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        fuse_buf_size$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_buf_size$MH() { return fuse_buf_size$MH_; }

    static final FunctionDescriptor fuse_buf_copy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_buf_copy$FUNC() { return fuse_buf_copy$FUNC_; }

    static final MethodHandle fuse_buf_copy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_buf_copy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)J",
        fuse_buf_copy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_buf_copy$MH() { return fuse_buf_copy$MH_; }

    static final FunctionDescriptor fuse_set_signal_handlers$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_set_signal_handlers$FUNC() { return fuse_set_signal_handlers$FUNC_; }

    static final MethodHandle fuse_set_signal_handlers$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_set_signal_handlers",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        fuse_set_signal_handlers$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_set_signal_handlers$MH() { return fuse_set_signal_handlers$MH_; }

    static final FunctionDescriptor fuse_remove_signal_handlers$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fuse_remove_signal_handlers$FUNC() { return fuse_remove_signal_handlers$FUNC_; }

    static final MethodHandle fuse_remove_signal_handlers$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fuse_remove_signal_handlers",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        fuse_remove_signal_handlers$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fuse_remove_signal_handlers$MH() { return fuse_remove_signal_handlers$MH_; }

    static final MemoryLayout flock$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("l_start"),
        C_LONG_LONG.withName("l_len"),
        C_INT.withName("l_pid"),
        C_SHORT.withName("l_type"),
        C_SHORT.withName("l_whence")
    ).withName("flock");
    static final jdk.incubator.foreign.MemoryLayout flock$struct$LAYOUT() { return flock$struct$LAYOUT_; }

    static final MemoryLayout flock$l_start$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout flock$l_start$LAYOUT() { return flock$l_start$LAYOUT_; }

    static final VarHandle flock$l_start$VH_ = flock$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("l_start"));
    static final java.lang.invoke.VarHandle flock$l_start$VH() { return flock$l_start$VH_; }

    static final MemoryLayout flock$l_len$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout flock$l_len$LAYOUT() { return flock$l_len$LAYOUT_; }

    static final VarHandle flock$l_len$VH_ = flock$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("l_len"));
    static final java.lang.invoke.VarHandle flock$l_len$VH() { return flock$l_len$VH_; }

    static final MemoryLayout flock$l_pid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout flock$l_pid$LAYOUT() { return flock$l_pid$LAYOUT_; }

    static final VarHandle flock$l_pid$VH_ = flock$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("l_pid"));
    static final java.lang.invoke.VarHandle flock$l_pid$VH() { return flock$l_pid$VH_; }

    static final MemoryLayout flock$l_type$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout flock$l_type$LAYOUT() { return flock$l_type$LAYOUT_; }

    static final VarHandle flock$l_type$VH_ = flock$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("l_type"));
    static final java.lang.invoke.VarHandle flock$l_type$VH() { return flock$l_type$VH_; }

    static final MemoryLayout flock$l_whence$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout flock$l_whence$LAYOUT() { return flock$l_whence$LAYOUT_; }

    static final VarHandle flock$l_whence$VH_ = flock$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("l_whence"));
    static final java.lang.invoke.VarHandle flock$l_whence$VH() { return flock$l_whence$VH_; }

    static final MemoryLayout flocktimeout$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG_LONG.withName("l_start"),
            C_LONG_LONG.withName("l_len"),
            C_INT.withName("l_pid"),
            C_SHORT.withName("l_type"),
            C_SHORT.withName("l_whence")
        ).withName("fl"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("timeout")
    ).withName("flocktimeout");
    static final jdk.incubator.foreign.MemoryLayout flocktimeout$struct$LAYOUT() { return flocktimeout$struct$LAYOUT_; }

    static final MemoryLayout radvisory$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("ra_offset"),
        C_INT.withName("ra_count"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("radvisory");
    static final jdk.incubator.foreign.MemoryLayout radvisory$struct$LAYOUT() { return radvisory$struct$LAYOUT_; }

    static final MemoryLayout radvisory$ra_offset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout radvisory$ra_offset$LAYOUT() { return radvisory$ra_offset$LAYOUT_; }

    static final VarHandle radvisory$ra_offset$VH_ = radvisory$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ra_offset"));
    static final java.lang.invoke.VarHandle radvisory$ra_offset$VH() { return radvisory$ra_offset$VH_; }

    static final MemoryLayout radvisory$ra_count$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout radvisory$ra_count$LAYOUT() { return radvisory$ra_count$LAYOUT_; }

    static final VarHandle radvisory$ra_count$VH_ = radvisory$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ra_count"));
    static final java.lang.invoke.VarHandle radvisory$ra_count$VH() { return radvisory$ra_count$VH_; }

    static final MemoryLayout fsignatures$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("fs_file_start"),
        C_POINTER.withName("fs_blob_start"),
        C_LONG.withName("fs_blob_size"),
        C_LONG.withName("fs_fsignatures_size"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("fs_cdhash"),
        C_INT.withName("fs_hash_type")
    ).withName("fsignatures");
    static final jdk.incubator.foreign.MemoryLayout fsignatures$struct$LAYOUT() { return fsignatures$struct$LAYOUT_; }

    static final MemoryLayout fsignatures$fs_file_start$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fsignatures$fs_file_start$LAYOUT() { return fsignatures$fs_file_start$LAYOUT_; }

    static final VarHandle fsignatures$fs_file_start$VH_ = fsignatures$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fs_file_start"));
    static final java.lang.invoke.VarHandle fsignatures$fs_file_start$VH() { return fsignatures$fs_file_start$VH_; }

    static final MemoryLayout fsignatures$fs_blob_start$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fsignatures$fs_blob_start$LAYOUT() { return fsignatures$fs_blob_start$LAYOUT_; }

    static final VarHandle fsignatures$fs_blob_start$VH_ = MemoryHandles.asAddressVarHandle(fsignatures$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fs_blob_start")));
    static final java.lang.invoke.VarHandle fsignatures$fs_blob_start$VH() { return fsignatures$fs_blob_start$VH_; }

    static final MemoryLayout fsignatures$fs_blob_size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fsignatures$fs_blob_size$LAYOUT() { return fsignatures$fs_blob_size$LAYOUT_; }

    static final VarHandle fsignatures$fs_blob_size$VH_ = fsignatures$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fs_blob_size"));
    static final java.lang.invoke.VarHandle fsignatures$fs_blob_size$VH() { return fsignatures$fs_blob_size$VH_; }

    static final MemoryLayout fsignatures$fs_fsignatures_size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fsignatures$fs_fsignatures_size$LAYOUT() { return fsignatures$fs_fsignatures_size$LAYOUT_; }

    static final VarHandle fsignatures$fs_fsignatures_size$VH_ = fsignatures$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fs_fsignatures_size"));
    static final java.lang.invoke.VarHandle fsignatures$fs_fsignatures_size$VH() { return fsignatures$fs_fsignatures_size$VH_; }

    static final MemoryLayout fsignatures$fs_hash_type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fsignatures$fs_hash_type$LAYOUT() { return fsignatures$fs_hash_type$LAYOUT_; }

    static final VarHandle fsignatures$fs_hash_type$VH_ = fsignatures$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fs_hash_type"));
    static final java.lang.invoke.VarHandle fsignatures$fs_hash_type$VH() { return fsignatures$fs_hash_type$VH_; }

    static final MemoryLayout fsupplement$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("fs_file_start"),
        C_LONG_LONG.withName("fs_blob_start"),
        C_LONG.withName("fs_blob_size"),
        C_INT.withName("fs_orig_fd"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("fsupplement");
    static final jdk.incubator.foreign.MemoryLayout fsupplement$struct$LAYOUT() { return fsupplement$struct$LAYOUT_; }

    static final MemoryLayout fsupplement$fs_file_start$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fsupplement$fs_file_start$LAYOUT() { return fsupplement$fs_file_start$LAYOUT_; }

    static final VarHandle fsupplement$fs_file_start$VH_ = fsupplement$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fs_file_start"));
    static final java.lang.invoke.VarHandle fsupplement$fs_file_start$VH() { return fsupplement$fs_file_start$VH_; }

    static final MemoryLayout fsupplement$fs_blob_start$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fsupplement$fs_blob_start$LAYOUT() { return fsupplement$fs_blob_start$LAYOUT_; }

    static final VarHandle fsupplement$fs_blob_start$VH_ = fsupplement$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fs_blob_start"));
    static final java.lang.invoke.VarHandle fsupplement$fs_blob_start$VH() { return fsupplement$fs_blob_start$VH_; }

    static final MemoryLayout fsupplement$fs_blob_size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fsupplement$fs_blob_size$LAYOUT() { return fsupplement$fs_blob_size$LAYOUT_; }

    static final VarHandle fsupplement$fs_blob_size$VH_ = fsupplement$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fs_blob_size"));
    static final java.lang.invoke.VarHandle fsupplement$fs_blob_size$VH() { return fsupplement$fs_blob_size$VH_; }

    static final MemoryLayout fsupplement$fs_orig_fd$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fsupplement$fs_orig_fd$LAYOUT() { return fsupplement$fs_orig_fd$LAYOUT_; }

    static final VarHandle fsupplement$fs_orig_fd$VH_ = fsupplement$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fs_orig_fd"));
    static final java.lang.invoke.VarHandle fsupplement$fs_orig_fd$VH() { return fsupplement$fs_orig_fd$VH_; }

    static final MemoryLayout fchecklv$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("lv_file_start"),
        C_LONG.withName("lv_error_message_size"),
        C_POINTER.withName("lv_error_message")
    ).withName("fchecklv");
    static final jdk.incubator.foreign.MemoryLayout fchecklv$struct$LAYOUT() { return fchecklv$struct$LAYOUT_; }

    static final MemoryLayout fchecklv$lv_file_start$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fchecklv$lv_file_start$LAYOUT() { return fchecklv$lv_file_start$LAYOUT_; }

    static final VarHandle fchecklv$lv_file_start$VH_ = fchecklv$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lv_file_start"));
    static final java.lang.invoke.VarHandle fchecklv$lv_file_start$VH() { return fchecklv$lv_file_start$VH_; }

    static final MemoryLayout fchecklv$lv_error_message_size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fchecklv$lv_error_message_size$LAYOUT() { return fchecklv$lv_error_message_size$LAYOUT_; }

    static final VarHandle fchecklv$lv_error_message_size$VH_ = fchecklv$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lv_error_message_size"));
    static final java.lang.invoke.VarHandle fchecklv$lv_error_message_size$VH() { return fchecklv$lv_error_message_size$VH_; }

    static final MemoryLayout fchecklv$lv_error_message$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fchecklv$lv_error_message$LAYOUT() { return fchecklv$lv_error_message$LAYOUT_; }

    static final VarHandle fchecklv$lv_error_message$VH_ = MemoryHandles.asAddressVarHandle(fchecklv$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lv_error_message")));
    static final java.lang.invoke.VarHandle fchecklv$lv_error_message$VH() { return fchecklv$lv_error_message$VH_; }

    static final MemoryLayout fgetsigsinfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("fg_file_start"),
        C_INT.withName("fg_info_request"),
        C_INT.withName("fg_sig_is_platform")
    ).withName("fgetsigsinfo");
    static final jdk.incubator.foreign.MemoryLayout fgetsigsinfo$struct$LAYOUT() { return fgetsigsinfo$struct$LAYOUT_; }

    static final MemoryLayout fgetsigsinfo$fg_file_start$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fgetsigsinfo$fg_file_start$LAYOUT() { return fgetsigsinfo$fg_file_start$LAYOUT_; }

    static final VarHandle fgetsigsinfo$fg_file_start$VH_ = fgetsigsinfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fg_file_start"));
    static final java.lang.invoke.VarHandle fgetsigsinfo$fg_file_start$VH() { return fgetsigsinfo$fg_file_start$VH_; }

    static final MemoryLayout fgetsigsinfo$fg_info_request$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fgetsigsinfo$fg_info_request$LAYOUT() { return fgetsigsinfo$fg_info_request$LAYOUT_; }

    static final VarHandle fgetsigsinfo$fg_info_request$VH_ = fgetsigsinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fg_info_request"));
    static final java.lang.invoke.VarHandle fgetsigsinfo$fg_info_request$VH() { return fgetsigsinfo$fg_info_request$VH_; }

    static final MemoryLayout fgetsigsinfo$fg_sig_is_platform$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fgetsigsinfo$fg_sig_is_platform$LAYOUT() { return fgetsigsinfo$fg_sig_is_platform$LAYOUT_; }

    static final VarHandle fgetsigsinfo$fg_sig_is_platform$VH_ = fgetsigsinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fg_sig_is_platform"));
    static final java.lang.invoke.VarHandle fgetsigsinfo$fg_sig_is_platform$VH() { return fgetsigsinfo$fg_sig_is_platform$VH_; }

    static final MemoryLayout fstore$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("fst_flags"),
        C_INT.withName("fst_posmode"),
        C_LONG_LONG.withName("fst_offset"),
        C_LONG_LONG.withName("fst_length"),
        C_LONG_LONG.withName("fst_bytesalloc")
    ).withName("fstore");
    static final jdk.incubator.foreign.MemoryLayout fstore$struct$LAYOUT() { return fstore$struct$LAYOUT_; }

    static final MemoryLayout fstore$fst_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fstore$fst_flags$LAYOUT() { return fstore$fst_flags$LAYOUT_; }

    static final VarHandle fstore$fst_flags$VH_ = fstore$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fst_flags"));
    static final java.lang.invoke.VarHandle fstore$fst_flags$VH() { return fstore$fst_flags$VH_; }

    static final MemoryLayout fstore$fst_posmode$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fstore$fst_posmode$LAYOUT() { return fstore$fst_posmode$LAYOUT_; }

    static final VarHandle fstore$fst_posmode$VH_ = fstore$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fst_posmode"));
    static final java.lang.invoke.VarHandle fstore$fst_posmode$VH() { return fstore$fst_posmode$VH_; }

    static final MemoryLayout fstore$fst_offset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fstore$fst_offset$LAYOUT() { return fstore$fst_offset$LAYOUT_; }

    static final VarHandle fstore$fst_offset$VH_ = fstore$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fst_offset"));
    static final java.lang.invoke.VarHandle fstore$fst_offset$VH() { return fstore$fst_offset$VH_; }

    static final MemoryLayout fstore$fst_length$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fstore$fst_length$LAYOUT() { return fstore$fst_length$LAYOUT_; }

    static final VarHandle fstore$fst_length$VH_ = fstore$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fst_length"));
    static final java.lang.invoke.VarHandle fstore$fst_length$VH() { return fstore$fst_length$VH_; }

    static final MemoryLayout fstore$fst_bytesalloc$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fstore$fst_bytesalloc$LAYOUT() { return fstore$fst_bytesalloc$LAYOUT_; }

    static final VarHandle fstore$fst_bytesalloc$VH_ = fstore$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fst_bytesalloc"));
    static final java.lang.invoke.VarHandle fstore$fst_bytesalloc$VH() { return fstore$fst_bytesalloc$VH_; }

    static final MemoryLayout fpunchhole$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("fp_flags"),
        C_INT.withName("reserved"),
        C_LONG_LONG.withName("fp_offset"),
        C_LONG_LONG.withName("fp_length")
    ).withName("fpunchhole");
    static final jdk.incubator.foreign.MemoryLayout fpunchhole$struct$LAYOUT() { return fpunchhole$struct$LAYOUT_; }

    static final MemoryLayout fpunchhole$fp_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fpunchhole$fp_flags$LAYOUT() { return fpunchhole$fp_flags$LAYOUT_; }

    static final VarHandle fpunchhole$fp_flags$VH_ = fpunchhole$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fp_flags"));
    static final java.lang.invoke.VarHandle fpunchhole$fp_flags$VH() { return fpunchhole$fp_flags$VH_; }

    static final MemoryLayout fpunchhole$reserved$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fpunchhole$reserved$LAYOUT() { return fpunchhole$reserved$LAYOUT_; }

    static final VarHandle fpunchhole$reserved$VH_ = fpunchhole$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("reserved"));
    static final java.lang.invoke.VarHandle fpunchhole$reserved$VH() { return fpunchhole$reserved$VH_; }

    static final MemoryLayout fpunchhole$fp_offset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fpunchhole$fp_offset$LAYOUT() { return fpunchhole$fp_offset$LAYOUT_; }

    static final VarHandle fpunchhole$fp_offset$VH_ = fpunchhole$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fp_offset"));
    static final java.lang.invoke.VarHandle fpunchhole$fp_offset$VH() { return fpunchhole$fp_offset$VH_; }

    static final MemoryLayout fpunchhole$fp_length$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fpunchhole$fp_length$LAYOUT() { return fpunchhole$fp_length$LAYOUT_; }

    static final VarHandle fpunchhole$fp_length$VH_ = fpunchhole$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fp_length"));
    static final java.lang.invoke.VarHandle fpunchhole$fp_length$VH() { return fpunchhole$fp_length$VH_; }

    static final MemoryLayout ftrimactivefile$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("fta_offset"),
        C_LONG_LONG.withName("fta_length")
    ).withName("ftrimactivefile");
    static final jdk.incubator.foreign.MemoryLayout ftrimactivefile$struct$LAYOUT() { return ftrimactivefile$struct$LAYOUT_; }

    static final MemoryLayout ftrimactivefile$fta_offset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout ftrimactivefile$fta_offset$LAYOUT() { return ftrimactivefile$fta_offset$LAYOUT_; }

    static final VarHandle ftrimactivefile$fta_offset$VH_ = ftrimactivefile$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fta_offset"));
    static final java.lang.invoke.VarHandle ftrimactivefile$fta_offset$VH() { return ftrimactivefile$fta_offset$VH_; }

    static final MemoryLayout ftrimactivefile$fta_length$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout ftrimactivefile$fta_length$LAYOUT() { return ftrimactivefile$fta_length$LAYOUT_; }

    static final VarHandle ftrimactivefile$fta_length$VH_ = ftrimactivefile$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fta_length"));
    static final java.lang.invoke.VarHandle ftrimactivefile$fta_length$VH() { return ftrimactivefile$fta_length$VH_; }

    static final MemoryLayout fspecread$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("fsr_flags"),
        C_INT.withName("reserved"),
        C_LONG_LONG.withName("fsr_offset"),
        C_LONG_LONG.withName("fsr_length")
    ).withName("fspecread");
    static final jdk.incubator.foreign.MemoryLayout fspecread$struct$LAYOUT() { return fspecread$struct$LAYOUT_; }

    static final MemoryLayout fspecread$fsr_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fspecread$fsr_flags$LAYOUT() { return fspecread$fsr_flags$LAYOUT_; }

    static final VarHandle fspecread$fsr_flags$VH_ = fspecread$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fsr_flags"));
    static final java.lang.invoke.VarHandle fspecread$fsr_flags$VH() { return fspecread$fsr_flags$VH_; }

    static final MemoryLayout fspecread$reserved$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fspecread$reserved$LAYOUT() { return fspecread$reserved$LAYOUT_; }

    static final VarHandle fspecread$reserved$VH_ = fspecread$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("reserved"));
    static final java.lang.invoke.VarHandle fspecread$reserved$VH() { return fspecread$reserved$VH_; }

    static final MemoryLayout fspecread$fsr_offset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fspecread$fsr_offset$LAYOUT() { return fspecread$fsr_offset$LAYOUT_; }

    static final VarHandle fspecread$fsr_offset$VH_ = fspecread$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fsr_offset"));
    static final java.lang.invoke.VarHandle fspecread$fsr_offset$VH() { return fspecread$fsr_offset$VH_; }

    static final MemoryLayout fspecread$fsr_length$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fspecread$fsr_length$LAYOUT() { return fspecread$fsr_length$LAYOUT_; }

    static final VarHandle fspecread$fsr_length$VH_ = fspecread$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fsr_length"));
    static final java.lang.invoke.VarHandle fspecread$fsr_length$VH() { return fspecread$fsr_length$VH_; }

    static final MemoryLayout fbootstraptransfer$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("fbt_offset"),
        C_LONG.withName("fbt_length"),
        C_POINTER.withName("fbt_buffer")
    ).withName("fbootstraptransfer");
    static final jdk.incubator.foreign.MemoryLayout fbootstraptransfer$struct$LAYOUT() { return fbootstraptransfer$struct$LAYOUT_; }

    static final MemoryLayout fbootstraptransfer$fbt_offset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout fbootstraptransfer$fbt_offset$LAYOUT() { return fbootstraptransfer$fbt_offset$LAYOUT_; }

    static final VarHandle fbootstraptransfer$fbt_offset$VH_ = fbootstraptransfer$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fbt_offset"));
    static final java.lang.invoke.VarHandle fbootstraptransfer$fbt_offset$VH() { return fbootstraptransfer$fbt_offset$VH_; }

    static final MemoryLayout fbootstraptransfer$fbt_length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fbootstraptransfer$fbt_length$LAYOUT() { return fbootstraptransfer$fbt_length$LAYOUT_; }

    static final VarHandle fbootstraptransfer$fbt_length$VH_ = fbootstraptransfer$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fbt_length"));
    static final java.lang.invoke.VarHandle fbootstraptransfer$fbt_length$VH() { return fbootstraptransfer$fbt_length$VH_; }

    static final MemoryLayout fbootstraptransfer$fbt_buffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fbootstraptransfer$fbt_buffer$LAYOUT() { return fbootstraptransfer$fbt_buffer$LAYOUT_; }

    static final VarHandle fbootstraptransfer$fbt_buffer$VH_ = MemoryHandles.asAddressVarHandle(fbootstraptransfer$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fbt_buffer")));
    static final java.lang.invoke.VarHandle fbootstraptransfer$fbt_buffer$VH() { return fbootstraptransfer$fbt_buffer$VH_; }

    static final MemoryLayout log2phys$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("l2p_flags"),
        C_LONG_LONG.withName("l2p_contigbytes"),
        C_LONG_LONG.withName("l2p_devoffset")
    ).withName("log2phys");
    static final jdk.incubator.foreign.MemoryLayout log2phys$struct$LAYOUT() { return log2phys$struct$LAYOUT_; }

    static final MemoryLayout log2phys$l2p_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout log2phys$l2p_flags$LAYOUT() { return log2phys$l2p_flags$LAYOUT_; }

    static final VarHandle log2phys$l2p_flags$VH_ = log2phys$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("l2p_flags"));
    static final java.lang.invoke.VarHandle log2phys$l2p_flags$VH() { return log2phys$l2p_flags$VH_; }

    static final MemoryLayout log2phys$l2p_contigbytes$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout log2phys$l2p_contigbytes$LAYOUT() { return log2phys$l2p_contigbytes$LAYOUT_; }

    static final VarHandle log2phys$l2p_contigbytes$VH_ = log2phys$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("l2p_contigbytes"));
    static final java.lang.invoke.VarHandle log2phys$l2p_contigbytes$VH() { return log2phys$l2p_contigbytes$VH_; }

    static final MemoryLayout log2phys$l2p_devoffset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout log2phys$l2p_devoffset$LAYOUT() { return log2phys$l2p_devoffset$LAYOUT_; }

    static final VarHandle log2phys$l2p_devoffset$VH_ = log2phys$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("l2p_devoffset"));
    static final java.lang.invoke.VarHandle log2phys$l2p_devoffset$VH() { return log2phys$l2p_devoffset$VH_; }

    static final int FILESEC_OWNER() { return (int)1L; }

    static final int FILESEC_GROUP() { return (int)2L; }

    static final int FILESEC_UUID() { return (int)3L; }

    static final int FILESEC_MODE() { return (int)4L; }

    static final int FILESEC_ACL() { return (int)5L; }

    static final int FILESEC_GRPUUID() { return (int)6L; }

    static final int FILESEC_ACL_RAW() { return (int)100L; }

    static final int FILESEC_ACL_ALLOCSIZE() { return (int)101L; }

    static final FunctionDescriptor open$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor open$FUNC() { return open$FUNC_; }

    static final MethodHandle open$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "open",
        "(Ljdk/incubator/foreign/MemoryAddress;I[Ljava/lang/Object;)I",
        open$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle open$MH() { return open$MH_; }

    static final FunctionDescriptor openat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor openat$FUNC() { return openat$FUNC_; }

    static final MethodHandle openat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "openat",
        "(ILjdk/incubator/foreign/MemoryAddress;I[Ljava/lang/Object;)I",
        openat$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle openat$MH() { return openat$MH_; }

    static final FunctionDescriptor creat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor creat$FUNC() { return creat$FUNC_; }

    static final MethodHandle creat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "creat",
        "(Ljdk/incubator/foreign/MemoryAddress;S)I",
        creat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle creat$MH() { return creat$MH_; }

    static final FunctionDescriptor fcntl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fcntl$FUNC() { return fcntl$FUNC_; }

    static final MethodHandle fcntl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fcntl",
        "(II[Ljava/lang/Object;)I",
        fcntl$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle fcntl$MH() { return fcntl$MH_; }

    static final FunctionDescriptor openx_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor openx_np$FUNC() { return openx_np$FUNC_; }

    static final MethodHandle openx_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "openx_np",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        openx_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle openx_np$MH() { return openx_np$MH_; }

    static final FunctionDescriptor open_dprotected_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor open_dprotected_np$FUNC() { return open_dprotected_np$FUNC_; }

    static final MethodHandle open_dprotected_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "open_dprotected_np",
        "(Ljdk/incubator/foreign/MemoryAddress;III[Ljava/lang/Object;)I",
        open_dprotected_np$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle open_dprotected_np$MH() { return open_dprotected_np$MH_; }

    static final FunctionDescriptor flock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor flock$FUNC() { return flock$FUNC_; }

    static final MethodHandle flock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "flock",
        "(II)I",
        flock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle flock$MH() { return flock$MH_; }

    static final FunctionDescriptor filesec_init$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor filesec_init$FUNC() { return filesec_init$FUNC_; }

    static final MethodHandle filesec_init$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "filesec_init",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        filesec_init$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle filesec_init$MH() { return filesec_init$MH_; }

    static final FunctionDescriptor filesec_dup$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor filesec_dup$FUNC() { return filesec_dup$FUNC_; }

    static final MethodHandle filesec_dup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "filesec_dup",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        filesec_dup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle filesec_dup$MH() { return filesec_dup$MH_; }

    static final FunctionDescriptor filesec_free$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor filesec_free$FUNC() { return filesec_free$FUNC_; }

    static final MethodHandle filesec_free$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "filesec_free",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        filesec_free$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle filesec_free$MH() { return filesec_free$MH_; }

    static final FunctionDescriptor filesec_get_property$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor filesec_get_property$FUNC() { return filesec_get_property$FUNC_; }

    static final MethodHandle filesec_get_property$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "filesec_get_property",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        filesec_get_property$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle filesec_get_property$MH() { return filesec_get_property$MH_; }

    static final FunctionDescriptor filesec_query_property$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor filesec_query_property$FUNC() { return filesec_query_property$FUNC_; }

    static final MethodHandle filesec_query_property$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "filesec_query_property",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        filesec_query_property$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle filesec_query_property$MH() { return filesec_query_property$MH_; }

    static final FunctionDescriptor filesec_set_property$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor filesec_set_property$FUNC() { return filesec_set_property$FUNC_; }

    static final MethodHandle filesec_set_property$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "filesec_set_property",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        filesec_set_property$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle filesec_set_property$MH() { return filesec_set_property$MH_; }

    static final FunctionDescriptor filesec_unset_property$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor filesec_unset_property$FUNC() { return filesec_unset_property$FUNC_; }

    static final MethodHandle filesec_unset_property$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "filesec_unset_property",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        filesec_unset_property$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle filesec_unset_property$MH() { return filesec_unset_property$MH_; }

    static final MemoryLayout tm$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("tm_sec"),
        C_INT.withName("tm_min"),
        C_INT.withName("tm_hour"),
        C_INT.withName("tm_mday"),
        C_INT.withName("tm_mon"),
        C_INT.withName("tm_year"),
        C_INT.withName("tm_wday"),
        C_INT.withName("tm_yday"),
        C_INT.withName("tm_isdst"),
        MemoryLayout.ofPaddingBits(32),
        C_LONG.withName("tm_gmtoff"),
        C_POINTER.withName("tm_zone")
    ).withName("tm");
    static final jdk.incubator.foreign.MemoryLayout tm$struct$LAYOUT() { return tm$struct$LAYOUT_; }

    static final MemoryLayout tm$tm_sec$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_sec$LAYOUT() { return tm$tm_sec$LAYOUT_; }

    static final VarHandle tm$tm_sec$VH_ = tm$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tm_sec"));
    static final java.lang.invoke.VarHandle tm$tm_sec$VH() { return tm$tm_sec$VH_; }

    static final MemoryLayout tm$tm_min$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_min$LAYOUT() { return tm$tm_min$LAYOUT_; }

    static final VarHandle tm$tm_min$VH_ = tm$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tm_min"));
    static final java.lang.invoke.VarHandle tm$tm_min$VH() { return tm$tm_min$VH_; }

    static final MemoryLayout tm$tm_hour$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_hour$LAYOUT() { return tm$tm_hour$LAYOUT_; }

    static final VarHandle tm$tm_hour$VH_ = tm$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tm_hour"));
    static final java.lang.invoke.VarHandle tm$tm_hour$VH() { return tm$tm_hour$VH_; }

    static final MemoryLayout tm$tm_mday$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_mday$LAYOUT() { return tm$tm_mday$LAYOUT_; }

    static final VarHandle tm$tm_mday$VH_ = tm$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tm_mday"));
    static final java.lang.invoke.VarHandle tm$tm_mday$VH() { return tm$tm_mday$VH_; }

    static final MemoryLayout tm$tm_mon$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_mon$LAYOUT() { return tm$tm_mon$LAYOUT_; }

    static final VarHandle tm$tm_mon$VH_ = tm$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tm_mon"));
    static final java.lang.invoke.VarHandle tm$tm_mon$VH() { return tm$tm_mon$VH_; }

    static final MemoryLayout tm$tm_year$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_year$LAYOUT() { return tm$tm_year$LAYOUT_; }

    static final VarHandle tm$tm_year$VH_ = tm$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tm_year"));
    static final java.lang.invoke.VarHandle tm$tm_year$VH() { return tm$tm_year$VH_; }

    static final MemoryLayout tm$tm_wday$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_wday$LAYOUT() { return tm$tm_wday$LAYOUT_; }

    static final VarHandle tm$tm_wday$VH_ = tm$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tm_wday"));
    static final java.lang.invoke.VarHandle tm$tm_wday$VH() { return tm$tm_wday$VH_; }

    static final MemoryLayout tm$tm_yday$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_yday$LAYOUT() { return tm$tm_yday$LAYOUT_; }

    static final VarHandle tm$tm_yday$VH_ = tm$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tm_yday"));
    static final java.lang.invoke.VarHandle tm$tm_yday$VH() { return tm$tm_yday$VH_; }

    static final MemoryLayout tm$tm_isdst$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_isdst$LAYOUT() { return tm$tm_isdst$LAYOUT_; }

    static final VarHandle tm$tm_isdst$VH_ = tm$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tm_isdst"));
    static final java.lang.invoke.VarHandle tm$tm_isdst$VH() { return tm$tm_isdst$VH_; }

    static final MemoryLayout tm$tm_gmtoff$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_gmtoff$LAYOUT() { return tm$tm_gmtoff$LAYOUT_; }

    static final VarHandle tm$tm_gmtoff$VH_ = tm$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("tm_gmtoff"));
    static final java.lang.invoke.VarHandle tm$tm_gmtoff$VH() { return tm$tm_gmtoff$VH_; }

    static final MemoryLayout tm$tm_zone$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tm$tm_zone$LAYOUT() { return tm$tm_zone$LAYOUT_; }

    static final VarHandle tm$tm_zone$VH_ = MemoryHandles.asAddressVarHandle(tm$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("tm_zone")));
    static final java.lang.invoke.VarHandle tm$tm_zone$VH() { return tm$tm_zone$VH_; }

    static final MemoryLayout getdate_err$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout getdate_err$LAYOUT() { return getdate_err$LAYOUT_; }

    static final VarHandle getdate_err$VH_ = getdate_err$LAYOUT_.varHandle(int.class);
    static final java.lang.invoke.VarHandle getdate_err$VH() { return getdate_err$VH_; }

    static final MemorySegment getdate_err$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "getdate_err", getdate_err$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment getdate_err$SEGMENT() { return getdate_err$SEGMENT_; }

    static final MemoryLayout timezone$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout timezone$LAYOUT() { return timezone$LAYOUT_; }

    static final VarHandle timezone$VH_ = timezone$LAYOUT_.varHandle(long.class);
    static final java.lang.invoke.VarHandle timezone$VH() { return timezone$VH_; }

    static final MemorySegment timezone$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "timezone", timezone$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment timezone$SEGMENT() { return timezone$SEGMENT_; }

    static final MemoryLayout daylight$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout daylight$LAYOUT() { return daylight$LAYOUT_; }

    static final VarHandle daylight$VH_ = daylight$LAYOUT_.varHandle(int.class);
    static final java.lang.invoke.VarHandle daylight$VH() { return daylight$VH_; }

    static final MemorySegment daylight$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "daylight", daylight$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment daylight$SEGMENT() { return daylight$SEGMENT_; }

    static final FunctionDescriptor asctime$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor asctime$FUNC() { return asctime$FUNC_; }

    static final MethodHandle asctime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "asctime",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        asctime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle asctime$MH() { return asctime$MH_; }

    static final FunctionDescriptor clock$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor clock$FUNC() { return clock$FUNC_; }

    static final MethodHandle clock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clock",
        "()J",
        clock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clock$MH() { return clock$MH_; }

    static final FunctionDescriptor ctime$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ctime$FUNC() { return ctime$FUNC_; }

    static final MethodHandle ctime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ctime",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ctime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ctime$MH() { return ctime$MH_; }

    static final FunctionDescriptor difftime$FUNC_ = FunctionDescriptor.of(C_DOUBLE,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor difftime$FUNC() { return difftime$FUNC_; }

    static final MethodHandle difftime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "difftime",
        "(JJ)D",
        difftime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle difftime$MH() { return difftime$MH_; }

    static final FunctionDescriptor getdate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor getdate$FUNC() { return getdate$FUNC_; }

    static final MethodHandle getdate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getdate",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        getdate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getdate$MH() { return getdate$MH_; }

    static final FunctionDescriptor gmtime$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor gmtime$FUNC() { return gmtime$FUNC_; }

    static final MethodHandle gmtime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "gmtime",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        gmtime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle gmtime$MH() { return gmtime$MH_; }

    static final FunctionDescriptor localtime$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor localtime$FUNC() { return localtime$FUNC_; }

    static final MethodHandle localtime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "localtime",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        localtime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle localtime$MH() { return localtime$MH_; }

    static final FunctionDescriptor mktime$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor mktime$FUNC() { return mktime$FUNC_; }

    static final MethodHandle mktime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "mktime",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        mktime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle mktime$MH() { return mktime$MH_; }

    static final FunctionDescriptor strftime$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strftime$FUNC() { return strftime$FUNC_; }

    static final MethodHandle strftime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strftime",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J",
        strftime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strftime$MH() { return strftime$MH_; }

    static final FunctionDescriptor strptime$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strptime$FUNC() { return strptime$FUNC_; }

    static final MethodHandle strptime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strptime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strptime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strptime$MH() { return strptime$MH_; }

    static final FunctionDescriptor time$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor time$FUNC() { return time$FUNC_; }

    static final MethodHandle time$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "time",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        time$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle time$MH() { return time$MH_; }

    static final FunctionDescriptor tzset$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor tzset$FUNC() { return tzset$FUNC_; }

    static final MethodHandle tzset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "tzset",
        "()V",
        tzset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle tzset$MH() { return tzset$MH_; }

    static final FunctionDescriptor asctime_r$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor asctime_r$FUNC() { return asctime_r$FUNC_; }

    static final MethodHandle asctime_r$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "asctime_r",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        asctime_r$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle asctime_r$MH() { return asctime_r$MH_; }

    static final FunctionDescriptor ctime_r$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ctime_r$FUNC() { return ctime_r$FUNC_; }

    static final MethodHandle ctime_r$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ctime_r",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ctime_r$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ctime_r$MH() { return ctime_r$MH_; }

    static final FunctionDescriptor gmtime_r$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor gmtime_r$FUNC() { return gmtime_r$FUNC_; }

    static final MethodHandle gmtime_r$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "gmtime_r",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        gmtime_r$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle gmtime_r$MH() { return gmtime_r$MH_; }

    static final FunctionDescriptor localtime_r$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor localtime_r$FUNC() { return localtime_r$FUNC_; }

    static final MethodHandle localtime_r$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "localtime_r",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        localtime_r$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle localtime_r$MH() { return localtime_r$MH_; }

    static final FunctionDescriptor posix2time$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor posix2time$FUNC() { return posix2time$FUNC_; }

    static final MethodHandle posix2time$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "posix2time",
        "(J)J",
        posix2time$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle posix2time$MH() { return posix2time$MH_; }

    static final FunctionDescriptor tzsetwall$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor tzsetwall$FUNC() { return tzsetwall$FUNC_; }

    static final MethodHandle tzsetwall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "tzsetwall",
        "()V",
        tzsetwall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle tzsetwall$MH() { return tzsetwall$MH_; }

    static final FunctionDescriptor time2posix$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor time2posix$FUNC() { return time2posix$FUNC_; }

    static final MethodHandle time2posix$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "time2posix",
        "(J)J",
        time2posix$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle time2posix$MH() { return time2posix$MH_; }

    static final FunctionDescriptor timelocal$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor timelocal$FUNC() { return timelocal$FUNC_; }

    static final MethodHandle timelocal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "timelocal",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        timelocal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle timelocal$MH() { return timelocal$MH_; }

    static final FunctionDescriptor timegm$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor timegm$FUNC() { return timegm$FUNC_; }

    static final MethodHandle timegm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "timegm",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        timegm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle timegm$MH() { return timegm$MH_; }

    static final FunctionDescriptor nanosleep$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor nanosleep$FUNC() { return nanosleep$FUNC_; }

    static final MethodHandle nanosleep$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "nanosleep",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        nanosleep$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle nanosleep$MH() { return nanosleep$MH_; }

    static final int _CLOCK_REALTIME() { return (int)0L; }

    static final int _CLOCK_MONOTONIC() { return (int)6L; }

    static final int _CLOCK_MONOTONIC_RAW() { return (int)4L; }

    static final int _CLOCK_MONOTONIC_RAW_APPROX() { return (int)5L; }

    static final int _CLOCK_UPTIME_RAW() { return (int)8L; }

    static final int _CLOCK_UPTIME_RAW_APPROX() { return (int)9L; }

    static final int _CLOCK_PROCESS_CPUTIME_ID() { return (int)12L; }

    static final int _CLOCK_THREAD_CPUTIME_ID() { return (int)16L; }

    static final FunctionDescriptor clock_getres$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clock_getres$FUNC() { return clock_getres$FUNC_; }

    static final MethodHandle clock_getres$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clock_getres",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        clock_getres$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clock_getres$MH() { return clock_getres$MH_; }

    static final FunctionDescriptor clock_gettime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clock_gettime$FUNC() { return clock_gettime$FUNC_; }

    static final MethodHandle clock_gettime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clock_gettime",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        clock_gettime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clock_gettime$MH() { return clock_gettime$MH_; }

    static final FunctionDescriptor clock_gettime_nsec_np$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clock_gettime_nsec_np$FUNC() { return clock_gettime_nsec_np$FUNC_; }

    static final MethodHandle clock_gettime_nsec_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clock_gettime_nsec_np",
        "(I)J",
        clock_gettime_nsec_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clock_gettime_nsec_np$MH() { return clock_gettime_nsec_np$MH_; }

    static final FunctionDescriptor clock_settime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clock_settime$FUNC() { return clock_settime$FUNC_; }

    static final MethodHandle clock_settime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clock_settime",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        clock_settime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clock_settime$MH() { return clock_settime$MH_; }

    static final FunctionDescriptor timespec_get$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor timespec_get$FUNC() { return timespec_get$FUNC_; }

    static final MethodHandle timespec_get$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "timespec_get",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        timespec_get$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle timespec_get$MH() { return timespec_get$MH_; }

    static final MemoryLayout utimbuf$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("actime"),
        C_LONG.withName("modtime")
    ).withName("utimbuf");
    static final jdk.incubator.foreign.MemoryLayout utimbuf$struct$LAYOUT() { return utimbuf$struct$LAYOUT_; }

    static final MemoryLayout utimbuf$actime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout utimbuf$actime$LAYOUT() { return utimbuf$actime$LAYOUT_; }

    static final VarHandle utimbuf$actime$VH_ = utimbuf$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("actime"));
    static final java.lang.invoke.VarHandle utimbuf$actime$VH() { return utimbuf$actime$VH_; }

    static final MemoryLayout utimbuf$modtime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout utimbuf$modtime$LAYOUT() { return utimbuf$modtime$LAYOUT_; }

    static final VarHandle utimbuf$modtime$VH_ = utimbuf$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("modtime"));
    static final java.lang.invoke.VarHandle utimbuf$modtime$VH() { return utimbuf$modtime$VH_; }

    static final FunctionDescriptor utime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor utime$FUNC() { return utime$FUNC_; }

    static final MethodHandle utime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "utime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        utime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle utime$MH() { return utime$MH_; }

    static final MemoryLayout statvfs$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("f_bsize"),
        C_LONG.withName("f_frsize"),
        C_INT.withName("f_blocks"),
        C_INT.withName("f_bfree"),
        C_INT.withName("f_bavail"),
        C_INT.withName("f_files"),
        C_INT.withName("f_ffree"),
        C_INT.withName("f_favail"),
        C_LONG.withName("f_fsid"),
        C_LONG.withName("f_flag"),
        C_LONG.withName("f_namemax")
    ).withName("statvfs");
    static final jdk.incubator.foreign.MemoryLayout statvfs$struct$LAYOUT() { return statvfs$struct$LAYOUT_; }

    static final MemoryLayout statvfs$f_bsize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout statvfs$f_bsize$LAYOUT() { return statvfs$f_bsize$LAYOUT_; }

    static final VarHandle statvfs$f_bsize$VH_ = statvfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_bsize"));
    static final java.lang.invoke.VarHandle statvfs$f_bsize$VH() { return statvfs$f_bsize$VH_; }

    static final MemoryLayout statvfs$f_frsize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout statvfs$f_frsize$LAYOUT() { return statvfs$f_frsize$LAYOUT_; }

    static final VarHandle statvfs$f_frsize$VH_ = statvfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_frsize"));
    static final java.lang.invoke.VarHandle statvfs$f_frsize$VH() { return statvfs$f_frsize$VH_; }

    static final MemoryLayout statvfs$f_blocks$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statvfs$f_blocks$LAYOUT() { return statvfs$f_blocks$LAYOUT_; }

    static final VarHandle statvfs$f_blocks$VH_ = statvfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_blocks"));
    static final java.lang.invoke.VarHandle statvfs$f_blocks$VH() { return statvfs$f_blocks$VH_; }

    static final MemoryLayout statvfs$f_bfree$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statvfs$f_bfree$LAYOUT() { return statvfs$f_bfree$LAYOUT_; }

    static final VarHandle statvfs$f_bfree$VH_ = statvfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_bfree"));
    static final java.lang.invoke.VarHandle statvfs$f_bfree$VH() { return statvfs$f_bfree$VH_; }

}

