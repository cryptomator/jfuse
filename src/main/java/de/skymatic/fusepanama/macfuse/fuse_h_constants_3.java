// Generated by jextract

package de.skymatic.fusepanama.macfuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class fuse_h_constants_3 extends fuse_h_constants_2 {

    /* package-private */ fuse_h_constants_3() {}
    static final MemoryLayout au_tid$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("port"),
        C_INT.withName("machine")
    ).withName("au_tid");
    static final jdk.incubator.foreign.MemoryLayout au_tid$struct$LAYOUT() { return au_tid$struct$LAYOUT_; }

    static final MemoryLayout au_tid$port$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_tid$port$LAYOUT() { return au_tid$port$LAYOUT_; }

    static final VarHandle au_tid$port$VH_ = au_tid$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("port"));
    static final java.lang.invoke.VarHandle au_tid$port$VH() { return au_tid$port$VH_; }

    static final MemoryLayout au_tid$machine$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_tid$machine$LAYOUT() { return au_tid$machine$LAYOUT_; }

    static final VarHandle au_tid$machine$VH_ = au_tid$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("machine"));
    static final java.lang.invoke.VarHandle au_tid$machine$VH() { return au_tid$machine$VH_; }

    static final MemoryLayout au_tid_addr$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("at_port"),
        C_INT.withName("at_type"),
        MemoryLayout.ofSequence(4, C_INT).withName("at_addr")
    ).withName("au_tid_addr");
    static final jdk.incubator.foreign.MemoryLayout au_tid_addr$struct$LAYOUT() { return au_tid_addr$struct$LAYOUT_; }

    static final MemoryLayout au_tid_addr$at_port$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_tid_addr$at_port$LAYOUT() { return au_tid_addr$at_port$LAYOUT_; }

    static final VarHandle au_tid_addr$at_port$VH_ = au_tid_addr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("at_port"));
    static final java.lang.invoke.VarHandle au_tid_addr$at_port$VH() { return au_tid_addr$at_port$VH_; }

    static final MemoryLayout au_tid_addr$at_type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_tid_addr$at_type$LAYOUT() { return au_tid_addr$at_type$LAYOUT_; }

    static final VarHandle au_tid_addr$at_type$VH_ = au_tid_addr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("at_type"));
    static final java.lang.invoke.VarHandle au_tid_addr$at_type$VH() { return au_tid_addr$at_type$VH_; }

    static final MemoryLayout au_mask$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("am_success"),
        C_INT.withName("am_failure")
    ).withName("au_mask");
    static final jdk.incubator.foreign.MemoryLayout au_mask$struct$LAYOUT() { return au_mask$struct$LAYOUT_; }

    static final MemoryLayout au_mask$am_success$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_mask$am_success$LAYOUT() { return au_mask$am_success$LAYOUT_; }

    static final VarHandle au_mask$am_success$VH_ = au_mask$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("am_success"));
    static final java.lang.invoke.VarHandle au_mask$am_success$VH() { return au_mask$am_success$VH_; }

    static final MemoryLayout au_mask$am_failure$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_mask$am_failure$LAYOUT() { return au_mask$am_failure$LAYOUT_; }

    static final VarHandle au_mask$am_failure$VH_ = au_mask$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("am_failure"));
    static final java.lang.invoke.VarHandle au_mask$am_failure$VH() { return au_mask$am_failure$VH_; }

    static final MemoryLayout auditinfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ai_auid"),
        MemoryLayout.ofStruct(
            C_INT.withName("am_success"),
            C_INT.withName("am_failure")
        ).withName("ai_mask"),
        MemoryLayout.ofStruct(
            C_INT.withName("port"),
            C_INT.withName("machine")
        ).withName("ai_termid"),
        C_INT.withName("ai_asid")
    ).withName("auditinfo");
    static final jdk.incubator.foreign.MemoryLayout auditinfo$struct$LAYOUT() { return auditinfo$struct$LAYOUT_; }

    static final MemoryLayout auditinfo$ai_auid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout auditinfo$ai_auid$LAYOUT() { return auditinfo$ai_auid$LAYOUT_; }

    static final VarHandle auditinfo$ai_auid$VH_ = auditinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ai_auid"));
    static final java.lang.invoke.VarHandle auditinfo$ai_auid$VH() { return auditinfo$ai_auid$VH_; }

    static final MemoryLayout auditinfo$ai_asid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout auditinfo$ai_asid$LAYOUT() { return auditinfo$ai_asid$LAYOUT_; }

    static final VarHandle auditinfo$ai_asid$VH_ = auditinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ai_asid"));
    static final java.lang.invoke.VarHandle auditinfo$ai_asid$VH() { return auditinfo$ai_asid$VH_; }

    static final MemoryLayout auditinfo_addr$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ai_auid"),
        MemoryLayout.ofStruct(
            C_INT.withName("am_success"),
            C_INT.withName("am_failure")
        ).withName("ai_mask"),
        MemoryLayout.ofStruct(
            C_INT.withName("at_port"),
            C_INT.withName("at_type"),
            MemoryLayout.ofSequence(4, C_INT).withName("at_addr")
        ).withName("ai_termid"),
        C_INT.withName("ai_asid"),
        C_LONG_LONG.withName("ai_flags")
    ).withName("auditinfo_addr");
    static final jdk.incubator.foreign.MemoryLayout auditinfo_addr$struct$LAYOUT() { return auditinfo_addr$struct$LAYOUT_; }

    static final MemoryLayout auditinfo_addr$ai_auid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout auditinfo_addr$ai_auid$LAYOUT() { return auditinfo_addr$ai_auid$LAYOUT_; }

    static final VarHandle auditinfo_addr$ai_auid$VH_ = auditinfo_addr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ai_auid"));
    static final java.lang.invoke.VarHandle auditinfo_addr$ai_auid$VH() { return auditinfo_addr$ai_auid$VH_; }

    static final MemoryLayout auditinfo_addr$ai_asid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout auditinfo_addr$ai_asid$LAYOUT() { return auditinfo_addr$ai_asid$LAYOUT_; }

    static final VarHandle auditinfo_addr$ai_asid$VH_ = auditinfo_addr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ai_asid"));
    static final java.lang.invoke.VarHandle auditinfo_addr$ai_asid$VH() { return auditinfo_addr$ai_asid$VH_; }

    static final MemoryLayout auditinfo_addr$ai_flags$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout auditinfo_addr$ai_flags$LAYOUT() { return auditinfo_addr$ai_flags$LAYOUT_; }

    static final VarHandle auditinfo_addr$ai_flags$VH_ = auditinfo_addr$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ai_flags"));
    static final java.lang.invoke.VarHandle auditinfo_addr$ai_flags$VH() { return auditinfo_addr$ai_flags$VH_; }

    static final MemoryLayout auditpinfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ap_pid"),
        C_INT.withName("ap_auid"),
        MemoryLayout.ofStruct(
            C_INT.withName("am_success"),
            C_INT.withName("am_failure")
        ).withName("ap_mask"),
        MemoryLayout.ofStruct(
            C_INT.withName("port"),
            C_INT.withName("machine")
        ).withName("ap_termid"),
        C_INT.withName("ap_asid")
    ).withName("auditpinfo");
    static final jdk.incubator.foreign.MemoryLayout auditpinfo$struct$LAYOUT() { return auditpinfo$struct$LAYOUT_; }

    static final MemoryLayout auditpinfo$ap_pid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout auditpinfo$ap_pid$LAYOUT() { return auditpinfo$ap_pid$LAYOUT_; }

    static final VarHandle auditpinfo$ap_pid$VH_ = auditpinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ap_pid"));
    static final java.lang.invoke.VarHandle auditpinfo$ap_pid$VH() { return auditpinfo$ap_pid$VH_; }

    static final MemoryLayout auditpinfo$ap_auid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout auditpinfo$ap_auid$LAYOUT() { return auditpinfo$ap_auid$LAYOUT_; }

    static final VarHandle auditpinfo$ap_auid$VH_ = auditpinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ap_auid"));
    static final java.lang.invoke.VarHandle auditpinfo$ap_auid$VH() { return auditpinfo$ap_auid$VH_; }

    static final MemoryLayout auditpinfo$ap_asid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout auditpinfo$ap_asid$LAYOUT() { return auditpinfo$ap_asid$LAYOUT_; }

    static final VarHandle auditpinfo$ap_asid$VH_ = auditpinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ap_asid"));
    static final java.lang.invoke.VarHandle auditpinfo$ap_asid$VH() { return auditpinfo$ap_asid$VH_; }

    static final MemoryLayout auditpinfo_addr$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ap_pid"),
        C_INT.withName("ap_auid"),
        MemoryLayout.ofStruct(
            C_INT.withName("am_success"),
            C_INT.withName("am_failure")
        ).withName("ap_mask"),
        MemoryLayout.ofStruct(
            C_INT.withName("at_port"),
            C_INT.withName("at_type"),
            MemoryLayout.ofSequence(4, C_INT).withName("at_addr")
        ).withName("ap_termid"),
        C_INT.withName("ap_asid"),
        MemoryLayout.ofPaddingBits(32),
        C_LONG_LONG.withName("ap_flags")
    ).withName("auditpinfo_addr");
    static final jdk.incubator.foreign.MemoryLayout auditpinfo_addr$struct$LAYOUT() { return auditpinfo_addr$struct$LAYOUT_; }

    static final MemoryLayout auditpinfo_addr$ap_pid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout auditpinfo_addr$ap_pid$LAYOUT() { return auditpinfo_addr$ap_pid$LAYOUT_; }

    static final VarHandle auditpinfo_addr$ap_pid$VH_ = auditpinfo_addr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ap_pid"));
    static final java.lang.invoke.VarHandle auditpinfo_addr$ap_pid$VH() { return auditpinfo_addr$ap_pid$VH_; }

    static final MemoryLayout auditpinfo_addr$ap_auid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout auditpinfo_addr$ap_auid$LAYOUT() { return auditpinfo_addr$ap_auid$LAYOUT_; }

    static final VarHandle auditpinfo_addr$ap_auid$VH_ = auditpinfo_addr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ap_auid"));
    static final java.lang.invoke.VarHandle auditpinfo_addr$ap_auid$VH() { return auditpinfo_addr$ap_auid$VH_; }

    static final MemoryLayout auditpinfo_addr$ap_asid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout auditpinfo_addr$ap_asid$LAYOUT() { return auditpinfo_addr$ap_asid$LAYOUT_; }

    static final VarHandle auditpinfo_addr$ap_asid$VH_ = auditpinfo_addr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ap_asid"));
    static final java.lang.invoke.VarHandle auditpinfo_addr$ap_asid$VH() { return auditpinfo_addr$ap_asid$VH_; }

    static final MemoryLayout auditpinfo_addr$ap_flags$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout auditpinfo_addr$ap_flags$LAYOUT() { return auditpinfo_addr$ap_flags$LAYOUT_; }

    static final VarHandle auditpinfo_addr$ap_flags$VH_ = auditpinfo_addr$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ap_flags"));
    static final java.lang.invoke.VarHandle auditpinfo_addr$ap_flags$VH() { return auditpinfo_addr$ap_flags$VH_; }

    static final MemoryLayout au_session$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("as_aia_p"),
        MemoryLayout.ofStruct(
            C_INT.withName("am_success"),
            C_INT.withName("am_failure")
        ).withName("as_mask")
    ).withName("au_session");
    static final jdk.incubator.foreign.MemoryLayout au_session$struct$LAYOUT() { return au_session$struct$LAYOUT_; }

    static final MemoryLayout au_session$as_aia_p$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout au_session$as_aia_p$LAYOUT() { return au_session$as_aia_p$LAYOUT_; }

    static final VarHandle au_session$as_aia_p$VH_ = MemoryHandles.asAddressVarHandle(au_session$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("as_aia_p")));
    static final java.lang.invoke.VarHandle au_session$as_aia_p$VH() { return au_session$as_aia_p$VH_; }

    static final MemoryLayout au_expire_after$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("age"),
        C_LONG.withName("size"),
        C_CHAR.withName("op_type"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("au_expire_after");
    static final jdk.incubator.foreign.MemoryLayout au_expire_after$struct$LAYOUT() { return au_expire_after$struct$LAYOUT_; }

    static final MemoryLayout au_expire_after$age$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout au_expire_after$age$LAYOUT() { return au_expire_after$age$LAYOUT_; }

    static final VarHandle au_expire_after$age$VH_ = au_expire_after$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("age"));
    static final java.lang.invoke.VarHandle au_expire_after$age$VH() { return au_expire_after$age$VH_; }

    static final MemoryLayout au_expire_after$size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout au_expire_after$size$LAYOUT() { return au_expire_after$size$LAYOUT_; }

    static final VarHandle au_expire_after$size$VH_ = au_expire_after$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("size"));
    static final java.lang.invoke.VarHandle au_expire_after$size$VH() { return au_expire_after$size$VH_; }

    static final MemoryLayout au_expire_after$op_type$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout au_expire_after$op_type$LAYOUT() { return au_expire_after$op_type$LAYOUT_; }

    static final VarHandle au_expire_after$op_type$VH_ = au_expire_after$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("op_type"));
    static final java.lang.invoke.VarHandle au_expire_after$op_type$VH() { return au_expire_after$op_type$VH_; }

    static final MemoryLayout au_qctrl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("aq_hiwater"),
        C_INT.withName("aq_lowater"),
        C_INT.withName("aq_bufsz"),
        C_INT.withName("aq_delay"),
        C_INT.withName("aq_minfree")
    ).withName("au_qctrl");
    static final jdk.incubator.foreign.MemoryLayout au_qctrl$struct$LAYOUT() { return au_qctrl$struct$LAYOUT_; }

    static final MemoryLayout au_qctrl$aq_hiwater$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_qctrl$aq_hiwater$LAYOUT() { return au_qctrl$aq_hiwater$LAYOUT_; }

    static final VarHandle au_qctrl$aq_hiwater$VH_ = au_qctrl$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("aq_hiwater"));
    static final java.lang.invoke.VarHandle au_qctrl$aq_hiwater$VH() { return au_qctrl$aq_hiwater$VH_; }

    static final MemoryLayout au_qctrl$aq_lowater$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_qctrl$aq_lowater$LAYOUT() { return au_qctrl$aq_lowater$LAYOUT_; }

    static final VarHandle au_qctrl$aq_lowater$VH_ = au_qctrl$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("aq_lowater"));
    static final java.lang.invoke.VarHandle au_qctrl$aq_lowater$VH() { return au_qctrl$aq_lowater$VH_; }

    static final MemoryLayout au_qctrl$aq_bufsz$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_qctrl$aq_bufsz$LAYOUT() { return au_qctrl$aq_bufsz$LAYOUT_; }

    static final VarHandle au_qctrl$aq_bufsz$VH_ = au_qctrl$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("aq_bufsz"));
    static final java.lang.invoke.VarHandle au_qctrl$aq_bufsz$VH() { return au_qctrl$aq_bufsz$VH_; }

    static final MemoryLayout au_qctrl$aq_delay$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_qctrl$aq_delay$LAYOUT() { return au_qctrl$aq_delay$LAYOUT_; }

    static final VarHandle au_qctrl$aq_delay$VH_ = au_qctrl$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("aq_delay"));
    static final java.lang.invoke.VarHandle au_qctrl$aq_delay$VH() { return au_qctrl$aq_delay$VH_; }

    static final MemoryLayout au_qctrl$aq_minfree$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_qctrl$aq_minfree$LAYOUT() { return au_qctrl$aq_minfree$LAYOUT_; }

    static final VarHandle au_qctrl$aq_minfree$VH_ = au_qctrl$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("aq_minfree"));
    static final java.lang.invoke.VarHandle au_qctrl$aq_minfree$VH() { return au_qctrl$aq_minfree$VH_; }

    static final MemoryLayout audit_stat$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("as_version"),
        C_INT.withName("as_numevent"),
        C_INT.withName("as_generated"),
        C_INT.withName("as_nonattrib"),
        C_INT.withName("as_kernel"),
        C_INT.withName("as_audit"),
        C_INT.withName("as_auditctl"),
        C_INT.withName("as_enqueue"),
        C_INT.withName("as_written"),
        C_INT.withName("as_wblocked"),
        C_INT.withName("as_rblocked"),
        C_INT.withName("as_dropped"),
        C_INT.withName("as_totalsize"),
        C_INT.withName("as_memused")
    ).withName("audit_stat");
    static final jdk.incubator.foreign.MemoryLayout audit_stat$struct$LAYOUT() { return audit_stat$struct$LAYOUT_; }

    static final MemoryLayout audit_stat$as_version$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_version$LAYOUT() { return audit_stat$as_version$LAYOUT_; }

    static final VarHandle audit_stat$as_version$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_version"));
    static final java.lang.invoke.VarHandle audit_stat$as_version$VH() { return audit_stat$as_version$VH_; }

    static final MemoryLayout audit_stat$as_numevent$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_numevent$LAYOUT() { return audit_stat$as_numevent$LAYOUT_; }

    static final VarHandle audit_stat$as_numevent$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_numevent"));
    static final java.lang.invoke.VarHandle audit_stat$as_numevent$VH() { return audit_stat$as_numevent$VH_; }

    static final MemoryLayout audit_stat$as_generated$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_generated$LAYOUT() { return audit_stat$as_generated$LAYOUT_; }

    static final VarHandle audit_stat$as_generated$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_generated"));
    static final java.lang.invoke.VarHandle audit_stat$as_generated$VH() { return audit_stat$as_generated$VH_; }

    static final MemoryLayout audit_stat$as_nonattrib$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_nonattrib$LAYOUT() { return audit_stat$as_nonattrib$LAYOUT_; }

    static final VarHandle audit_stat$as_nonattrib$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_nonattrib"));
    static final java.lang.invoke.VarHandle audit_stat$as_nonattrib$VH() { return audit_stat$as_nonattrib$VH_; }

    static final MemoryLayout audit_stat$as_kernel$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_kernel$LAYOUT() { return audit_stat$as_kernel$LAYOUT_; }

    static final VarHandle audit_stat$as_kernel$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_kernel"));
    static final java.lang.invoke.VarHandle audit_stat$as_kernel$VH() { return audit_stat$as_kernel$VH_; }

    static final MemoryLayout audit_stat$as_audit$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_audit$LAYOUT() { return audit_stat$as_audit$LAYOUT_; }

    static final VarHandle audit_stat$as_audit$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_audit"));
    static final java.lang.invoke.VarHandle audit_stat$as_audit$VH() { return audit_stat$as_audit$VH_; }

    static final MemoryLayout audit_stat$as_auditctl$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_auditctl$LAYOUT() { return audit_stat$as_auditctl$LAYOUT_; }

    static final VarHandle audit_stat$as_auditctl$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_auditctl"));
    static final java.lang.invoke.VarHandle audit_stat$as_auditctl$VH() { return audit_stat$as_auditctl$VH_; }

    static final MemoryLayout audit_stat$as_enqueue$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_enqueue$LAYOUT() { return audit_stat$as_enqueue$LAYOUT_; }

    static final VarHandle audit_stat$as_enqueue$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_enqueue"));
    static final java.lang.invoke.VarHandle audit_stat$as_enqueue$VH() { return audit_stat$as_enqueue$VH_; }

    static final MemoryLayout audit_stat$as_written$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_written$LAYOUT() { return audit_stat$as_written$LAYOUT_; }

    static final VarHandle audit_stat$as_written$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_written"));
    static final java.lang.invoke.VarHandle audit_stat$as_written$VH() { return audit_stat$as_written$VH_; }

    static final MemoryLayout audit_stat$as_wblocked$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_wblocked$LAYOUT() { return audit_stat$as_wblocked$LAYOUT_; }

    static final VarHandle audit_stat$as_wblocked$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_wblocked"));
    static final java.lang.invoke.VarHandle audit_stat$as_wblocked$VH() { return audit_stat$as_wblocked$VH_; }

    static final MemoryLayout audit_stat$as_rblocked$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_rblocked$LAYOUT() { return audit_stat$as_rblocked$LAYOUT_; }

    static final VarHandle audit_stat$as_rblocked$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_rblocked"));
    static final java.lang.invoke.VarHandle audit_stat$as_rblocked$VH() { return audit_stat$as_rblocked$VH_; }

    static final MemoryLayout audit_stat$as_dropped$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_dropped$LAYOUT() { return audit_stat$as_dropped$LAYOUT_; }

    static final VarHandle audit_stat$as_dropped$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_dropped"));
    static final java.lang.invoke.VarHandle audit_stat$as_dropped$VH() { return audit_stat$as_dropped$VH_; }

    static final MemoryLayout audit_stat$as_totalsize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_totalsize$LAYOUT() { return audit_stat$as_totalsize$LAYOUT_; }

    static final VarHandle audit_stat$as_totalsize$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_totalsize"));
    static final java.lang.invoke.VarHandle audit_stat$as_totalsize$VH() { return audit_stat$as_totalsize$VH_; }

    static final MemoryLayout audit_stat$as_memused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout audit_stat$as_memused$LAYOUT() { return audit_stat$as_memused$LAYOUT_; }

    static final VarHandle audit_stat$as_memused$VH_ = audit_stat$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("as_memused"));
    static final java.lang.invoke.VarHandle audit_stat$as_memused$VH() { return audit_stat$as_memused$VH_; }

    static final MemoryLayout audit_fstat$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("af_filesz"),
        C_LONG_LONG.withName("af_currsz")
    ).withName("audit_fstat");
    static final jdk.incubator.foreign.MemoryLayout audit_fstat$struct$LAYOUT() { return audit_fstat$struct$LAYOUT_; }

    static final MemoryLayout audit_fstat$af_filesz$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout audit_fstat$af_filesz$LAYOUT() { return audit_fstat$af_filesz$LAYOUT_; }

    static final VarHandle audit_fstat$af_filesz$VH_ = audit_fstat$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("af_filesz"));
    static final java.lang.invoke.VarHandle audit_fstat$af_filesz$VH() { return audit_fstat$af_filesz$VH_; }

    static final MemoryLayout audit_fstat$af_currsz$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout audit_fstat$af_currsz$LAYOUT() { return audit_fstat$af_currsz$LAYOUT_; }

    static final VarHandle audit_fstat$af_currsz$VH_ = audit_fstat$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("af_currsz"));
    static final java.lang.invoke.VarHandle audit_fstat$af_currsz$VH() { return audit_fstat$af_currsz$VH_; }

    static final MemoryLayout au_evclass_map$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("ec_number"),
        MemoryLayout.ofPaddingBits(16),
        C_INT.withName("ec_class")
    ).withName("au_evclass_map");
    static final jdk.incubator.foreign.MemoryLayout au_evclass_map$struct$LAYOUT() { return au_evclass_map$struct$LAYOUT_; }

    static final MemoryLayout au_evclass_map$ec_number$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout au_evclass_map$ec_number$LAYOUT() { return au_evclass_map$ec_number$LAYOUT_; }

    static final VarHandle au_evclass_map$ec_number$VH_ = au_evclass_map$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ec_number"));
    static final java.lang.invoke.VarHandle au_evclass_map$ec_number$VH() { return au_evclass_map$ec_number$VH_; }

    static final MemoryLayout au_evclass_map$ec_class$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout au_evclass_map$ec_class$LAYOUT() { return au_evclass_map$ec_class$LAYOUT_; }

    static final VarHandle au_evclass_map$ec_class$VH_ = au_evclass_map$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ec_class"));
    static final java.lang.invoke.VarHandle au_evclass_map$ec_class$VH() { return au_evclass_map$ec_class$VH_; }

    static final FunctionDescriptor audit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor audit$FUNC() { return audit$FUNC_; }

    static final MethodHandle audit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "audit",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        audit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle audit$MH() { return audit$MH_; }

    static final FunctionDescriptor auditon$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor auditon$FUNC() { return auditon$FUNC_; }

    static final MethodHandle auditon$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "auditon",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        auditon$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle auditon$MH() { return auditon$MH_; }

    static final FunctionDescriptor auditctl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor auditctl$FUNC() { return auditctl$FUNC_; }

    static final MethodHandle auditctl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "auditctl",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        auditctl$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle auditctl$MH() { return auditctl$MH_; }

    static final FunctionDescriptor getauid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor getauid$FUNC() { return getauid$FUNC_; }

    static final MethodHandle getauid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getauid",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        getauid$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getauid$MH() { return getauid$MH_; }

    static final FunctionDescriptor setauid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor setauid$FUNC() { return setauid$FUNC_; }

    static final MethodHandle setauid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "setauid",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        setauid$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle setauid$MH() { return setauid$MH_; }

    static final FunctionDescriptor getaudit_addr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor getaudit_addr$FUNC() { return getaudit_addr$FUNC_; }

    static final MethodHandle getaudit_addr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getaudit_addr",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        getaudit_addr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getaudit_addr$MH() { return getaudit_addr$MH_; }

    static final FunctionDescriptor setaudit_addr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor setaudit_addr$FUNC() { return setaudit_addr$FUNC_; }

    static final MethodHandle setaudit_addr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "setaudit_addr",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        setaudit_addr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle setaudit_addr$MH() { return setaudit_addr$MH_; }

    static final FunctionDescriptor getaudit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor getaudit$FUNC() { return getaudit$FUNC_; }

    static final MethodHandle getaudit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getaudit",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        getaudit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getaudit$MH() { return getaudit$MH_; }

    static final FunctionDescriptor setaudit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor setaudit$FUNC() { return setaudit$FUNC_; }

    static final MethodHandle setaudit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "setaudit",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        setaudit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle setaudit$MH() { return setaudit$MH_; }

    static final MemoryLayout mach_port_status$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("mps_pset"),
        C_INT.withName("mps_seqno"),
        C_INT.withName("mps_mscount"),
        C_INT.withName("mps_qlimit"),
        C_INT.withName("mps_msgcount"),
        C_INT.withName("mps_sorights"),
        C_INT.withName("mps_srights"),
        C_INT.withName("mps_pdrequest"),
        C_INT.withName("mps_nsrequest"),
        C_INT.withName("mps_flags")
    ).withName("mach_port_status");
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$struct$LAYOUT() { return mach_port_status$struct$LAYOUT_; }

    static final MemoryLayout mach_port_status$mps_pset$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$mps_pset$LAYOUT() { return mach_port_status$mps_pset$LAYOUT_; }

    static final VarHandle mach_port_status$mps_pset$VH_ = mach_port_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mps_pset"));
    static final java.lang.invoke.VarHandle mach_port_status$mps_pset$VH() { return mach_port_status$mps_pset$VH_; }

    static final MemoryLayout mach_port_status$mps_seqno$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$mps_seqno$LAYOUT() { return mach_port_status$mps_seqno$LAYOUT_; }

    static final VarHandle mach_port_status$mps_seqno$VH_ = mach_port_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mps_seqno"));
    static final java.lang.invoke.VarHandle mach_port_status$mps_seqno$VH() { return mach_port_status$mps_seqno$VH_; }

    static final MemoryLayout mach_port_status$mps_mscount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$mps_mscount$LAYOUT() { return mach_port_status$mps_mscount$LAYOUT_; }

    static final VarHandle mach_port_status$mps_mscount$VH_ = mach_port_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mps_mscount"));
    static final java.lang.invoke.VarHandle mach_port_status$mps_mscount$VH() { return mach_port_status$mps_mscount$VH_; }

    static final MemoryLayout mach_port_status$mps_qlimit$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$mps_qlimit$LAYOUT() { return mach_port_status$mps_qlimit$LAYOUT_; }

    static final VarHandle mach_port_status$mps_qlimit$VH_ = mach_port_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mps_qlimit"));
    static final java.lang.invoke.VarHandle mach_port_status$mps_qlimit$VH() { return mach_port_status$mps_qlimit$VH_; }

    static final MemoryLayout mach_port_status$mps_msgcount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$mps_msgcount$LAYOUT() { return mach_port_status$mps_msgcount$LAYOUT_; }

    static final VarHandle mach_port_status$mps_msgcount$VH_ = mach_port_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mps_msgcount"));
    static final java.lang.invoke.VarHandle mach_port_status$mps_msgcount$VH() { return mach_port_status$mps_msgcount$VH_; }

    static final MemoryLayout mach_port_status$mps_sorights$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$mps_sorights$LAYOUT() { return mach_port_status$mps_sorights$LAYOUT_; }

    static final VarHandle mach_port_status$mps_sorights$VH_ = mach_port_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mps_sorights"));
    static final java.lang.invoke.VarHandle mach_port_status$mps_sorights$VH() { return mach_port_status$mps_sorights$VH_; }

    static final MemoryLayout mach_port_status$mps_srights$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$mps_srights$LAYOUT() { return mach_port_status$mps_srights$LAYOUT_; }

    static final VarHandle mach_port_status$mps_srights$VH_ = mach_port_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mps_srights"));
    static final java.lang.invoke.VarHandle mach_port_status$mps_srights$VH() { return mach_port_status$mps_srights$VH_; }

    static final MemoryLayout mach_port_status$mps_pdrequest$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$mps_pdrequest$LAYOUT() { return mach_port_status$mps_pdrequest$LAYOUT_; }

    static final VarHandle mach_port_status$mps_pdrequest$VH_ = mach_port_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mps_pdrequest"));
    static final java.lang.invoke.VarHandle mach_port_status$mps_pdrequest$VH() { return mach_port_status$mps_pdrequest$VH_; }

    static final MemoryLayout mach_port_status$mps_nsrequest$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$mps_nsrequest$LAYOUT() { return mach_port_status$mps_nsrequest$LAYOUT_; }

    static final VarHandle mach_port_status$mps_nsrequest$VH_ = mach_port_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mps_nsrequest"));
    static final java.lang.invoke.VarHandle mach_port_status$mps_nsrequest$VH() { return mach_port_status$mps_nsrequest$VH_; }

    static final MemoryLayout mach_port_status$mps_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_status$mps_flags$LAYOUT() { return mach_port_status$mps_flags$LAYOUT_; }

    static final VarHandle mach_port_status$mps_flags$VH_ = mach_port_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mps_flags"));
    static final java.lang.invoke.VarHandle mach_port_status$mps_flags$VH() { return mach_port_status$mps_flags$VH_; }

    static final MemoryLayout mach_port_limits$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("mpl_qlimit")
    ).withName("mach_port_limits");
    static final jdk.incubator.foreign.MemoryLayout mach_port_limits$struct$LAYOUT() { return mach_port_limits$struct$LAYOUT_; }

    static final MemoryLayout mach_port_limits$mpl_qlimit$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_limits$mpl_qlimit$LAYOUT() { return mach_port_limits$mpl_qlimit$LAYOUT_; }

    static final VarHandle mach_port_limits$mpl_qlimit$VH_ = mach_port_limits$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mpl_qlimit"));
    static final java.lang.invoke.VarHandle mach_port_limits$mpl_qlimit$VH() { return mach_port_limits$mpl_qlimit$VH_; }

    static final MemoryLayout mach_port_info_ext$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("mps_pset"),
            C_INT.withName("mps_seqno"),
            C_INT.withName("mps_mscount"),
            C_INT.withName("mps_qlimit"),
            C_INT.withName("mps_msgcount"),
            C_INT.withName("mps_sorights"),
            C_INT.withName("mps_srights"),
            C_INT.withName("mps_pdrequest"),
            C_INT.withName("mps_nsrequest"),
            C_INT.withName("mps_flags")
        ).withName("mpie_status"),
        C_INT.withName("mpie_boost_cnt"),
        MemoryLayout.ofSequence(6, C_INT).withName("reserved")
    ).withName("mach_port_info_ext");
    static final jdk.incubator.foreign.MemoryLayout mach_port_info_ext$struct$LAYOUT() { return mach_port_info_ext$struct$LAYOUT_; }

    static final MemoryLayout mach_port_info_ext$mpie_boost_cnt$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_info_ext$mpie_boost_cnt$LAYOUT() { return mach_port_info_ext$mpie_boost_cnt$LAYOUT_; }

    static final VarHandle mach_port_info_ext$mpie_boost_cnt$VH_ = mach_port_info_ext$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mpie_boost_cnt"));
    static final java.lang.invoke.VarHandle mach_port_info_ext$mpie_boost_cnt$VH() { return mach_port_info_ext$mpie_boost_cnt$VH_; }

    static final MemoryLayout mach_port_qos$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT,
        C_INT.withName("len")
    ).withName("mach_port_qos");
    static final jdk.incubator.foreign.MemoryLayout mach_port_qos$struct$LAYOUT() { return mach_port_qos$struct$LAYOUT_; }

    static final MemoryLayout mach_port_qos$len$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_qos$len$LAYOUT() { return mach_port_qos$len$LAYOUT_; }

    static final VarHandle mach_port_qos$len$VH_ = mach_port_qos$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("len"));
    static final java.lang.invoke.VarHandle mach_port_qos$len$VH() { return mach_port_qos$len$VH_; }

    static final MemoryLayout mach_port_options$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("flags"),
        MemoryLayout.ofStruct(
            C_INT.withName("mpl_qlimit")
        ).withName("mpl"),
        MemoryLayout.ofSequence(2, C_LONG_LONG).withName("reserved"),
        C_INT.withName("work_interval_port")
    ).withName("mach_port_options");
    static final jdk.incubator.foreign.MemoryLayout mach_port_options$struct$LAYOUT() { return mach_port_options$struct$LAYOUT_; }

    static final MemoryLayout mach_port_options$flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_options$flags$LAYOUT() { return mach_port_options$flags$LAYOUT_; }

    static final VarHandle mach_port_options$flags$VH_ = mach_port_options$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("flags"));
    static final java.lang.invoke.VarHandle mach_port_options$flags$VH() { return mach_port_options$flags$VH_; }

    static final MemoryLayout mach_port_options$work_interval_port$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout mach_port_options$work_interval_port$LAYOUT() { return mach_port_options$work_interval_port$LAYOUT_; }

    static final VarHandle mach_port_options$work_interval_port$VH_ = mach_port_options$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("work_interval_port"));
    static final java.lang.invoke.VarHandle mach_port_options$work_interval_port$VH() { return mach_port_options$work_interval_port$VH_; }

    static final int kGUARD_EXC_DESTROY() { return (int)1L; }

    static final int kGUARD_EXC_MOD_REFS() { return (int)2L; }

    static final int kGUARD_EXC_SET_CONTEXT() { return (int)4L; }

    static final int kGUARD_EXC_UNGUARDED() { return (int)8L; }

    static final int kGUARD_EXC_INCORRECT_GUARD() { return (int)16L; }

    static final int kGUARD_EXC_IMMOVABLE() { return (int)32L; }

    static final int kGUARD_EXC_STRICT_REPLY() { return (int)64L; }

    static final int kGUARD_EXC_MSG_FILTERED() { return (int)128L; }

    static final int kGUARD_EXC_INVALID_RIGHT() { return (int)256L; }

    static final int kGUARD_EXC_INVALID_NAME() { return (int)512L; }

    static final int kGUARD_EXC_INVALID_VALUE() { return (int)1024L; }

    static final int kGUARD_EXC_INVALID_ARGUMENT() { return (int)2048L; }

    static final int kGUARD_EXC_RIGHT_EXISTS() { return (int)4096L; }

    static final int kGUARD_EXC_KERN_NO_SPACE() { return (int)8192L; }

    static final int kGUARD_EXC_KERN_FAILURE() { return (int)16384L; }

    static final int kGUARD_EXC_KERN_RESOURCE() { return (int)32768L; }

    static final int kGUARD_EXC_SEND_INVALID_REPLY() { return (int)65536L; }

    static final int kGUARD_EXC_SEND_INVALID_VOUCHER() { return (int)131072L; }

    static final int kGUARD_EXC_SEND_INVALID_RIGHT() { return (int)262144L; }

    static final int kGUARD_EXC_RCV_INVALID_NAME() { return (int)524288L; }

    static final int kGUARD_EXC_RCV_GUARDED_DESC() { return (int)1048576L; }

    static final FunctionDescriptor audit_session_self$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor audit_session_self$FUNC() { return audit_session_self$FUNC_; }

    static final MethodHandle audit_session_self$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "audit_session_self",
        "()I",
        audit_session_self$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle audit_session_self$MH() { return audit_session_self$MH_; }

    static final FunctionDescriptor audit_session_join$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor audit_session_join$FUNC() { return audit_session_join$FUNC_; }

    static final MethodHandle audit_session_join$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "audit_session_join",
        "(I)I",
        audit_session_join$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle audit_session_join$MH() { return audit_session_join$MH_; }

    static final FunctionDescriptor audit_session_port$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor audit_session_port$FUNC() { return audit_session_port$FUNC_; }

    static final MethodHandle audit_session_port$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "audit_session_port",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        audit_session_port$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle audit_session_port$MH() { return audit_session_port$MH_; }

    static final MemoryLayout xucred$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cr_version"),
        C_INT.withName("cr_uid"),
        C_SHORT.withName("cr_ngroups"),
        MemoryLayout.ofPaddingBits(16),
        MemoryLayout.ofSequence(16, C_INT).withName("cr_groups")
    ).withName("xucred");
    static final jdk.incubator.foreign.MemoryLayout xucred$struct$LAYOUT() { return xucred$struct$LAYOUT_; }

    static final MemoryLayout xucred$cr_version$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout xucred$cr_version$LAYOUT() { return xucred$cr_version$LAYOUT_; }

    static final VarHandle xucred$cr_version$VH_ = xucred$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cr_version"));
    static final java.lang.invoke.VarHandle xucred$cr_version$VH() { return xucred$cr_version$VH_; }

    static final MemoryLayout xucred$cr_uid$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout xucred$cr_uid$LAYOUT() { return xucred$cr_uid$LAYOUT_; }

    static final VarHandle xucred$cr_uid$VH_ = xucred$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cr_uid"));
    static final java.lang.invoke.VarHandle xucred$cr_uid$VH() { return xucred$cr_uid$VH_; }

    static final MemoryLayout xucred$cr_ngroups$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout xucred$cr_ngroups$LAYOUT() { return xucred$cr_ngroups$LAYOUT_; }

    static final VarHandle xucred$cr_ngroups$VH_ = xucred$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cr_ngroups"));
    static final java.lang.invoke.VarHandle xucred$cr_ngroups$VH() { return xucred$cr_ngroups$VH_; }

    static final MemoryLayout timeval$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("tv_sec"),
        C_INT.withName("tv_usec"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("timeval");
    static final jdk.incubator.foreign.MemoryLayout timeval$struct$LAYOUT() { return timeval$struct$LAYOUT_; }

    static final MemoryLayout timeval$tv_sec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout timeval$tv_sec$LAYOUT() { return timeval$tv_sec$LAYOUT_; }

    static final VarHandle timeval$tv_sec$VH_ = timeval$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("tv_sec"));
    static final java.lang.invoke.VarHandle timeval$tv_sec$VH() { return timeval$tv_sec$VH_; }

    static final MemoryLayout timeval$tv_usec$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout timeval$tv_usec$LAYOUT() { return timeval$tv_usec$LAYOUT_; }

    static final VarHandle timeval$tv_usec$VH_ = timeval$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tv_usec"));
    static final java.lang.invoke.VarHandle timeval$tv_usec$VH() { return timeval$tv_usec$VH_; }

    static final MemoryLayout timeval64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("tv_sec"),
        C_LONG_LONG.withName("tv_usec")
    ).withName("timeval64");
    static final jdk.incubator.foreign.MemoryLayout timeval64$struct$LAYOUT() { return timeval64$struct$LAYOUT_; }

    static final MemoryLayout timeval64$tv_sec$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout timeval64$tv_sec$LAYOUT() { return timeval64$tv_sec$LAYOUT_; }

    static final VarHandle timeval64$tv_sec$VH_ = timeval64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("tv_sec"));
    static final java.lang.invoke.VarHandle timeval64$tv_sec$VH() { return timeval64$tv_sec$VH_; }

    static final MemoryLayout timeval64$tv_usec$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout timeval64$tv_usec$LAYOUT() { return timeval64$tv_usec$LAYOUT_; }

    static final VarHandle timeval64$tv_usec$VH_ = timeval64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("tv_usec"));
    static final java.lang.invoke.VarHandle timeval64$tv_usec$VH() { return timeval64$tv_usec$VH_; }

    static final MemoryLayout itimerval$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_INT.withName("tv_usec"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("it_interval"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_INT.withName("tv_usec"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("it_value")
    ).withName("itimerval");
    static final jdk.incubator.foreign.MemoryLayout itimerval$struct$LAYOUT() { return itimerval$struct$LAYOUT_; }

    static final MemoryLayout timezone$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("tz_minuteswest"),
        C_INT.withName("tz_dsttime")
    ).withName("timezone");
    static final jdk.incubator.foreign.MemoryLayout timezone$struct$LAYOUT() { return timezone$struct$LAYOUT_; }

    static final MemoryLayout timezone$tz_minuteswest$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout timezone$tz_minuteswest$LAYOUT() { return timezone$tz_minuteswest$LAYOUT_; }

    static final VarHandle timezone$tz_minuteswest$VH_ = timezone$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tz_minuteswest"));
    static final java.lang.invoke.VarHandle timezone$tz_minuteswest$VH() { return timezone$tz_minuteswest$VH_; }

    static final MemoryLayout timezone$tz_dsttime$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout timezone$tz_dsttime$LAYOUT() { return timezone$tz_dsttime$LAYOUT_; }

    static final VarHandle timezone$tz_dsttime$VH_ = timezone$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tz_dsttime"));
    static final java.lang.invoke.VarHandle timezone$tz_dsttime$VH() { return timezone$tz_dsttime$VH_; }

    static final MemoryLayout clockinfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("hz"),
        C_INT.withName("tick"),
        C_INT.withName("tickadj"),
        C_INT.withName("stathz"),
        C_INT.withName("profhz")
    ).withName("clockinfo");
    static final jdk.incubator.foreign.MemoryLayout clockinfo$struct$LAYOUT() { return clockinfo$struct$LAYOUT_; }

    static final MemoryLayout clockinfo$hz$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout clockinfo$hz$LAYOUT() { return clockinfo$hz$LAYOUT_; }

    static final VarHandle clockinfo$hz$VH_ = clockinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("hz"));
    static final java.lang.invoke.VarHandle clockinfo$hz$VH() { return clockinfo$hz$VH_; }

    static final MemoryLayout clockinfo$tick$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout clockinfo$tick$LAYOUT() { return clockinfo$tick$LAYOUT_; }

    static final VarHandle clockinfo$tick$VH_ = clockinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tick"));
    static final java.lang.invoke.VarHandle clockinfo$tick$VH() { return clockinfo$tick$VH_; }

    static final MemoryLayout clockinfo$tickadj$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout clockinfo$tickadj$LAYOUT() { return clockinfo$tickadj$LAYOUT_; }

    static final VarHandle clockinfo$tickadj$VH_ = clockinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tickadj"));
    static final java.lang.invoke.VarHandle clockinfo$tickadj$VH() { return clockinfo$tickadj$VH_; }

    static final MemoryLayout clockinfo$stathz$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout clockinfo$stathz$LAYOUT() { return clockinfo$stathz$LAYOUT_; }

    static final VarHandle clockinfo$stathz$VH_ = clockinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("stathz"));
    static final java.lang.invoke.VarHandle clockinfo$stathz$VH() { return clockinfo$stathz$VH_; }

    static final MemoryLayout clockinfo$profhz$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout clockinfo$profhz$LAYOUT() { return clockinfo$profhz$LAYOUT_; }

    static final VarHandle clockinfo$profhz$VH_ = clockinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("profhz"));
    static final java.lang.invoke.VarHandle clockinfo$profhz$VH() { return clockinfo$profhz$VH_; }

    static final FunctionDescriptor adjtime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor adjtime$FUNC() { return adjtime$FUNC_; }

    static final MethodHandle adjtime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "adjtime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        adjtime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle adjtime$MH() { return adjtime$MH_; }

    static final FunctionDescriptor futimes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor futimes$FUNC() { return futimes$FUNC_; }

    static final MethodHandle futimes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "futimes",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        futimes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle futimes$MH() { return futimes$MH_; }

    static final FunctionDescriptor lutimes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor lutimes$FUNC() { return lutimes$FUNC_; }

    static final MethodHandle lutimes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lutimes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        lutimes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle lutimes$MH() { return lutimes$MH_; }

    static final FunctionDescriptor settimeofday$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor settimeofday$FUNC() { return settimeofday$FUNC_; }

    static final MethodHandle settimeofday$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "settimeofday",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        settimeofday$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle settimeofday$MH() { return settimeofday$MH_; }

    static final FunctionDescriptor getitimer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor getitimer$FUNC() { return getitimer$FUNC_; }

    static final MethodHandle getitimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getitimer",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        getitimer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getitimer$MH() { return getitimer$MH_; }

    static final FunctionDescriptor gettimeofday$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor gettimeofday$FUNC() { return gettimeofday$FUNC_; }

    static final MethodHandle gettimeofday$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "gettimeofday",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        gettimeofday$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle gettimeofday$MH() { return gettimeofday$MH_; }

    static final FunctionDescriptor select$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor select$FUNC() { return select$FUNC_; }

    static final MethodHandle select$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "select",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        select$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle select$MH() { return select$MH_; }

    static final FunctionDescriptor setitimer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor setitimer$FUNC() { return setitimer$FUNC_; }

    static final MethodHandle setitimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "setitimer",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        setitimer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle setitimer$MH() { return setitimer$MH_; }

    static final FunctionDescriptor utimes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor utimes$FUNC() { return utimes$FUNC_; }

    static final MethodHandle utimes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "utimes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        utimes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle utimes$MH() { return utimes$MH_; }

    static final MemoryLayout fsobj_id$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("fid_objno"),
        C_INT.withName("fid_generation")
    ).withName("fsobj_id");
    static final jdk.incubator.foreign.MemoryLayout fsobj_id$struct$LAYOUT() { return fsobj_id$struct$LAYOUT_; }

    static final MemoryLayout fsobj_id$fid_objno$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fsobj_id$fid_objno$LAYOUT() { return fsobj_id$fid_objno$LAYOUT_; }

    static final VarHandle fsobj_id$fid_objno$VH_ = fsobj_id$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fid_objno"));
    static final java.lang.invoke.VarHandle fsobj_id$fid_objno$VH() { return fsobj_id$fid_objno$VH_; }

    static final MemoryLayout fsobj_id$fid_generation$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fsobj_id$fid_generation$LAYOUT() { return fsobj_id$fid_generation$LAYOUT_; }

    static final VarHandle fsobj_id$fid_generation$VH_ = fsobj_id$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fid_generation"));
    static final java.lang.invoke.VarHandle fsobj_id$fid_generation$VH() { return fsobj_id$fid_generation$VH_; }

    static final MemoryLayout attrlist$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("bitmapcount"),
        C_SHORT.withName("reserved"),
        C_INT.withName("commonattr"),
        C_INT.withName("volattr"),
        C_INT.withName("dirattr"),
        C_INT.withName("fileattr"),
        C_INT.withName("forkattr")
    ).withName("attrlist");
    static final jdk.incubator.foreign.MemoryLayout attrlist$struct$LAYOUT() { return attrlist$struct$LAYOUT_; }

    static final MemoryLayout attrlist$bitmapcount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout attrlist$bitmapcount$LAYOUT() { return attrlist$bitmapcount$LAYOUT_; }

    static final VarHandle attrlist$bitmapcount$VH_ = attrlist$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("bitmapcount"));
    static final java.lang.invoke.VarHandle attrlist$bitmapcount$VH() { return attrlist$bitmapcount$VH_; }

    static final MemoryLayout attrlist$reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout attrlist$reserved$LAYOUT() { return attrlist$reserved$LAYOUT_; }

    static final VarHandle attrlist$reserved$VH_ = attrlist$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("reserved"));
    static final java.lang.invoke.VarHandle attrlist$reserved$VH() { return attrlist$reserved$VH_; }

    static final MemoryLayout attrlist$commonattr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attrlist$commonattr$LAYOUT() { return attrlist$commonattr$LAYOUT_; }

    static final VarHandle attrlist$commonattr$VH_ = attrlist$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("commonattr"));
    static final java.lang.invoke.VarHandle attrlist$commonattr$VH() { return attrlist$commonattr$VH_; }

    static final MemoryLayout attrlist$volattr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attrlist$volattr$LAYOUT() { return attrlist$volattr$LAYOUT_; }

    static final VarHandle attrlist$volattr$VH_ = attrlist$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("volattr"));
    static final java.lang.invoke.VarHandle attrlist$volattr$VH() { return attrlist$volattr$VH_; }

    static final MemoryLayout attrlist$dirattr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attrlist$dirattr$LAYOUT() { return attrlist$dirattr$LAYOUT_; }

    static final VarHandle attrlist$dirattr$VH_ = attrlist$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dirattr"));
    static final java.lang.invoke.VarHandle attrlist$dirattr$VH() { return attrlist$dirattr$VH_; }

    static final MemoryLayout attrlist$fileattr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attrlist$fileattr$LAYOUT() { return attrlist$fileattr$LAYOUT_; }

    static final VarHandle attrlist$fileattr$VH_ = attrlist$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fileattr"));
    static final java.lang.invoke.VarHandle attrlist$fileattr$VH() { return attrlist$fileattr$VH_; }

    static final MemoryLayout attrlist$forkattr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attrlist$forkattr$LAYOUT() { return attrlist$forkattr$LAYOUT_; }

    static final VarHandle attrlist$forkattr$VH_ = attrlist$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("forkattr"));
    static final java.lang.invoke.VarHandle attrlist$forkattr$VH() { return attrlist$forkattr$VH_; }

    static final MemoryLayout attribute_set$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("commonattr"),
        C_INT.withName("volattr"),
        C_INT.withName("dirattr"),
        C_INT.withName("fileattr"),
        C_INT.withName("forkattr")
    ).withName("attribute_set");
    static final jdk.incubator.foreign.MemoryLayout attribute_set$struct$LAYOUT() { return attribute_set$struct$LAYOUT_; }

    static final MemoryLayout attribute_set$commonattr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attribute_set$commonattr$LAYOUT() { return attribute_set$commonattr$LAYOUT_; }

    static final VarHandle attribute_set$commonattr$VH_ = attribute_set$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("commonattr"));
    static final java.lang.invoke.VarHandle attribute_set$commonattr$VH() { return attribute_set$commonattr$VH_; }

    static final MemoryLayout attribute_set$volattr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attribute_set$volattr$LAYOUT() { return attribute_set$volattr$LAYOUT_; }

    static final VarHandle attribute_set$volattr$VH_ = attribute_set$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("volattr"));
    static final java.lang.invoke.VarHandle attribute_set$volattr$VH() { return attribute_set$volattr$VH_; }

    static final MemoryLayout attribute_set$dirattr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attribute_set$dirattr$LAYOUT() { return attribute_set$dirattr$LAYOUT_; }

    static final VarHandle attribute_set$dirattr$VH_ = attribute_set$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dirattr"));
    static final java.lang.invoke.VarHandle attribute_set$dirattr$VH() { return attribute_set$dirattr$VH_; }

    static final MemoryLayout attribute_set$fileattr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attribute_set$fileattr$LAYOUT() { return attribute_set$fileattr$LAYOUT_; }

    static final VarHandle attribute_set$fileattr$VH_ = attribute_set$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fileattr"));
    static final java.lang.invoke.VarHandle attribute_set$fileattr$VH() { return attribute_set$fileattr$VH_; }

    static final MemoryLayout attribute_set$forkattr$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attribute_set$forkattr$LAYOUT() { return attribute_set$forkattr$LAYOUT_; }

    static final VarHandle attribute_set$forkattr$VH_ = attribute_set$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("forkattr"));
    static final java.lang.invoke.VarHandle attribute_set$forkattr$VH() { return attribute_set$forkattr$VH_; }

    static final MemoryLayout attrreference$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("attr_dataoffset"),
        C_INT.withName("attr_length")
    ).withName("attrreference");
    static final jdk.incubator.foreign.MemoryLayout attrreference$struct$LAYOUT() { return attrreference$struct$LAYOUT_; }

    static final MemoryLayout attrreference$attr_dataoffset$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attrreference$attr_dataoffset$LAYOUT() { return attrreference$attr_dataoffset$LAYOUT_; }

    static final VarHandle attrreference$attr_dataoffset$VH_ = attrreference$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("attr_dataoffset"));
    static final java.lang.invoke.VarHandle attrreference$attr_dataoffset$VH() { return attrreference$attr_dataoffset$VH_; }

    static final MemoryLayout attrreference$attr_length$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout attrreference$attr_length$LAYOUT() { return attrreference$attr_length$LAYOUT_; }

    static final VarHandle attrreference$attr_length$VH_ = attrreference$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("attr_length"));
    static final java.lang.invoke.VarHandle attrreference$attr_length$VH() { return attrreference$attr_length$VH_; }

    static final MemoryLayout diskextent$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("startblock"),
        C_INT.withName("blockcount")
    ).withName("diskextent");
    static final jdk.incubator.foreign.MemoryLayout diskextent$struct$LAYOUT() { return diskextent$struct$LAYOUT_; }

    static final MemoryLayout diskextent$startblock$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout diskextent$startblock$LAYOUT() { return diskextent$startblock$LAYOUT_; }

    static final VarHandle diskextent$startblock$VH_ = diskextent$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("startblock"));
    static final java.lang.invoke.VarHandle diskextent$startblock$VH() { return diskextent$startblock$VH_; }

    static final MemoryLayout diskextent$blockcount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout diskextent$blockcount$LAYOUT() { return diskextent$blockcount$LAYOUT_; }

    static final VarHandle diskextent$blockcount$VH_ = diskextent$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("blockcount"));
    static final java.lang.invoke.VarHandle diskextent$blockcount$VH() { return diskextent$blockcount$VH_; }

    static final MemoryLayout vol_capabilities_attr$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(4, C_INT).withName("capabilities"),
        MemoryLayout.ofSequence(4, C_INT).withName("valid")
    ).withName("vol_capabilities_attr");
    static final jdk.incubator.foreign.MemoryLayout vol_capabilities_attr$struct$LAYOUT() { return vol_capabilities_attr$struct$LAYOUT_; }

    static final MemoryLayout vol_attributes_attr$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("commonattr"),
            C_INT.withName("volattr"),
            C_INT.withName("dirattr"),
            C_INT.withName("fileattr"),
            C_INT.withName("forkattr")
        ).withName("validattr"),
        MemoryLayout.ofStruct(
            C_INT.withName("commonattr"),
            C_INT.withName("volattr"),
            C_INT.withName("dirattr"),
            C_INT.withName("fileattr"),
            C_INT.withName("forkattr")
        ).withName("nativeattr")
    ).withName("vol_attributes_attr");
    static final jdk.incubator.foreign.MemoryLayout vol_attributes_attr$struct$LAYOUT() { return vol_attributes_attr$struct$LAYOUT_; }

    static final MemoryLayout fssearchblock$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("returnattrs"),
        C_POINTER.withName("returnbuffer"),
        C_LONG.withName("returnbuffersize"),
        C_LONG.withName("maxmatches"),
        MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_INT.withName("tv_usec"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("timelimit"),
        C_POINTER.withName("searchparams1"),
        C_LONG.withName("sizeofsearchparams1"),
        C_POINTER.withName("searchparams2"),
        C_LONG.withName("sizeofsearchparams2"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("bitmapcount"),
            C_SHORT.withName("reserved"),
            C_INT.withName("commonattr"),
            C_INT.withName("volattr"),
            C_INT.withName("dirattr"),
            C_INT.withName("fileattr"),
            C_INT.withName("forkattr")
        ).withName("searchattrs")
    ).withName("fssearchblock");
    static final jdk.incubator.foreign.MemoryLayout fssearchblock$struct$LAYOUT() { return fssearchblock$struct$LAYOUT_; }

    static final MemoryLayout fssearchblock$returnattrs$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fssearchblock$returnattrs$LAYOUT() { return fssearchblock$returnattrs$LAYOUT_; }

    static final VarHandle fssearchblock$returnattrs$VH_ = MemoryHandles.asAddressVarHandle(fssearchblock$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("returnattrs")));
    static final java.lang.invoke.VarHandle fssearchblock$returnattrs$VH() { return fssearchblock$returnattrs$VH_; }

    static final MemoryLayout fssearchblock$returnbuffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fssearchblock$returnbuffer$LAYOUT() { return fssearchblock$returnbuffer$LAYOUT_; }

    static final VarHandle fssearchblock$returnbuffer$VH_ = MemoryHandles.asAddressVarHandle(fssearchblock$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("returnbuffer")));
    static final java.lang.invoke.VarHandle fssearchblock$returnbuffer$VH() { return fssearchblock$returnbuffer$VH_; }

    static final MemoryLayout fssearchblock$returnbuffersize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fssearchblock$returnbuffersize$LAYOUT() { return fssearchblock$returnbuffersize$LAYOUT_; }

    static final VarHandle fssearchblock$returnbuffersize$VH_ = fssearchblock$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("returnbuffersize"));
    static final java.lang.invoke.VarHandle fssearchblock$returnbuffersize$VH() { return fssearchblock$returnbuffersize$VH_; }

    static final MemoryLayout fssearchblock$maxmatches$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fssearchblock$maxmatches$LAYOUT() { return fssearchblock$maxmatches$LAYOUT_; }

    static final VarHandle fssearchblock$maxmatches$VH_ = fssearchblock$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("maxmatches"));
    static final java.lang.invoke.VarHandle fssearchblock$maxmatches$VH() { return fssearchblock$maxmatches$VH_; }

    static final MemoryLayout fssearchblock$searchparams1$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fssearchblock$searchparams1$LAYOUT() { return fssearchblock$searchparams1$LAYOUT_; }

    static final VarHandle fssearchblock$searchparams1$VH_ = MemoryHandles.asAddressVarHandle(fssearchblock$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("searchparams1")));
    static final java.lang.invoke.VarHandle fssearchblock$searchparams1$VH() { return fssearchblock$searchparams1$VH_; }

    static final MemoryLayout fssearchblock$sizeofsearchparams1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fssearchblock$sizeofsearchparams1$LAYOUT() { return fssearchblock$sizeofsearchparams1$LAYOUT_; }

    static final VarHandle fssearchblock$sizeofsearchparams1$VH_ = fssearchblock$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("sizeofsearchparams1"));
    static final java.lang.invoke.VarHandle fssearchblock$sizeofsearchparams1$VH() { return fssearchblock$sizeofsearchparams1$VH_; }

    static final MemoryLayout fssearchblock$searchparams2$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fssearchblock$searchparams2$LAYOUT() { return fssearchblock$searchparams2$LAYOUT_; }

    static final VarHandle fssearchblock$searchparams2$VH_ = MemoryHandles.asAddressVarHandle(fssearchblock$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("searchparams2")));
    static final java.lang.invoke.VarHandle fssearchblock$searchparams2$VH() { return fssearchblock$searchparams2$VH_; }

    static final MemoryLayout fssearchblock$sizeofsearchparams2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout fssearchblock$sizeofsearchparams2$LAYOUT() { return fssearchblock$sizeofsearchparams2$LAYOUT_; }

    static final VarHandle fssearchblock$sizeofsearchparams2$VH_ = fssearchblock$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("sizeofsearchparams2"));
    static final java.lang.invoke.VarHandle fssearchblock$sizeofsearchparams2$VH() { return fssearchblock$sizeofsearchparams2$VH_; }

    static final MemoryLayout searchstate$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ss_union_flags"),
        C_INT.withName("ss_union_layer"),
        MemoryLayout.ofSequence(548, C_CHAR).withName("ss_fsstate")
    ).withName("searchstate");
    static final jdk.incubator.foreign.MemoryLayout searchstate$struct$LAYOUT() { return searchstate$struct$LAYOUT_; }

    static final MemoryLayout searchstate$ss_union_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout searchstate$ss_union_flags$LAYOUT() { return searchstate$ss_union_flags$LAYOUT_; }

    static final VarHandle searchstate$ss_union_flags$VH_ = searchstate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ss_union_flags"));
    static final java.lang.invoke.VarHandle searchstate$ss_union_flags$VH() { return searchstate$ss_union_flags$VH_; }

    static final MemoryLayout searchstate$ss_union_layer$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout searchstate$ss_union_layer$LAYOUT() { return searchstate$ss_union_layer$LAYOUT_; }

    static final VarHandle searchstate$ss_union_layer$VH_ = searchstate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ss_union_layer"));
    static final java.lang.invoke.VarHandle searchstate$ss_union_layer$VH() { return searchstate$ss_union_layer$VH_; }

    static final MemoryLayout fsid$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_INT).withName("val")
    ).withName("fsid");
    static final jdk.incubator.foreign.MemoryLayout fsid$struct$LAYOUT() { return fsid$struct$LAYOUT_; }

    static final MemoryLayout statfs64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("f_bsize"),
        C_INT.withName("f_iosize"),
        C_LONG_LONG.withName("f_blocks"),
        C_LONG_LONG.withName("f_bfree"),
        C_LONG_LONG.withName("f_bavail"),
        C_LONG_LONG.withName("f_files"),
        C_LONG_LONG.withName("f_ffree"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_INT).withName("val")
        ).withName("f_fsid"),
        C_INT.withName("f_owner"),
        C_INT.withName("f_type"),
        C_INT.withName("f_flags"),
        C_INT.withName("f_fssubtype"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("f_fstypename"),
        MemoryLayout.ofSequence(1024, C_CHAR).withName("f_mntonname"),
        MemoryLayout.ofSequence(1024, C_CHAR).withName("f_mntfromname"),
        C_INT.withName("f_flags_ext"),
        MemoryLayout.ofSequence(7, C_INT).withName("f_reserved")
    ).withName("statfs64");
    static final jdk.incubator.foreign.MemoryLayout statfs64$struct$LAYOUT() { return statfs64$struct$LAYOUT_; }

    static final MemoryLayout statfs64$f_bsize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_bsize$LAYOUT() { return statfs64$f_bsize$LAYOUT_; }

    static final VarHandle statfs64$f_bsize$VH_ = statfs64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_bsize"));
    static final java.lang.invoke.VarHandle statfs64$f_bsize$VH() { return statfs64$f_bsize$VH_; }

    static final MemoryLayout statfs64$f_iosize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_iosize$LAYOUT() { return statfs64$f_iosize$LAYOUT_; }

    static final VarHandle statfs64$f_iosize$VH_ = statfs64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_iosize"));
    static final java.lang.invoke.VarHandle statfs64$f_iosize$VH() { return statfs64$f_iosize$VH_; }

    static final MemoryLayout statfs64$f_blocks$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_blocks$LAYOUT() { return statfs64$f_blocks$LAYOUT_; }

    static final VarHandle statfs64$f_blocks$VH_ = statfs64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_blocks"));
    static final java.lang.invoke.VarHandle statfs64$f_blocks$VH() { return statfs64$f_blocks$VH_; }

    static final MemoryLayout statfs64$f_bfree$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_bfree$LAYOUT() { return statfs64$f_bfree$LAYOUT_; }

    static final VarHandle statfs64$f_bfree$VH_ = statfs64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_bfree"));
    static final java.lang.invoke.VarHandle statfs64$f_bfree$VH() { return statfs64$f_bfree$VH_; }

    static final MemoryLayout statfs64$f_bavail$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_bavail$LAYOUT() { return statfs64$f_bavail$LAYOUT_; }

    static final VarHandle statfs64$f_bavail$VH_ = statfs64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_bavail"));
    static final java.lang.invoke.VarHandle statfs64$f_bavail$VH() { return statfs64$f_bavail$VH_; }

    static final MemoryLayout statfs64$f_files$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_files$LAYOUT() { return statfs64$f_files$LAYOUT_; }

    static final VarHandle statfs64$f_files$VH_ = statfs64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_files"));
    static final java.lang.invoke.VarHandle statfs64$f_files$VH() { return statfs64$f_files$VH_; }

    static final MemoryLayout statfs64$f_ffree$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_ffree$LAYOUT() { return statfs64$f_ffree$LAYOUT_; }

    static final VarHandle statfs64$f_ffree$VH_ = statfs64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_ffree"));
    static final java.lang.invoke.VarHandle statfs64$f_ffree$VH() { return statfs64$f_ffree$VH_; }

    static final MemoryLayout statfs64$f_owner$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_owner$LAYOUT() { return statfs64$f_owner$LAYOUT_; }

    static final VarHandle statfs64$f_owner$VH_ = statfs64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_owner"));
    static final java.lang.invoke.VarHandle statfs64$f_owner$VH() { return statfs64$f_owner$VH_; }

    static final MemoryLayout statfs64$f_type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_type$LAYOUT() { return statfs64$f_type$LAYOUT_; }

    static final VarHandle statfs64$f_type$VH_ = statfs64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_type"));
    static final java.lang.invoke.VarHandle statfs64$f_type$VH() { return statfs64$f_type$VH_; }

    static final MemoryLayout statfs64$f_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_flags$LAYOUT() { return statfs64$f_flags$LAYOUT_; }

    static final VarHandle statfs64$f_flags$VH_ = statfs64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_flags"));
    static final java.lang.invoke.VarHandle statfs64$f_flags$VH() { return statfs64$f_flags$VH_; }

    static final MemoryLayout statfs64$f_fssubtype$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_fssubtype$LAYOUT() { return statfs64$f_fssubtype$LAYOUT_; }

    static final VarHandle statfs64$f_fssubtype$VH_ = statfs64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_fssubtype"));
    static final java.lang.invoke.VarHandle statfs64$f_fssubtype$VH() { return statfs64$f_fssubtype$VH_; }

    static final MemoryLayout statfs64$f_flags_ext$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs64$f_flags_ext$LAYOUT() { return statfs64$f_flags_ext$LAYOUT_; }

    static final VarHandle statfs64$f_flags_ext$VH_ = statfs64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_flags_ext"));
    static final java.lang.invoke.VarHandle statfs64$f_flags_ext$VH() { return statfs64$f_flags_ext$VH_; }

    static final MemoryLayout statfs$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("f_bsize"),
        C_INT.withName("f_iosize"),
        C_LONG_LONG.withName("f_blocks"),
        C_LONG_LONG.withName("f_bfree"),
        C_LONG_LONG.withName("f_bavail"),
        C_LONG_LONG.withName("f_files"),
        C_LONG_LONG.withName("f_ffree"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_INT).withName("val")
        ).withName("f_fsid"),
        C_INT.withName("f_owner"),
        C_INT.withName("f_type"),
        C_INT.withName("f_flags"),
        C_INT.withName("f_fssubtype"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("f_fstypename"),
        MemoryLayout.ofSequence(1024, C_CHAR).withName("f_mntonname"),
        MemoryLayout.ofSequence(1024, C_CHAR).withName("f_mntfromname"),
        C_INT.withName("f_flags_ext"),
        MemoryLayout.ofSequence(7, C_INT).withName("f_reserved")
    ).withName("statfs");
    static final jdk.incubator.foreign.MemoryLayout statfs$struct$LAYOUT() { return statfs$struct$LAYOUT_; }

    static final MemoryLayout statfs$f_bsize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_bsize$LAYOUT() { return statfs$f_bsize$LAYOUT_; }

    static final VarHandle statfs$f_bsize$VH_ = statfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_bsize"));
    static final java.lang.invoke.VarHandle statfs$f_bsize$VH() { return statfs$f_bsize$VH_; }

    static final MemoryLayout statfs$f_iosize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_iosize$LAYOUT() { return statfs$f_iosize$LAYOUT_; }

    static final VarHandle statfs$f_iosize$VH_ = statfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_iosize"));
    static final java.lang.invoke.VarHandle statfs$f_iosize$VH() { return statfs$f_iosize$VH_; }

    static final MemoryLayout statfs$f_blocks$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_blocks$LAYOUT() { return statfs$f_blocks$LAYOUT_; }

    static final VarHandle statfs$f_blocks$VH_ = statfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_blocks"));
    static final java.lang.invoke.VarHandle statfs$f_blocks$VH() { return statfs$f_blocks$VH_; }

    static final MemoryLayout statfs$f_bfree$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_bfree$LAYOUT() { return statfs$f_bfree$LAYOUT_; }

    static final VarHandle statfs$f_bfree$VH_ = statfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_bfree"));
    static final java.lang.invoke.VarHandle statfs$f_bfree$VH() { return statfs$f_bfree$VH_; }

    static final MemoryLayout statfs$f_bavail$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_bavail$LAYOUT() { return statfs$f_bavail$LAYOUT_; }

    static final VarHandle statfs$f_bavail$VH_ = statfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_bavail"));
    static final java.lang.invoke.VarHandle statfs$f_bavail$VH() { return statfs$f_bavail$VH_; }

    static final MemoryLayout statfs$f_files$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_files$LAYOUT() { return statfs$f_files$LAYOUT_; }

    static final VarHandle statfs$f_files$VH_ = statfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_files"));
    static final java.lang.invoke.VarHandle statfs$f_files$VH() { return statfs$f_files$VH_; }

    static final MemoryLayout statfs$f_ffree$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_ffree$LAYOUT() { return statfs$f_ffree$LAYOUT_; }

    static final VarHandle statfs$f_ffree$VH_ = statfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_ffree"));
    static final java.lang.invoke.VarHandle statfs$f_ffree$VH() { return statfs$f_ffree$VH_; }

    static final MemoryLayout statfs$f_owner$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_owner$LAYOUT() { return statfs$f_owner$LAYOUT_; }

    static final VarHandle statfs$f_owner$VH_ = statfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_owner"));
    static final java.lang.invoke.VarHandle statfs$f_owner$VH() { return statfs$f_owner$VH_; }

    static final MemoryLayout statfs$f_type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_type$LAYOUT() { return statfs$f_type$LAYOUT_; }

    static final VarHandle statfs$f_type$VH_ = statfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_type"));
    static final java.lang.invoke.VarHandle statfs$f_type$VH() { return statfs$f_type$VH_; }

    static final MemoryLayout statfs$f_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_flags$LAYOUT() { return statfs$f_flags$LAYOUT_; }

    static final VarHandle statfs$f_flags$VH_ = statfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_flags"));
    static final java.lang.invoke.VarHandle statfs$f_flags$VH() { return statfs$f_flags$VH_; }

    static final MemoryLayout statfs$f_fssubtype$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_fssubtype$LAYOUT() { return statfs$f_fssubtype$LAYOUT_; }

    static final VarHandle statfs$f_fssubtype$VH_ = statfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_fssubtype"));
    static final java.lang.invoke.VarHandle statfs$f_fssubtype$VH() { return statfs$f_fssubtype$VH_; }

    static final MemoryLayout statfs$f_flags_ext$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout statfs$f_flags_ext$LAYOUT() { return statfs$f_flags_ext$LAYOUT_; }

    static final VarHandle statfs$f_flags_ext$VH_ = statfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_flags_ext"));
    static final java.lang.invoke.VarHandle statfs$f_flags_ext$VH() { return statfs$f_flags_ext$VH_; }

    static final MemoryLayout vfsstatfs$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("f_bsize"),
        C_LONG.withName("f_iosize"),
        C_LONG_LONG.withName("f_blocks"),
        C_LONG_LONG.withName("f_bfree"),
        C_LONG_LONG.withName("f_bavail"),
        C_LONG_LONG.withName("f_bused"),
        C_LONG_LONG.withName("f_files"),
        C_LONG_LONG.withName("f_ffree"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_INT).withName("val")
        ).withName("f_fsid"),
        C_INT.withName("f_owner"),
        C_LONG_LONG.withName("f_flags"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("f_fstypename"),
        MemoryLayout.ofSequence(1024, C_CHAR).withName("f_mntonname"),
        MemoryLayout.ofSequence(1024, C_CHAR).withName("f_mntfromname"),
        C_INT.withName("f_fssubtype"),
        MemoryLayout.ofSequence(2, C_POINTER).withName("f_reserved")
    ).withName("vfsstatfs");
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$struct$LAYOUT() { return vfsstatfs$struct$LAYOUT_; }

    static final MemoryLayout vfsstatfs$f_bsize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_bsize$LAYOUT() { return vfsstatfs$f_bsize$LAYOUT_; }

    static final VarHandle vfsstatfs$f_bsize$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_bsize"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_bsize$VH() { return vfsstatfs$f_bsize$VH_; }

    static final MemoryLayout vfsstatfs$f_iosize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_iosize$LAYOUT() { return vfsstatfs$f_iosize$LAYOUT_; }

    static final VarHandle vfsstatfs$f_iosize$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_iosize"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_iosize$VH() { return vfsstatfs$f_iosize$VH_; }

    static final MemoryLayout vfsstatfs$f_blocks$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_blocks$LAYOUT() { return vfsstatfs$f_blocks$LAYOUT_; }

    static final VarHandle vfsstatfs$f_blocks$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_blocks"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_blocks$VH() { return vfsstatfs$f_blocks$VH_; }

    static final MemoryLayout vfsstatfs$f_bfree$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_bfree$LAYOUT() { return vfsstatfs$f_bfree$LAYOUT_; }

    static final VarHandle vfsstatfs$f_bfree$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_bfree"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_bfree$VH() { return vfsstatfs$f_bfree$VH_; }

    static final MemoryLayout vfsstatfs$f_bavail$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_bavail$LAYOUT() { return vfsstatfs$f_bavail$LAYOUT_; }

    static final VarHandle vfsstatfs$f_bavail$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_bavail"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_bavail$VH() { return vfsstatfs$f_bavail$VH_; }

    static final MemoryLayout vfsstatfs$f_bused$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_bused$LAYOUT() { return vfsstatfs$f_bused$LAYOUT_; }

    static final VarHandle vfsstatfs$f_bused$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_bused"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_bused$VH() { return vfsstatfs$f_bused$VH_; }

    static final MemoryLayout vfsstatfs$f_files$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_files$LAYOUT() { return vfsstatfs$f_files$LAYOUT_; }

    static final VarHandle vfsstatfs$f_files$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_files"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_files$VH() { return vfsstatfs$f_files$VH_; }

    static final MemoryLayout vfsstatfs$f_ffree$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_ffree$LAYOUT() { return vfsstatfs$f_ffree$LAYOUT_; }

    static final VarHandle vfsstatfs$f_ffree$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_ffree"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_ffree$VH() { return vfsstatfs$f_ffree$VH_; }

    static final MemoryLayout vfsstatfs$f_owner$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_owner$LAYOUT() { return vfsstatfs$f_owner$LAYOUT_; }

    static final VarHandle vfsstatfs$f_owner$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_owner"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_owner$VH() { return vfsstatfs$f_owner$VH_; }

    static final MemoryLayout vfsstatfs$f_flags$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_flags$LAYOUT() { return vfsstatfs$f_flags$LAYOUT_; }

    static final VarHandle vfsstatfs$f_flags$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("f_flags"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_flags$VH() { return vfsstatfs$f_flags$VH_; }

    static final MemoryLayout vfsstatfs$f_fssubtype$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsstatfs$f_fssubtype$LAYOUT() { return vfsstatfs$f_fssubtype$LAYOUT_; }

    static final VarHandle vfsstatfs$f_fssubtype$VH_ = vfsstatfs$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("f_fssubtype"));
    static final java.lang.invoke.VarHandle vfsstatfs$f_fssubtype$VH() { return vfsstatfs$f_fssubtype$VH_; }

    static final MemoryLayout vfsconf$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("vfc_reserved1"),
        MemoryLayout.ofSequence(15, C_CHAR).withName("vfc_name"),
        MemoryLayout.ofPaddingBits(8),
        C_INT.withName("vfc_typenum"),
        C_INT.withName("vfc_refcount"),
        C_INT.withName("vfc_flags"),
        C_INT.withName("vfc_reserved2"),
        C_INT.withName("vfc_reserved3")
    ).withName("vfsconf");
    static final jdk.incubator.foreign.MemoryLayout vfsconf$struct$LAYOUT() { return vfsconf$struct$LAYOUT_; }

    static final MemoryLayout vfsconf$vfc_reserved1$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsconf$vfc_reserved1$LAYOUT() { return vfsconf$vfc_reserved1$LAYOUT_; }

    static final VarHandle vfsconf$vfc_reserved1$VH_ = vfsconf$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("vfc_reserved1"));
    static final java.lang.invoke.VarHandle vfsconf$vfc_reserved1$VH() { return vfsconf$vfc_reserved1$VH_; }

    static final MemoryLayout vfsconf$vfc_typenum$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsconf$vfc_typenum$LAYOUT() { return vfsconf$vfc_typenum$LAYOUT_; }

    static final VarHandle vfsconf$vfc_typenum$VH_ = vfsconf$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("vfc_typenum"));
    static final java.lang.invoke.VarHandle vfsconf$vfc_typenum$VH() { return vfsconf$vfc_typenum$VH_; }

    static final MemoryLayout vfsconf$vfc_refcount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsconf$vfc_refcount$LAYOUT() { return vfsconf$vfc_refcount$LAYOUT_; }

    static final VarHandle vfsconf$vfc_refcount$VH_ = vfsconf$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("vfc_refcount"));
    static final java.lang.invoke.VarHandle vfsconf$vfc_refcount$VH() { return vfsconf$vfc_refcount$VH_; }

    static final MemoryLayout vfsconf$vfc_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsconf$vfc_flags$LAYOUT() { return vfsconf$vfc_flags$LAYOUT_; }

    static final VarHandle vfsconf$vfc_flags$VH_ = vfsconf$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("vfc_flags"));
    static final java.lang.invoke.VarHandle vfsconf$vfc_flags$VH() { return vfsconf$vfc_flags$VH_; }

    static final MemoryLayout vfsconf$vfc_reserved2$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsconf$vfc_reserved2$LAYOUT() { return vfsconf$vfc_reserved2$LAYOUT_; }

    static final VarHandle vfsconf$vfc_reserved2$VH_ = vfsconf$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("vfc_reserved2"));
    static final java.lang.invoke.VarHandle vfsconf$vfc_reserved2$VH() { return vfsconf$vfc_reserved2$VH_; }

    static final MemoryLayout vfsconf$vfc_reserved3$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsconf$vfc_reserved3$LAYOUT() { return vfsconf$vfc_reserved3$LAYOUT_; }

    static final VarHandle vfsconf$vfc_reserved3$VH_ = vfsconf$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("vfc_reserved3"));
    static final java.lang.invoke.VarHandle vfsconf$vfc_reserved3$VH() { return vfsconf$vfc_reserved3$VH_; }

    static final MemoryLayout vfsidctl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("vc_vers"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_INT).withName("val")
        ).withName("vc_fsid"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("vc_ptr"),
        C_LONG.withName("vc_len"),
        MemoryLayout.ofSequence(12, C_INT).withName("vc_spare")
    ).withName("vfsidctl");
    static final jdk.incubator.foreign.MemoryLayout vfsidctl$struct$LAYOUT() { return vfsidctl$struct$LAYOUT_; }

    static final MemoryLayout vfsidctl$vc_vers$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsidctl$vc_vers$LAYOUT() { return vfsidctl$vc_vers$LAYOUT_; }

    static final VarHandle vfsidctl$vc_vers$VH_ = vfsidctl$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("vc_vers"));
    static final java.lang.invoke.VarHandle vfsidctl$vc_vers$VH() { return vfsidctl$vc_vers$VH_; }

    static final MemoryLayout vfsidctl$vc_ptr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout vfsidctl$vc_ptr$LAYOUT() { return vfsidctl$vc_ptr$LAYOUT_; }

    static final VarHandle vfsidctl$vc_ptr$VH_ = MemoryHandles.asAddressVarHandle(vfsidctl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("vc_ptr")));
    static final java.lang.invoke.VarHandle vfsidctl$vc_ptr$VH() { return vfsidctl$vc_ptr$VH_; }

    static final MemoryLayout vfsidctl$vc_len$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout vfsidctl$vc_len$LAYOUT() { return vfsidctl$vc_len$LAYOUT_; }

    static final VarHandle vfsidctl$vc_len$VH_ = vfsidctl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("vc_len"));
    static final java.lang.invoke.VarHandle vfsidctl$vc_len$VH() { return vfsidctl$vc_len$VH_; }

    static final MemoryLayout vfsquery$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("vq_flags"),
        MemoryLayout.ofSequence(31, C_INT).withName("vq_spare")
    ).withName("vfsquery");
    static final jdk.incubator.foreign.MemoryLayout vfsquery$struct$LAYOUT() { return vfsquery$struct$LAYOUT_; }

    static final MemoryLayout vfsquery$vq_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfsquery$vq_flags$LAYOUT() { return vfsquery$vq_flags$LAYOUT_; }

    static final VarHandle vfsquery$vq_flags$VH_ = vfsquery$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("vq_flags"));
    static final java.lang.invoke.VarHandle vfsquery$vq_flags$VH() { return vfsquery$vq_flags$VH_; }

    static final MemoryLayout vfs_server$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("vs_minutes"),
        MemoryLayout.ofSequence(768, C_CHAR).withName("vs_server_name")
    ).withName("vfs_server");
    static final jdk.incubator.foreign.MemoryLayout vfs_server$struct$LAYOUT() { return vfs_server$struct$LAYOUT_; }

    static final MemoryLayout vfs_server$vs_minutes$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout vfs_server$vs_minutes$LAYOUT() { return vfs_server$vs_minutes$LAYOUT_; }

    static final VarHandle vfs_server$vs_minutes$VH_ = vfs_server$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("vs_minutes"));
    static final java.lang.invoke.VarHandle vfs_server$vs_minutes$VH() { return vfs_server$vs_minutes$VH_; }

    static final MemoryLayout netfs_status$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ns_status"),
        MemoryLayout.ofSequence(512, C_CHAR).withName("ns_mountopts"),
        C_INT.withName("ns_waittime"),
        C_INT.withName("ns_threadcount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(0, C_LONG_LONG).withName("ns_threadids")
    ).withName("netfs_status");
    static final jdk.incubator.foreign.MemoryLayout netfs_status$struct$LAYOUT() { return netfs_status$struct$LAYOUT_; }

    static final MemoryLayout netfs_status$ns_status$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout netfs_status$ns_status$LAYOUT() { return netfs_status$ns_status$LAYOUT_; }

    static final VarHandle netfs_status$ns_status$VH_ = netfs_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ns_status"));
    static final java.lang.invoke.VarHandle netfs_status$ns_status$VH() { return netfs_status$ns_status$VH_; }

    static final MemoryLayout netfs_status$ns_waittime$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout netfs_status$ns_waittime$LAYOUT() { return netfs_status$ns_waittime$LAYOUT_; }

    static final VarHandle netfs_status$ns_waittime$VH_ = netfs_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ns_waittime"));
    static final java.lang.invoke.VarHandle netfs_status$ns_waittime$VH() { return netfs_status$ns_waittime$VH_; }

    static final MemoryLayout netfs_status$ns_threadcount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout netfs_status$ns_threadcount$LAYOUT() { return netfs_status$ns_threadcount$LAYOUT_; }

    static final VarHandle netfs_status$ns_threadcount$VH_ = netfs_status$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ns_threadcount"));
    static final java.lang.invoke.VarHandle netfs_status$ns_threadcount$VH() { return netfs_status$ns_threadcount$VH_; }

    static final MemoryLayout fhandle$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("fh_len"),
        MemoryLayout.ofSequence(128, C_CHAR).withName("fh_data")
    ).withName("fhandle");
    static final jdk.incubator.foreign.MemoryLayout fhandle$struct$LAYOUT() { return fhandle$struct$LAYOUT_; }

    static final MemoryLayout fhandle$fh_len$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout fhandle$fh_len$LAYOUT() { return fhandle$fh_len$LAYOUT_; }

    static final VarHandle fhandle$fh_len$VH_ = fhandle$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fh_len"));
    static final java.lang.invoke.VarHandle fhandle$fh_len$VH() { return fhandle$fh_len$VH_; }

    static final FunctionDescriptor fhopen$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor fhopen$FUNC() { return fhopen$FUNC_; }

    static final MethodHandle fhopen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fhopen",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        fhopen$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fhopen$MH() { return fhopen$MH_; }

    static final FunctionDescriptor fstatfs$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fstatfs$FUNC() { return fstatfs$FUNC_; }

    static final MethodHandle fstatfs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fstatfs",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        fstatfs$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fstatfs$MH() { return fstatfs$MH_; }

    static final FunctionDescriptor fstatfs64$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fstatfs64$FUNC() { return fstatfs64$FUNC_; }

    static final MethodHandle fstatfs64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fstatfs64",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        fstatfs64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fstatfs64$MH() { return fstatfs64$MH_; }

    static final FunctionDescriptor getfh$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor getfh$FUNC() { return getfh$FUNC_; }

    static final MethodHandle getfh$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getfh",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        getfh$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getfh$MH() { return getfh$MH_; }

    static final FunctionDescriptor getfsstat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor getfsstat$FUNC() { return getfsstat$FUNC_; }

    static final MethodHandle getfsstat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getfsstat",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        getfsstat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getfsstat$MH() { return getfsstat$MH_; }

    static final FunctionDescriptor getfsstat64$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor getfsstat64$FUNC() { return getfsstat64$FUNC_; }

    static final MethodHandle getfsstat64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getfsstat64",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        getfsstat64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getfsstat64$MH() { return getfsstat64$MH_; }

    static final FunctionDescriptor getmntinfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor getmntinfo$FUNC() { return getmntinfo$FUNC_; }

    static final MethodHandle getmntinfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getmntinfo",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        getmntinfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getmntinfo$MH() { return getmntinfo$MH_; }

    static final FunctionDescriptor getmntinfo_r_np$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor getmntinfo_r_np$FUNC() { return getmntinfo_r_np$FUNC_; }

    static final MethodHandle getmntinfo_r_np$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getmntinfo_r_np",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        getmntinfo_r_np$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getmntinfo_r_np$MH() { return getmntinfo_r_np$MH_; }

    static final FunctionDescriptor getmntinfo64$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor getmntinfo64$FUNC() { return getmntinfo64$FUNC_; }

    static final MethodHandle getmntinfo64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getmntinfo64",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        getmntinfo64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getmntinfo64$MH() { return getmntinfo64$MH_; }

    static final FunctionDescriptor mount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor mount$FUNC() { return mount$FUNC_; }

    static final MethodHandle mount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "mount",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        mount$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle mount$MH() { return mount$MH_; }

    static final FunctionDescriptor fmount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor fmount$FUNC() { return fmount$FUNC_; }

    static final MethodHandle fmount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "fmount",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        fmount$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle fmount$MH() { return fmount$MH_; }

    static final FunctionDescriptor statfs$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor statfs$FUNC() { return statfs$FUNC_; }

    static final MethodHandle statfs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "statfs",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        statfs$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle statfs$MH() { return statfs$MH_; }

    static final FunctionDescriptor statfs64$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor statfs64$FUNC() { return statfs64$FUNC_; }

    static final MethodHandle statfs64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "statfs64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        statfs64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle statfs64$MH() { return statfs64$MH_; }

    static final FunctionDescriptor unmount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor unmount$FUNC() { return unmount$FUNC_; }

    static final MethodHandle unmount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "unmount",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        unmount$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle unmount$MH() { return unmount$MH_; }

    static final FunctionDescriptor getvfsbyname$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor getvfsbyname$FUNC() { return getvfsbyname$FUNC_; }

    static final MethodHandle getvfsbyname$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "getvfsbyname",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        getvfsbyname$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle getvfsbyname$MH() { return getvfsbyname$MH_; }

    static final MemoryLayout fuse_operations$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("getattr"),
        C_POINTER.withName("readlink"),
        C_POINTER.withName("getdir"),
        C_POINTER.withName("mknod"),
        C_POINTER.withName("mkdir"),
        C_POINTER.withName("unlink"),
        C_POINTER.withName("rmdir"),
        C_POINTER.withName("symlink"),
        C_POINTER.withName("rename"),
        C_POINTER.withName("link"),
        C_POINTER.withName("chmod"),
        C_POINTER.withName("chown"),
        C_POINTER.withName("truncate"),
        C_POINTER.withName("utime"),
        C_POINTER.withName("open"),
        C_POINTER.withName("read"),
        C_POINTER.withName("write"),
        C_POINTER.withName("statfs"),
        C_POINTER.withName("flush"),
        C_POINTER.withName("release"),
        C_POINTER.withName("fsync"),
        C_POINTER.withName("setxattr"),
        C_POINTER.withName("getxattr"),
        C_POINTER.withName("listxattr"),
        C_POINTER.withName("removexattr"),
        C_POINTER.withName("opendir"),
        C_POINTER.withName("readdir"),
        C_POINTER.withName("releasedir"),
        C_POINTER.withName("fsyncdir"),
        C_POINTER.withName("init"),
        C_POINTER.withName("destroy"),
        C_POINTER.withName("access"),
        C_POINTER.withName("create"),
        C_POINTER.withName("ftruncate"),
        C_POINTER.withName("fgetattr"),
        C_POINTER.withName("lock"),
        C_POINTER.withName("utimens"),
        C_POINTER.withName("bmap"),
        C_LONG_LONG,
        C_POINTER.withName("ioctl"),
        C_POINTER.withName("poll"),
        C_POINTER.withName("write_buf"),
        C_POINTER.withName("read_buf"),
        C_POINTER.withName("flock"),
        C_POINTER.withName("fallocate"),
        C_POINTER.withName("reserved00"),
        C_POINTER.withName("reserved01"),
        C_POINTER.withName("renamex"),
        C_POINTER.withName("statfs_x"),
        C_POINTER.withName("setvolname"),
        C_POINTER.withName("exchange"),
        C_POINTER.withName("getxtimes"),
        C_POINTER.withName("setbkuptime"),
        C_POINTER.withName("setchgtime"),
        C_POINTER.withName("setcrtime"),
        C_POINTER.withName("chflags"),
        C_POINTER.withName("setattr_x"),
        C_POINTER.withName("fsetattr_x")
    ).withName("fuse_operations");
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$struct$LAYOUT() { return fuse_operations$struct$LAYOUT_; }

    static final FunctionDescriptor getattr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor getattr$FUNC() { return getattr$FUNC_; }

    static final MemoryLayout fuse_operations$getattr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$getattr$LAYOUT() { return fuse_operations$getattr$LAYOUT_; }

    static final VarHandle fuse_operations$getattr$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("getattr")));
    static final java.lang.invoke.VarHandle fuse_operations$getattr$VH() { return fuse_operations$getattr$VH_; }

    static final FunctionDescriptor readlink$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor readlink$FUNC() { return readlink$FUNC_; }

    static final MemoryLayout fuse_operations$readlink$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$readlink$LAYOUT() { return fuse_operations$readlink$LAYOUT_; }

    static final VarHandle fuse_operations$readlink$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("readlink")));
    static final java.lang.invoke.VarHandle fuse_operations$readlink$VH() { return fuse_operations$readlink$VH_; }

    static final FunctionDescriptor getdir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor getdir$FUNC() { return getdir$FUNC_; }

    static final MemoryLayout fuse_operations$getdir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$getdir$LAYOUT() { return fuse_operations$getdir$LAYOUT_; }

    static final VarHandle fuse_operations$getdir$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("getdir")));
    static final java.lang.invoke.VarHandle fuse_operations$getdir$VH() { return fuse_operations$getdir$VH_; }

    static final MemoryLayout fuse_operations$mknod$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$mknod$LAYOUT() { return fuse_operations$mknod$LAYOUT_; }

    static final VarHandle fuse_operations$mknod$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("mknod")));
    static final java.lang.invoke.VarHandle fuse_operations$mknod$VH() { return fuse_operations$mknod$VH_; }

    static final MemoryLayout fuse_operations$mkdir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$mkdir$LAYOUT() { return fuse_operations$mkdir$LAYOUT_; }

    static final VarHandle fuse_operations$mkdir$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("mkdir")));
    static final java.lang.invoke.VarHandle fuse_operations$mkdir$VH() { return fuse_operations$mkdir$VH_; }

    static final FunctionDescriptor unlink$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor unlink$FUNC() { return unlink$FUNC_; }

    static final MemoryLayout fuse_operations$unlink$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$unlink$LAYOUT() { return fuse_operations$unlink$LAYOUT_; }

    static final VarHandle fuse_operations$unlink$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("unlink")));
    static final java.lang.invoke.VarHandle fuse_operations$unlink$VH() { return fuse_operations$unlink$VH_; }

    static final FunctionDescriptor rmdir$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor rmdir$FUNC() { return rmdir$FUNC_; }

    static final MemoryLayout fuse_operations$rmdir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$rmdir$LAYOUT() { return fuse_operations$rmdir$LAYOUT_; }

    static final VarHandle fuse_operations$rmdir$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rmdir")));
    static final java.lang.invoke.VarHandle fuse_operations$rmdir$VH() { return fuse_operations$rmdir$VH_; }

    static final FunctionDescriptor symlink$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor symlink$FUNC() { return symlink$FUNC_; }

    static final MemoryLayout fuse_operations$symlink$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$symlink$LAYOUT() { return fuse_operations$symlink$LAYOUT_; }

    static final VarHandle fuse_operations$symlink$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("symlink")));
    static final java.lang.invoke.VarHandle fuse_operations$symlink$VH() { return fuse_operations$symlink$VH_; }

    static final FunctionDescriptor rename$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor rename$FUNC() { return rename$FUNC_; }

    static final MemoryLayout fuse_operations$rename$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$rename$LAYOUT() { return fuse_operations$rename$LAYOUT_; }

    static final VarHandle fuse_operations$rename$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rename")));
    static final java.lang.invoke.VarHandle fuse_operations$rename$VH() { return fuse_operations$rename$VH_; }

    static final FunctionDescriptor link$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor link$FUNC() { return link$FUNC_; }

    static final MemoryLayout fuse_operations$link$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$link$LAYOUT() { return fuse_operations$link$LAYOUT_; }

    static final VarHandle fuse_operations$link$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("link")));
    static final java.lang.invoke.VarHandle fuse_operations$link$VH() { return fuse_operations$link$VH_; }

    static final MemoryLayout fuse_operations$chmod$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$chmod$LAYOUT() { return fuse_operations$chmod$LAYOUT_; }

    static final VarHandle fuse_operations$chmod$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("chmod")));
    static final java.lang.invoke.VarHandle fuse_operations$chmod$VH() { return fuse_operations$chmod$VH_; }

    static final FunctionDescriptor chown$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor chown$FUNC() { return chown$FUNC_; }

    static final MemoryLayout fuse_operations$chown$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$chown$LAYOUT() { return fuse_operations$chown$LAYOUT_; }

    static final VarHandle fuse_operations$chown$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("chown")));
    static final java.lang.invoke.VarHandle fuse_operations$chown$VH() { return fuse_operations$chown$VH_; }

    static final FunctionDescriptor truncate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor truncate$FUNC() { return truncate$FUNC_; }

    static final MemoryLayout fuse_operations$truncate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$truncate$LAYOUT() { return fuse_operations$truncate$LAYOUT_; }

    static final VarHandle fuse_operations$truncate$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("truncate")));
    static final java.lang.invoke.VarHandle fuse_operations$truncate$VH() { return fuse_operations$truncate$VH_; }

    static final MemoryLayout fuse_operations$utime$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$utime$LAYOUT() { return fuse_operations$utime$LAYOUT_; }

    static final VarHandle fuse_operations$utime$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("utime")));
    static final java.lang.invoke.VarHandle fuse_operations$utime$VH() { return fuse_operations$utime$VH_; }

    static final MemoryLayout fuse_operations$open$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$open$LAYOUT() { return fuse_operations$open$LAYOUT_; }

    static final VarHandle fuse_operations$open$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("open")));
    static final java.lang.invoke.VarHandle fuse_operations$open$VH() { return fuse_operations$open$VH_; }

    static final FunctionDescriptor read$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor read$FUNC() { return read$FUNC_; }

    static final MemoryLayout fuse_operations$read$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$read$LAYOUT() { return fuse_operations$read$LAYOUT_; }

    static final VarHandle fuse_operations$read$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("read")));
    static final java.lang.invoke.VarHandle fuse_operations$read$VH() { return fuse_operations$read$VH_; }

    static final FunctionDescriptor write$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor write$FUNC() { return write$FUNC_; }

    static final MemoryLayout fuse_operations$write$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout fuse_operations$write$LAYOUT() { return fuse_operations$write$LAYOUT_; }

    static final VarHandle fuse_operations$write$VH_ = MemoryHandles.asAddressVarHandle(fuse_operations$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("write")));
    static final java.lang.invoke.VarHandle fuse_operations$write$VH() { return fuse_operations$write$VH_; }

    static final FunctionDescriptor statfs$0$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor statfs$0$FUNC() { return statfs$0$FUNC_; }

}

