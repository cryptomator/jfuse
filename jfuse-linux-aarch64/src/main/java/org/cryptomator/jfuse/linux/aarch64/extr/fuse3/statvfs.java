// Generated by jextract

package org.cryptomator.jfuse.linux.aarch64.extr.fuse3;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct statvfs {
 *     unsigned long f_bsize;
 *     unsigned long f_frsize;
 *     __fsblkcnt64_t f_blocks;
 *     __fsblkcnt64_t f_bfree;
 *     __fsblkcnt64_t f_bavail;
 *     __fsfilcnt64_t f_files;
 *     __fsfilcnt64_t f_ffree;
 *     __fsfilcnt64_t f_favail;
 *     unsigned long f_fsid;
 *     unsigned long f_flag;
 *     unsigned long f_namemax;
 *     unsigned int f_type;
 *     int __f_spare[5];
 * }
 * }
 */
public class statvfs {

    statvfs() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fuse_h.C_LONG.withName("f_bsize"),
        fuse_h.C_LONG.withName("f_frsize"),
        fuse_h.C_LONG.withName("f_blocks"),
        fuse_h.C_LONG.withName("f_bfree"),
        fuse_h.C_LONG.withName("f_bavail"),
        fuse_h.C_LONG.withName("f_files"),
        fuse_h.C_LONG.withName("f_ffree"),
        fuse_h.C_LONG.withName("f_favail"),
        fuse_h.C_LONG.withName("f_fsid"),
        fuse_h.C_LONG.withName("f_flag"),
        fuse_h.C_LONG.withName("f_namemax"),
        fuse_h.C_INT.withName("f_type"),
        MemoryLayout.sequenceLayout(5, fuse_h.C_INT).withName("__f_spare")
    ).withName("statvfs");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong f_bsize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_bsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long f_bsize
     * }
     */
    public static final OfLong f_bsize$layout() {
        return f_bsize$LAYOUT;
    }

    private static final long f_bsize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long f_bsize
     * }
     */
    public static final long f_bsize$offset() {
        return f_bsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long f_bsize
     * }
     */
    public static long f_bsize(MemorySegment struct) {
        return struct.get(f_bsize$LAYOUT, f_bsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long f_bsize
     * }
     */
    public static void f_bsize(MemorySegment struct, long fieldValue) {
        struct.set(f_bsize$LAYOUT, f_bsize$OFFSET, fieldValue);
    }

    private static final OfLong f_frsize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_frsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long f_frsize
     * }
     */
    public static final OfLong f_frsize$layout() {
        return f_frsize$LAYOUT;
    }

    private static final long f_frsize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long f_frsize
     * }
     */
    public static final long f_frsize$offset() {
        return f_frsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long f_frsize
     * }
     */
    public static long f_frsize(MemorySegment struct) {
        return struct.get(f_frsize$LAYOUT, f_frsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long f_frsize
     * }
     */
    public static void f_frsize(MemorySegment struct, long fieldValue) {
        struct.set(f_frsize$LAYOUT, f_frsize$OFFSET, fieldValue);
    }

    private static final OfLong f_blocks$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_blocks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_blocks
     * }
     */
    public static final OfLong f_blocks$layout() {
        return f_blocks$LAYOUT;
    }

    private static final long f_blocks$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_blocks
     * }
     */
    public static final long f_blocks$offset() {
        return f_blocks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_blocks
     * }
     */
    public static long f_blocks(MemorySegment struct) {
        return struct.get(f_blocks$LAYOUT, f_blocks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_blocks
     * }
     */
    public static void f_blocks(MemorySegment struct, long fieldValue) {
        struct.set(f_blocks$LAYOUT, f_blocks$OFFSET, fieldValue);
    }

    private static final OfLong f_bfree$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_bfree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_bfree
     * }
     */
    public static final OfLong f_bfree$layout() {
        return f_bfree$LAYOUT;
    }

    private static final long f_bfree$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_bfree
     * }
     */
    public static final long f_bfree$offset() {
        return f_bfree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_bfree
     * }
     */
    public static long f_bfree(MemorySegment struct) {
        return struct.get(f_bfree$LAYOUT, f_bfree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_bfree
     * }
     */
    public static void f_bfree(MemorySegment struct, long fieldValue) {
        struct.set(f_bfree$LAYOUT, f_bfree$OFFSET, fieldValue);
    }

    private static final OfLong f_bavail$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_bavail"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_bavail
     * }
     */
    public static final OfLong f_bavail$layout() {
        return f_bavail$LAYOUT;
    }

    private static final long f_bavail$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_bavail
     * }
     */
    public static final long f_bavail$offset() {
        return f_bavail$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_bavail
     * }
     */
    public static long f_bavail(MemorySegment struct) {
        return struct.get(f_bavail$LAYOUT, f_bavail$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __fsblkcnt64_t f_bavail
     * }
     */
    public static void f_bavail(MemorySegment struct, long fieldValue) {
        struct.set(f_bavail$LAYOUT, f_bavail$OFFSET, fieldValue);
    }

    private static final OfLong f_files$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_files"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_files
     * }
     */
    public static final OfLong f_files$layout() {
        return f_files$LAYOUT;
    }

    private static final long f_files$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_files
     * }
     */
    public static final long f_files$offset() {
        return f_files$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_files
     * }
     */
    public static long f_files(MemorySegment struct) {
        return struct.get(f_files$LAYOUT, f_files$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_files
     * }
     */
    public static void f_files(MemorySegment struct, long fieldValue) {
        struct.set(f_files$LAYOUT, f_files$OFFSET, fieldValue);
    }

    private static final OfLong f_ffree$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_ffree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_ffree
     * }
     */
    public static final OfLong f_ffree$layout() {
        return f_ffree$LAYOUT;
    }

    private static final long f_ffree$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_ffree
     * }
     */
    public static final long f_ffree$offset() {
        return f_ffree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_ffree
     * }
     */
    public static long f_ffree(MemorySegment struct) {
        return struct.get(f_ffree$LAYOUT, f_ffree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_ffree
     * }
     */
    public static void f_ffree(MemorySegment struct, long fieldValue) {
        struct.set(f_ffree$LAYOUT, f_ffree$OFFSET, fieldValue);
    }

    private static final OfLong f_favail$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_favail"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_favail
     * }
     */
    public static final OfLong f_favail$layout() {
        return f_favail$LAYOUT;
    }

    private static final long f_favail$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_favail
     * }
     */
    public static final long f_favail$offset() {
        return f_favail$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_favail
     * }
     */
    public static long f_favail(MemorySegment struct) {
        return struct.get(f_favail$LAYOUT, f_favail$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __fsfilcnt64_t f_favail
     * }
     */
    public static void f_favail(MemorySegment struct, long fieldValue) {
        struct.set(f_favail$LAYOUT, f_favail$OFFSET, fieldValue);
    }

    private static final OfLong f_fsid$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_fsid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long f_fsid
     * }
     */
    public static final OfLong f_fsid$layout() {
        return f_fsid$LAYOUT;
    }

    private static final long f_fsid$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long f_fsid
     * }
     */
    public static final long f_fsid$offset() {
        return f_fsid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long f_fsid
     * }
     */
    public static long f_fsid(MemorySegment struct) {
        return struct.get(f_fsid$LAYOUT, f_fsid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long f_fsid
     * }
     */
    public static void f_fsid(MemorySegment struct, long fieldValue) {
        struct.set(f_fsid$LAYOUT, f_fsid$OFFSET, fieldValue);
    }

    private static final OfLong f_flag$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long f_flag
     * }
     */
    public static final OfLong f_flag$layout() {
        return f_flag$LAYOUT;
    }

    private static final long f_flag$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long f_flag
     * }
     */
    public static final long f_flag$offset() {
        return f_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long f_flag
     * }
     */
    public static long f_flag(MemorySegment struct) {
        return struct.get(f_flag$LAYOUT, f_flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long f_flag
     * }
     */
    public static void f_flag(MemorySegment struct, long fieldValue) {
        struct.set(f_flag$LAYOUT, f_flag$OFFSET, fieldValue);
    }

    private static final OfLong f_namemax$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f_namemax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long f_namemax
     * }
     */
    public static final OfLong f_namemax$layout() {
        return f_namemax$LAYOUT;
    }

    private static final long f_namemax$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long f_namemax
     * }
     */
    public static final long f_namemax$offset() {
        return f_namemax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long f_namemax
     * }
     */
    public static long f_namemax(MemorySegment struct) {
        return struct.get(f_namemax$LAYOUT, f_namemax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long f_namemax
     * }
     */
    public static void f_namemax(MemorySegment struct, long fieldValue) {
        struct.set(f_namemax$LAYOUT, f_namemax$OFFSET, fieldValue);
    }

    private static final OfInt f_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("f_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int f_type
     * }
     */
    public static final OfInt f_type$layout() {
        return f_type$LAYOUT;
    }

    private static final long f_type$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int f_type
     * }
     */
    public static final long f_type$offset() {
        return f_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int f_type
     * }
     */
    public static int f_type(MemorySegment struct) {
        return struct.get(f_type$LAYOUT, f_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int f_type
     * }
     */
    public static void f_type(MemorySegment struct, int fieldValue) {
        struct.set(f_type$LAYOUT, f_type$OFFSET, fieldValue);
    }

    private static final SequenceLayout __f_spare$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__f_spare"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int __f_spare[5]
     * }
     */
    public static final SequenceLayout __f_spare$layout() {
        return __f_spare$LAYOUT;
    }

    private static final long __f_spare$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int __f_spare[5]
     * }
     */
    public static final long __f_spare$offset() {
        return __f_spare$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int __f_spare[5]
     * }
     */
    public static MemorySegment __f_spare(MemorySegment struct) {
        return struct.asSlice(__f_spare$OFFSET, __f_spare$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int __f_spare[5]
     * }
     */
    public static void __f_spare(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __f_spare$OFFSET, __f_spare$LAYOUT.byteSize());
    }

    private static long[] __f_spare$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int __f_spare[5]
     * }
     */
    public static long[] __f_spare$dimensions() {
        return __f_spare$DIMS;
    }
    private static final VarHandle __f_spare$ELEM_HANDLE = __f_spare$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int __f_spare[5]
     * }
     */
    public static int __f_spare(MemorySegment struct, long index0) {
        return (int)__f_spare$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int __f_spare[5]
     * }
     */
    public static void __f_spare(MemorySegment struct, long index0, int fieldValue) {
        __f_spare$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

