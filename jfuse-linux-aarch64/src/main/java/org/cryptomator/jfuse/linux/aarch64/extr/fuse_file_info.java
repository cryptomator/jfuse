// Generated by jextract

package org.cryptomator.jfuse.linux.aarch64.extr;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct fuse_file_info {
 *     int flags;
 *      *     unsigned int writepage;
 *     unsigned int direct_io;
 *     unsigned int keep_cache;
 *     unsigned int flush;
 *     unsigned int nonseekable;
 *     unsigned int flock_release;
 *     unsigned int cache_readdir;
 *     unsigned int noflush;
 *     unsigned int padding;
 *     unsigned int padding2;
 *     uint64_t fh;
 *     uint64_t lock_owner;
 *     uint32_t poll_events;
 * };
 * }
 */
public class fuse_file_info {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("flags"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(1).withName("writepage"),
            MemoryLayout.paddingLayout(1).withName("direct_io"),
            MemoryLayout.paddingLayout(1).withName("keep_cache"),
            MemoryLayout.paddingLayout(1).withName("flush"),
            MemoryLayout.paddingLayout(1).withName("nonseekable"),
            MemoryLayout.paddingLayout(1).withName("flock_release"),
            MemoryLayout.paddingLayout(1).withName("cache_readdir"),
            MemoryLayout.paddingLayout(1).withName("noflush"),
            MemoryLayout.paddingLayout(24).withName("padding"),
            MemoryLayout.paddingLayout(32).withName("padding2"),
            MemoryLayout.paddingLayout(32)
        ),
        Constants$root.C_LONG_LONG$LAYOUT.withName("fh"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("lock_owner"),
        Constants$root.C_INT$LAYOUT.withName("poll_events"),
        MemoryLayout.paddingLayout(32)
    ).withName("fuse_file_info");
    public static MemoryLayout $LAYOUT() {
        return fuse_file_info.$struct$LAYOUT;
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return fuse_file_info.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)fuse_file_info.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        fuse_file_info.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)fuse_file_info.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        fuse_file_info.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fh$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fh"));
    public static VarHandle fh$VH() {
        return fuse_file_info.fh$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t fh;
     * }
     */
    public static long fh$get(MemorySegment seg) {
        return (long)fuse_file_info.fh$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t fh;
     * }
     */
    public static void fh$set(MemorySegment seg, long x) {
        fuse_file_info.fh$VH.set(seg, x);
    }
    public static long fh$get(MemorySegment seg, long index) {
        return (long)fuse_file_info.fh$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fh$set(MemorySegment seg, long index, long x) {
        fuse_file_info.fh$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lock_owner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lock_owner"));
    public static VarHandle lock_owner$VH() {
        return fuse_file_info.lock_owner$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t lock_owner;
     * }
     */
    public static long lock_owner$get(MemorySegment seg) {
        return (long)fuse_file_info.lock_owner$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t lock_owner;
     * }
     */
    public static void lock_owner$set(MemorySegment seg, long x) {
        fuse_file_info.lock_owner$VH.set(seg, x);
    }
    public static long lock_owner$get(MemorySegment seg, long index) {
        return (long)fuse_file_info.lock_owner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lock_owner$set(MemorySegment seg, long index, long x) {
        fuse_file_info.lock_owner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle poll_events$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("poll_events"));
    public static VarHandle poll_events$VH() {
        return fuse_file_info.poll_events$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t poll_events;
     * }
     */
    public static int poll_events$get(MemorySegment seg) {
        return (int)fuse_file_info.poll_events$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t poll_events;
     * }
     */
    public static void poll_events$set(MemorySegment seg, int x) {
        fuse_file_info.poll_events$VH.set(seg, x);
    }
    public static int poll_events$get(MemorySegment seg, long index) {
        return (int)fuse_file_info.poll_events$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void poll_events$set(MemorySegment seg, long index, int x) {
        fuse_file_info.poll_events$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


