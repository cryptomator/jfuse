// Generated by jextract

package org.cryptomator.jfuse.win.extr.fuse3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct fuse3_conn_info {
 *     unsigned int proto_major;
 *     unsigned int proto_minor;
 *     unsigned int max_write;
 *     unsigned int max_read;
 *     unsigned int max_readahead;
 *     unsigned int capable;
 *     unsigned int want;
 *     unsigned int max_background;
 *     unsigned int congestion_threshold;
 *     unsigned int time_gran;
 *     unsigned int reserved[22];
 * };
 * }
 */
public class fuse3_conn_info {

    public static MemoryLayout $LAYOUT() {
        return constants$5.const$4;
    }
    public static VarHandle proto_major$VH() {
        return constants$5.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int proto_major;
     * }
     */
    public static int proto_major(MemorySegment seg) {
        return (int)constants$5.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int proto_major;
     * }
     */
    public static void proto_major(MemorySegment seg, int x) {
        constants$5.const$5.set(seg, x);
    }
    public static int proto_major(MemorySegment seg, long index) {
        return (int)constants$5.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void proto_major(MemorySegment seg, long index, int x) {
        constants$5.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle proto_minor$VH() {
        return constants$6.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int proto_minor;
     * }
     */
    public static int proto_minor(MemorySegment seg) {
        return (int)constants$6.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int proto_minor;
     * }
     */
    public static void proto_minor(MemorySegment seg, int x) {
        constants$6.const$0.set(seg, x);
    }
    public static int proto_minor(MemorySegment seg, long index) {
        return (int)constants$6.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void proto_minor(MemorySegment seg, long index, int x) {
        constants$6.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_write$VH() {
        return constants$6.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_write;
     * }
     */
    public static int max_write(MemorySegment seg) {
        return (int)constants$6.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_write;
     * }
     */
    public static void max_write(MemorySegment seg, int x) {
        constants$6.const$1.set(seg, x);
    }
    public static int max_write(MemorySegment seg, long index) {
        return (int)constants$6.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void max_write(MemorySegment seg, long index, int x) {
        constants$6.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_read$VH() {
        return constants$6.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_read;
     * }
     */
    public static int max_read(MemorySegment seg) {
        return (int)constants$6.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_read;
     * }
     */
    public static void max_read(MemorySegment seg, int x) {
        constants$6.const$2.set(seg, x);
    }
    public static int max_read(MemorySegment seg, long index) {
        return (int)constants$6.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void max_read(MemorySegment seg, long index, int x) {
        constants$6.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_readahead$VH() {
        return constants$6.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_readahead;
     * }
     */
    public static int max_readahead(MemorySegment seg) {
        return (int)constants$6.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_readahead;
     * }
     */
    public static void max_readahead(MemorySegment seg, int x) {
        constants$6.const$3.set(seg, x);
    }
    public static int max_readahead(MemorySegment seg, long index) {
        return (int)constants$6.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void max_readahead(MemorySegment seg, long index, int x) {
        constants$6.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle capable$VH() {
        return constants$6.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int capable;
     * }
     */
    public static int capable(MemorySegment seg) {
        return (int)constants$6.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int capable;
     * }
     */
    public static void capable(MemorySegment seg, int x) {
        constants$6.const$4.set(seg, x);
    }
    public static int capable(MemorySegment seg, long index) {
        return (int)constants$6.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void capable(MemorySegment seg, long index, int x) {
        constants$6.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle want$VH() {
        return constants$6.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int want;
     * }
     */
    public static int want(MemorySegment seg) {
        return (int)constants$6.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int want;
     * }
     */
    public static void want(MemorySegment seg, int x) {
        constants$6.const$5.set(seg, x);
    }
    public static int want(MemorySegment seg, long index) {
        return (int)constants$6.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void want(MemorySegment seg, long index, int x) {
        constants$6.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_background$VH() {
        return constants$7.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_background;
     * }
     */
    public static int max_background(MemorySegment seg) {
        return (int)constants$7.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_background;
     * }
     */
    public static void max_background(MemorySegment seg, int x) {
        constants$7.const$0.set(seg, x);
    }
    public static int max_background(MemorySegment seg, long index) {
        return (int)constants$7.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void max_background(MemorySegment seg, long index, int x) {
        constants$7.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle congestion_threshold$VH() {
        return constants$7.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int congestion_threshold;
     * }
     */
    public static int congestion_threshold(MemorySegment seg) {
        return (int)constants$7.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int congestion_threshold;
     * }
     */
    public static void congestion_threshold(MemorySegment seg, int x) {
        constants$7.const$1.set(seg, x);
    }
    public static int congestion_threshold(MemorySegment seg, long index) {
        return (int)constants$7.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void congestion_threshold(MemorySegment seg, long index, int x) {
        constants$7.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle time_gran$VH() {
        return constants$7.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int time_gran;
     * }
     */
    public static int time_gran(MemorySegment seg) {
        return (int)constants$7.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int time_gran;
     * }
     */
    public static void time_gran(MemorySegment seg, int x) {
        constants$7.const$2.set(seg, x);
    }
    public static int time_gran(MemorySegment seg, long index) {
        return (int)constants$7.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void time_gran(MemorySegment seg, long index, int x) {
        constants$7.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment reserved$slice(MemorySegment seg) {
        return seg.asSlice(40, 88);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


