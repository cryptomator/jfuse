// Generated by jextract

package org.cryptomator.jfuse.win.extr.fuse3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct fuse3_config {
 *     int set_gid;
 *     unsigned int gid;
 *     int set_uid;
 *     unsigned int uid;
 *     int set_mode;
 *     unsigned int umask;
 *     double entry_timeout;
 *     double negative_timeout;
 *     double attr_timeout;
 *     int intr;
 *     int intr_signal;
 *     int remember;
 *     int hard_remove;
 *     int use_ino;
 *     int readdir_ino;
 *     int direct_io;
 *     int kernel_cache;
 *     int auto_cache;
 *     int ac_attr_timeout_set;
 *     double ac_attr_timeout;
 *     int nullpath_ok;
 *     int show_help;
 *     char* modules;
 *     int debug;
 * };
 * }
 */
public class fuse3_config {

    public static MemoryLayout $LAYOUT() {
        return constants$8.const$0;
    }
    public static VarHandle set_gid$VH() {
        return constants$8.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int set_gid;
     * }
     */
    public static int set_gid(MemorySegment seg) {
        return (int)constants$8.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int set_gid;
     * }
     */
    public static void set_gid(MemorySegment seg, int x) {
        constants$8.const$1.set(seg, x);
    }
    public static int set_gid(MemorySegment seg, long index) {
        return (int)constants$8.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void set_gid(MemorySegment seg, long index, int x) {
        constants$8.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gid$VH() {
        return constants$8.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int gid;
     * }
     */
    public static int gid(MemorySegment seg) {
        return (int)constants$8.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int gid;
     * }
     */
    public static void gid(MemorySegment seg, int x) {
        constants$8.const$2.set(seg, x);
    }
    public static int gid(MemorySegment seg, long index) {
        return (int)constants$8.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void gid(MemorySegment seg, long index, int x) {
        constants$8.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle set_uid$VH() {
        return constants$8.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int set_uid;
     * }
     */
    public static int set_uid(MemorySegment seg) {
        return (int)constants$8.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int set_uid;
     * }
     */
    public static void set_uid(MemorySegment seg, int x) {
        constants$8.const$3.set(seg, x);
    }
    public static int set_uid(MemorySegment seg, long index) {
        return (int)constants$8.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void set_uid(MemorySegment seg, long index, int x) {
        constants$8.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle uid$VH() {
        return constants$8.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int uid;
     * }
     */
    public static int uid(MemorySegment seg) {
        return (int)constants$8.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int uid;
     * }
     */
    public static void uid(MemorySegment seg, int x) {
        constants$8.const$4.set(seg, x);
    }
    public static int uid(MemorySegment seg, long index) {
        return (int)constants$8.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void uid(MemorySegment seg, long index, int x) {
        constants$8.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle set_mode$VH() {
        return constants$8.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int set_mode;
     * }
     */
    public static int set_mode(MemorySegment seg) {
        return (int)constants$8.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int set_mode;
     * }
     */
    public static void set_mode(MemorySegment seg, int x) {
        constants$8.const$5.set(seg, x);
    }
    public static int set_mode(MemorySegment seg, long index) {
        return (int)constants$8.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void set_mode(MemorySegment seg, long index, int x) {
        constants$8.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle umask$VH() {
        return constants$9.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int umask;
     * }
     */
    public static int umask(MemorySegment seg) {
        return (int)constants$9.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int umask;
     * }
     */
    public static void umask(MemorySegment seg, int x) {
        constants$9.const$0.set(seg, x);
    }
    public static int umask(MemorySegment seg, long index) {
        return (int)constants$9.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void umask(MemorySegment seg, long index, int x) {
        constants$9.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle entry_timeout$VH() {
        return constants$9.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double entry_timeout;
     * }
     */
    public static double entry_timeout(MemorySegment seg) {
        return (double)constants$9.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double entry_timeout;
     * }
     */
    public static void entry_timeout(MemorySegment seg, double x) {
        constants$9.const$1.set(seg, x);
    }
    public static double entry_timeout(MemorySegment seg, long index) {
        return (double)constants$9.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void entry_timeout(MemorySegment seg, long index, double x) {
        constants$9.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle negative_timeout$VH() {
        return constants$9.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double negative_timeout;
     * }
     */
    public static double negative_timeout(MemorySegment seg) {
        return (double)constants$9.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double negative_timeout;
     * }
     */
    public static void negative_timeout(MemorySegment seg, double x) {
        constants$9.const$2.set(seg, x);
    }
    public static double negative_timeout(MemorySegment seg, long index) {
        return (double)constants$9.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void negative_timeout(MemorySegment seg, long index, double x) {
        constants$9.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle attr_timeout$VH() {
        return constants$9.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double attr_timeout;
     * }
     */
    public static double attr_timeout(MemorySegment seg) {
        return (double)constants$9.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double attr_timeout;
     * }
     */
    public static void attr_timeout(MemorySegment seg, double x) {
        constants$9.const$3.set(seg, x);
    }
    public static double attr_timeout(MemorySegment seg, long index) {
        return (double)constants$9.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void attr_timeout(MemorySegment seg, long index, double x) {
        constants$9.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle intr$VH() {
        return constants$9.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int intr;
     * }
     */
    public static int intr(MemorySegment seg) {
        return (int)constants$9.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int intr;
     * }
     */
    public static void intr(MemorySegment seg, int x) {
        constants$9.const$4.set(seg, x);
    }
    public static int intr(MemorySegment seg, long index) {
        return (int)constants$9.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void intr(MemorySegment seg, long index, int x) {
        constants$9.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle intr_signal$VH() {
        return constants$9.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int intr_signal;
     * }
     */
    public static int intr_signal(MemorySegment seg) {
        return (int)constants$9.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int intr_signal;
     * }
     */
    public static void intr_signal(MemorySegment seg, int x) {
        constants$9.const$5.set(seg, x);
    }
    public static int intr_signal(MemorySegment seg, long index) {
        return (int)constants$9.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void intr_signal(MemorySegment seg, long index, int x) {
        constants$9.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle remember$VH() {
        return constants$10.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int remember;
     * }
     */
    public static int remember(MemorySegment seg) {
        return (int)constants$10.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int remember;
     * }
     */
    public static void remember(MemorySegment seg, int x) {
        constants$10.const$0.set(seg, x);
    }
    public static int remember(MemorySegment seg, long index) {
        return (int)constants$10.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void remember(MemorySegment seg, long index, int x) {
        constants$10.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hard_remove$VH() {
        return constants$10.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int hard_remove;
     * }
     */
    public static int hard_remove(MemorySegment seg) {
        return (int)constants$10.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int hard_remove;
     * }
     */
    public static void hard_remove(MemorySegment seg, int x) {
        constants$10.const$1.set(seg, x);
    }
    public static int hard_remove(MemorySegment seg, long index) {
        return (int)constants$10.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hard_remove(MemorySegment seg, long index, int x) {
        constants$10.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle use_ino$VH() {
        return constants$10.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_ino;
     * }
     */
    public static int use_ino(MemorySegment seg) {
        return (int)constants$10.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_ino;
     * }
     */
    public static void use_ino(MemorySegment seg, int x) {
        constants$10.const$2.set(seg, x);
    }
    public static int use_ino(MemorySegment seg, long index) {
        return (int)constants$10.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void use_ino(MemorySegment seg, long index, int x) {
        constants$10.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle readdir_ino$VH() {
        return constants$10.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int readdir_ino;
     * }
     */
    public static int readdir_ino(MemorySegment seg) {
        return (int)constants$10.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int readdir_ino;
     * }
     */
    public static void readdir_ino(MemorySegment seg, int x) {
        constants$10.const$3.set(seg, x);
    }
    public static int readdir_ino(MemorySegment seg, long index) {
        return (int)constants$10.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void readdir_ino(MemorySegment seg, long index, int x) {
        constants$10.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle direct_io$VH() {
        return constants$10.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int direct_io;
     * }
     */
    public static int direct_io(MemorySegment seg) {
        return (int)constants$10.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int direct_io;
     * }
     */
    public static void direct_io(MemorySegment seg, int x) {
        constants$10.const$4.set(seg, x);
    }
    public static int direct_io(MemorySegment seg, long index) {
        return (int)constants$10.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void direct_io(MemorySegment seg, long index, int x) {
        constants$10.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle kernel_cache$VH() {
        return constants$10.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int kernel_cache;
     * }
     */
    public static int kernel_cache(MemorySegment seg) {
        return (int)constants$10.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int kernel_cache;
     * }
     */
    public static void kernel_cache(MemorySegment seg, int x) {
        constants$10.const$5.set(seg, x);
    }
    public static int kernel_cache(MemorySegment seg, long index) {
        return (int)constants$10.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void kernel_cache(MemorySegment seg, long index, int x) {
        constants$10.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle auto_cache$VH() {
        return constants$11.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int auto_cache;
     * }
     */
    public static int auto_cache(MemorySegment seg) {
        return (int)constants$11.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int auto_cache;
     * }
     */
    public static void auto_cache(MemorySegment seg, int x) {
        constants$11.const$0.set(seg, x);
    }
    public static int auto_cache(MemorySegment seg, long index) {
        return (int)constants$11.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void auto_cache(MemorySegment seg, long index, int x) {
        constants$11.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ac_attr_timeout_set$VH() {
        return constants$11.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ac_attr_timeout_set;
     * }
     */
    public static int ac_attr_timeout_set(MemorySegment seg) {
        return (int)constants$11.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ac_attr_timeout_set;
     * }
     */
    public static void ac_attr_timeout_set(MemorySegment seg, int x) {
        constants$11.const$1.set(seg, x);
    }
    public static int ac_attr_timeout_set(MemorySegment seg, long index) {
        return (int)constants$11.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ac_attr_timeout_set(MemorySegment seg, long index, int x) {
        constants$11.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ac_attr_timeout$VH() {
        return constants$11.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double ac_attr_timeout;
     * }
     */
    public static double ac_attr_timeout(MemorySegment seg) {
        return (double)constants$11.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double ac_attr_timeout;
     * }
     */
    public static void ac_attr_timeout(MemorySegment seg, double x) {
        constants$11.const$2.set(seg, x);
    }
    public static double ac_attr_timeout(MemorySegment seg, long index) {
        return (double)constants$11.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ac_attr_timeout(MemorySegment seg, long index, double x) {
        constants$11.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nullpath_ok$VH() {
        return constants$11.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nullpath_ok;
     * }
     */
    public static int nullpath_ok(MemorySegment seg) {
        return (int)constants$11.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nullpath_ok;
     * }
     */
    public static void nullpath_ok(MemorySegment seg, int x) {
        constants$11.const$3.set(seg, x);
    }
    public static int nullpath_ok(MemorySegment seg, long index) {
        return (int)constants$11.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nullpath_ok(MemorySegment seg, long index, int x) {
        constants$11.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle show_help$VH() {
        return constants$11.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int show_help;
     * }
     */
    public static int show_help(MemorySegment seg) {
        return (int)constants$11.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int show_help;
     * }
     */
    public static void show_help(MemorySegment seg, int x) {
        constants$11.const$4.set(seg, x);
    }
    public static int show_help(MemorySegment seg, long index) {
        return (int)constants$11.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void show_help(MemorySegment seg, long index, int x) {
        constants$11.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle modules$VH() {
        return constants$11.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* modules;
     * }
     */
    public static MemorySegment modules(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* modules;
     * }
     */
    public static void modules(MemorySegment seg, MemorySegment x) {
        constants$11.const$5.set(seg, x);
    }
    public static MemorySegment modules(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void modules(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle debug$VH() {
        return constants$12.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int debug;
     * }
     */
    public static int debug(MemorySegment seg) {
        return (int)constants$12.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int debug;
     * }
     */
    public static void debug(MemorySegment seg, int x) {
        constants$12.const$0.set(seg, x);
    }
    public static int debug(MemorySegment seg, long index) {
        return (int)constants$12.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void debug(MemorySegment seg, long index, int x) {
        constants$12.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


