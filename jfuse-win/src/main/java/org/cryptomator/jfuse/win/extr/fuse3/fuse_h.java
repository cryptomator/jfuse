// Generated by jextract

package org.cryptomator.jfuse.win.extr.fuse3;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class fuse_h {

    fuse_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;

    private static class fuse3_lib_help {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse3_lib_help"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fuse3_lib_help(struct fuse_args *args)
     * }
     */
    public static FunctionDescriptor fuse3_lib_help$descriptor() {
        return fuse3_lib_help.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fuse3_lib_help(struct fuse_args *args)
     * }
     */
    public static MethodHandle fuse3_lib_help$handle() {
        return fuse3_lib_help.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void fuse3_lib_help(struct fuse_args *args)
     * }
     */
    public static void fuse3_lib_help(MemorySegment args) {
        var mh$ = fuse3_lib_help.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse3_lib_help", args);
            }
            mh$.invokeExact(args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse3_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fuse_h.C_POINTER,
            fuse_h.C_POINTER,
            fuse_h.C_POINTER,
            fuse_h.C_LONG_LONG,
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse3_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct fuse3 *fuse3_new(struct fuse_args *args, const struct fuse3_operations *ops, size_t opsize, void *data)
     * }
     */
    public static FunctionDescriptor fuse3_new$descriptor() {
        return fuse3_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct fuse3 *fuse3_new(struct fuse_args *args, const struct fuse3_operations *ops, size_t opsize, void *data)
     * }
     */
    public static MethodHandle fuse3_new$handle() {
        return fuse3_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct fuse3 *fuse3_new(struct fuse_args *args, const struct fuse3_operations *ops, size_t opsize, void *data)
     * }
     */
    public static MemorySegment fuse3_new(MemorySegment args, MemorySegment ops, long opsize, MemorySegment data) {
        var mh$ = fuse3_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse3_new", args, ops, opsize, data);
            }
            return (MemorySegment)mh$.invokeExact(args, ops, opsize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse3_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse3_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fuse3_destroy(struct fuse3 *f)
     * }
     */
    public static FunctionDescriptor fuse3_destroy$descriptor() {
        return fuse3_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fuse3_destroy(struct fuse3 *f)
     * }
     */
    public static MethodHandle fuse3_destroy$handle() {
        return fuse3_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void fuse3_destroy(struct fuse3 *f)
     * }
     */
    public static void fuse3_destroy(MemorySegment f) {
        var mh$ = fuse3_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse3_destroy", f);
            }
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse3_mount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fuse_h.C_INT,
            fuse_h.C_POINTER,
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse3_mount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fuse3_mount(struct fuse3 *f, const char *mountpoint)
     * }
     */
    public static FunctionDescriptor fuse3_mount$descriptor() {
        return fuse3_mount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fuse3_mount(struct fuse3 *f, const char *mountpoint)
     * }
     */
    public static MethodHandle fuse3_mount$handle() {
        return fuse3_mount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int fuse3_mount(struct fuse3 *f, const char *mountpoint)
     * }
     */
    public static int fuse3_mount(MemorySegment f, MemorySegment mountpoint) {
        var mh$ = fuse3_mount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse3_mount", f, mountpoint);
            }
            return (int)mh$.invokeExact(f, mountpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse3_unmount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse3_unmount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fuse3_unmount(struct fuse3 *f)
     * }
     */
    public static FunctionDescriptor fuse3_unmount$descriptor() {
        return fuse3_unmount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fuse3_unmount(struct fuse3 *f)
     * }
     */
    public static MethodHandle fuse3_unmount$handle() {
        return fuse3_unmount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void fuse3_unmount(struct fuse3 *f)
     * }
     */
    public static void fuse3_unmount(MemorySegment f) {
        var mh$ = fuse3_unmount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse3_unmount", f);
            }
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse3_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fuse_h.C_INT,
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse3_loop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fuse3_loop(struct fuse3 *f)
     * }
     */
    public static FunctionDescriptor fuse3_loop$descriptor() {
        return fuse3_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fuse3_loop(struct fuse3 *f)
     * }
     */
    public static MethodHandle fuse3_loop$handle() {
        return fuse3_loop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int fuse3_loop(struct fuse3 *f)
     * }
     */
    public static int fuse3_loop(MemorySegment f) {
        var mh$ = fuse3_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse3_loop", f);
            }
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse3_loop_mt_31 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fuse_h.C_INT,
            fuse_h.C_POINTER,
            fuse_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse3_loop_mt_31"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fuse3_loop_mt_31(struct fuse3 *f, int clone_fd)
     * }
     */
    public static FunctionDescriptor fuse3_loop_mt_31$descriptor() {
        return fuse3_loop_mt_31.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fuse3_loop_mt_31(struct fuse3 *f, int clone_fd)
     * }
     */
    public static MethodHandle fuse3_loop_mt_31$handle() {
        return fuse3_loop_mt_31.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int fuse3_loop_mt_31(struct fuse3 *f, int clone_fd)
     * }
     */
    public static int fuse3_loop_mt_31(MemorySegment f, int clone_fd) {
        var mh$ = fuse3_loop_mt_31.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse3_loop_mt_31", f, clone_fd);
            }
            return (int)mh$.invokeExact(f, clone_fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse3_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse3_exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fuse3_exit(struct fuse3 *f)
     * }
     */
    public static FunctionDescriptor fuse3_exit$descriptor() {
        return fuse3_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fuse3_exit(struct fuse3 *f)
     * }
     */
    public static MethodHandle fuse3_exit$handle() {
        return fuse3_exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void fuse3_exit(struct fuse3 *f)
     * }
     */
    public static void fuse3_exit(MemorySegment f) {
        var mh$ = fuse3_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse3_exit", f);
            }
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse3_get_session {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fuse_h.C_POINTER,
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse3_get_session"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct fuse3_session *fuse3_get_session(struct fuse3 *f)
     * }
     */
    public static FunctionDescriptor fuse3_get_session$descriptor() {
        return fuse3_get_session.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct fuse3_session *fuse3_get_session(struct fuse3 *f)
     * }
     */
    public static MethodHandle fuse3_get_session$handle() {
        return fuse3_get_session.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct fuse3_session *fuse3_get_session(struct fuse3 *f)
     * }
     */
    public static MemorySegment fuse3_get_session(MemorySegment f) {
        var mh$ = fuse3_get_session.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse3_get_session", f);
            }
            return (MemorySegment)mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

