// Generated by jextract

package org.cryptomator.jfuse.mac.extr.fuse;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class fuse_h {

    fuse_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;

    private static class fuse_mount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fuse_h.C_POINTER,
            fuse_h.C_POINTER,
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse_mount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct fuse_chan *fuse_mount(const char *mountpoint, struct fuse_args *args)
     * }
     */
    public static FunctionDescriptor fuse_mount$descriptor() {
        return fuse_mount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct fuse_chan *fuse_mount(const char *mountpoint, struct fuse_args *args)
     * }
     */
    public static MethodHandle fuse_mount$handle() {
        return fuse_mount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct fuse_chan *fuse_mount(const char *mountpoint, struct fuse_args *args)
     * }
     */
    public static MemorySegment fuse_mount(MemorySegment mountpoint, MemorySegment args) {
        var mh$ = fuse_mount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse_mount", mountpoint, args);
            }
            return (MemorySegment)mh$.invokeExact(mountpoint, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse_unmount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fuse_h.C_POINTER,
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse_unmount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fuse_unmount(const char *mountpoint, struct fuse_chan *ch)
     * }
     */
    public static FunctionDescriptor fuse_unmount$descriptor() {
        return fuse_unmount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fuse_unmount(const char *mountpoint, struct fuse_chan *ch)
     * }
     */
    public static MethodHandle fuse_unmount$handle() {
        return fuse_unmount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void fuse_unmount(const char *mountpoint, struct fuse_chan *ch)
     * }
     */
    public static void fuse_unmount(MemorySegment mountpoint, MemorySegment ch) {
        var mh$ = fuse_unmount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse_unmount", mountpoint, ch);
            }
            mh$.invokeExact(mountpoint, ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse_parse_cmdline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fuse_h.C_INT,
            fuse_h.C_POINTER,
            fuse_h.C_POINTER,
            fuse_h.C_POINTER,
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse_parse_cmdline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fuse_parse_cmdline(struct fuse_args *args, char **mountpoint, int *multithreaded, int *foreground)
     * }
     */
    public static FunctionDescriptor fuse_parse_cmdline$descriptor() {
        return fuse_parse_cmdline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fuse_parse_cmdline(struct fuse_args *args, char **mountpoint, int *multithreaded, int *foreground)
     * }
     */
    public static MethodHandle fuse_parse_cmdline$handle() {
        return fuse_parse_cmdline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int fuse_parse_cmdline(struct fuse_args *args, char **mountpoint, int *multithreaded, int *foreground)
     * }
     */
    public static int fuse_parse_cmdline(MemorySegment args, MemorySegment mountpoint, MemorySegment multithreaded, MemorySegment foreground) {
        var mh$ = fuse_parse_cmdline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse_parse_cmdline", args, mountpoint, multithreaded, foreground);
            }
            return (int)mh$.invokeExact(args, mountpoint, multithreaded, foreground);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fuse_h.C_POINTER,
            fuse_h.C_POINTER,
            fuse_h.C_POINTER,
            fuse_h.C_POINTER,
            fuse_h.C_LONG,
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct fuse *fuse_new(struct fuse_chan *ch, struct fuse_args *args, const struct fuse_operations *op, size_t op_size, void *user_data)
     * }
     */
    public static FunctionDescriptor fuse_new$descriptor() {
        return fuse_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct fuse *fuse_new(struct fuse_chan *ch, struct fuse_args *args, const struct fuse_operations *op, size_t op_size, void *user_data)
     * }
     */
    public static MethodHandle fuse_new$handle() {
        return fuse_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct fuse *fuse_new(struct fuse_chan *ch, struct fuse_args *args, const struct fuse_operations *op, size_t op_size, void *user_data)
     * }
     */
    public static MemorySegment fuse_new(MemorySegment ch, MemorySegment args, MemorySegment op, long op_size, MemorySegment user_data) {
        var mh$ = fuse_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse_new", ch, args, op, op_size, user_data);
            }
            return (MemorySegment)mh$.invokeExact(ch, args, op, op_size, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fuse_destroy(struct fuse *f)
     * }
     */
    public static FunctionDescriptor fuse_destroy$descriptor() {
        return fuse_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fuse_destroy(struct fuse *f)
     * }
     */
    public static MethodHandle fuse_destroy$handle() {
        return fuse_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void fuse_destroy(struct fuse *f)
     * }
     */
    public static void fuse_destroy(MemorySegment f) {
        var mh$ = fuse_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse_destroy", f);
            }
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fuse_h.C_INT,
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse_loop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fuse_loop(struct fuse *f)
     * }
     */
    public static FunctionDescriptor fuse_loop$descriptor() {
        return fuse_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fuse_loop(struct fuse *f)
     * }
     */
    public static MethodHandle fuse_loop$handle() {
        return fuse_loop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int fuse_loop(struct fuse *f)
     * }
     */
    public static int fuse_loop(MemorySegment f) {
        var mh$ = fuse_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse_loop", f);
            }
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse_exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fuse_exit(struct fuse *f)
     * }
     */
    public static FunctionDescriptor fuse_exit$descriptor() {
        return fuse_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fuse_exit(struct fuse *f)
     * }
     */
    public static MethodHandle fuse_exit$handle() {
        return fuse_exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void fuse_exit(struct fuse *f)
     * }
     */
    public static void fuse_exit(MemorySegment f) {
        var mh$ = fuse_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse_exit", f);
            }
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fuse_loop_mt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fuse_h.C_INT,
            fuse_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    fuse_h.findOrThrow("fuse_loop_mt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fuse_loop_mt(struct fuse *f)
     * }
     */
    public static FunctionDescriptor fuse_loop_mt$descriptor() {
        return fuse_loop_mt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fuse_loop_mt(struct fuse *f)
     * }
     */
    public static MethodHandle fuse_loop_mt$handle() {
        return fuse_loop_mt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int fuse_loop_mt(struct fuse *f)
     * }
     */
    public static int fuse_loop_mt(MemorySegment f) {
        var mh$ = fuse_loop_mt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fuse_loop_mt", f);
            }
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

