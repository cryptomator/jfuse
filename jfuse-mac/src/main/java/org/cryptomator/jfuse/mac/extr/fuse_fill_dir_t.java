// Generated by jextract

package org.cryptomator.jfuse.mac.extr;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*fuse_fill_dir_t)(void* buf,char* name,struct stat* stbuf,long long off);
 * }
 */
public interface fuse_fill_dir_t {

    int apply(java.lang.foreign.MemorySegment buf, java.lang.foreign.MemorySegment name, java.lang.foreign.MemorySegment stbuf, long off);
    static MemorySegment allocate(fuse_fill_dir_t fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(fuse_fill_dir_t.class, fi, constants$0.fuse_fill_dir_t$FUNC, scope);
    }
    static fuse_fill_dir_t ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _buf, java.lang.foreign.MemorySegment _name, java.lang.foreign.MemorySegment _stbuf, long _off) -> {
            try {
                return (int)constants$0.fuse_fill_dir_t$MH.invokeExact(symbol, _buf, _name, _stbuf, _off);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


