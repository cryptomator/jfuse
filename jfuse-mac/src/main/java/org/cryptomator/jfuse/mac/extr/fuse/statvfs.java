// Generated by jextract

package org.cryptomator.jfuse.mac.extr.fuse;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct statvfs {
 *     unsigned long f_bsize;
 *     unsigned long f_frsize;
 *     fsblkcnt_t f_blocks;
 *     fsblkcnt_t f_bfree;
 *     fsblkcnt_t f_bavail;
 *     fsfilcnt_t f_files;
 *     fsfilcnt_t f_ffree;
 *     fsfilcnt_t f_favail;
 *     unsigned long f_fsid;
 *     unsigned long f_flag;
 *     unsigned long f_namemax;
 * };
 * }
 */
public class statvfs {

    public static MemoryLayout $LAYOUT() {
        return constants$7.const$1;
    }
    public static VarHandle f_bsize$VH() {
        return constants$7.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long f_bsize;
     * }
     */
    public static long f_bsize$get(MemorySegment seg) {
        return (long)constants$7.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long f_bsize;
     * }
     */
    public static void f_bsize$set(MemorySegment seg, long x) {
        constants$7.const$2.set(seg, x);
    }
    public static long f_bsize$get(MemorySegment seg, long index) {
        return (long)constants$7.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void f_bsize$set(MemorySegment seg, long index, long x) {
        constants$7.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_frsize$VH() {
        return constants$7.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long f_frsize;
     * }
     */
    public static long f_frsize$get(MemorySegment seg) {
        return (long)constants$7.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long f_frsize;
     * }
     */
    public static void f_frsize$set(MemorySegment seg, long x) {
        constants$7.const$3.set(seg, x);
    }
    public static long f_frsize$get(MemorySegment seg, long index) {
        return (long)constants$7.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void f_frsize$set(MemorySegment seg, long index, long x) {
        constants$7.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_blocks$VH() {
        return constants$7.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * fsblkcnt_t f_blocks;
     * }
     */
    public static int f_blocks$get(MemorySegment seg) {
        return (int)constants$7.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * fsblkcnt_t f_blocks;
     * }
     */
    public static void f_blocks$set(MemorySegment seg, int x) {
        constants$7.const$4.set(seg, x);
    }
    public static int f_blocks$get(MemorySegment seg, long index) {
        return (int)constants$7.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void f_blocks$set(MemorySegment seg, long index, int x) {
        constants$7.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_bfree$VH() {
        return constants$7.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * fsblkcnt_t f_bfree;
     * }
     */
    public static int f_bfree$get(MemorySegment seg) {
        return (int)constants$7.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * fsblkcnt_t f_bfree;
     * }
     */
    public static void f_bfree$set(MemorySegment seg, int x) {
        constants$7.const$5.set(seg, x);
    }
    public static int f_bfree$get(MemorySegment seg, long index) {
        return (int)constants$7.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void f_bfree$set(MemorySegment seg, long index, int x) {
        constants$7.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_bavail$VH() {
        return constants$8.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * fsblkcnt_t f_bavail;
     * }
     */
    public static int f_bavail$get(MemorySegment seg) {
        return (int)constants$8.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * fsblkcnt_t f_bavail;
     * }
     */
    public static void f_bavail$set(MemorySegment seg, int x) {
        constants$8.const$0.set(seg, x);
    }
    public static int f_bavail$get(MemorySegment seg, long index) {
        return (int)constants$8.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void f_bavail$set(MemorySegment seg, long index, int x) {
        constants$8.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_files$VH() {
        return constants$8.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * fsfilcnt_t f_files;
     * }
     */
    public static int f_files$get(MemorySegment seg) {
        return (int)constants$8.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * fsfilcnt_t f_files;
     * }
     */
    public static void f_files$set(MemorySegment seg, int x) {
        constants$8.const$1.set(seg, x);
    }
    public static int f_files$get(MemorySegment seg, long index) {
        return (int)constants$8.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void f_files$set(MemorySegment seg, long index, int x) {
        constants$8.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_ffree$VH() {
        return constants$8.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * fsfilcnt_t f_ffree;
     * }
     */
    public static int f_ffree$get(MemorySegment seg) {
        return (int)constants$8.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * fsfilcnt_t f_ffree;
     * }
     */
    public static void f_ffree$set(MemorySegment seg, int x) {
        constants$8.const$2.set(seg, x);
    }
    public static int f_ffree$get(MemorySegment seg, long index) {
        return (int)constants$8.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void f_ffree$set(MemorySegment seg, long index, int x) {
        constants$8.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_favail$VH() {
        return constants$8.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * fsfilcnt_t f_favail;
     * }
     */
    public static int f_favail$get(MemorySegment seg) {
        return (int)constants$8.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * fsfilcnt_t f_favail;
     * }
     */
    public static void f_favail$set(MemorySegment seg, int x) {
        constants$8.const$3.set(seg, x);
    }
    public static int f_favail$get(MemorySegment seg, long index) {
        return (int)constants$8.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void f_favail$set(MemorySegment seg, long index, int x) {
        constants$8.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_fsid$VH() {
        return constants$8.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long f_fsid;
     * }
     */
    public static long f_fsid$get(MemorySegment seg) {
        return (long)constants$8.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long f_fsid;
     * }
     */
    public static void f_fsid$set(MemorySegment seg, long x) {
        constants$8.const$4.set(seg, x);
    }
    public static long f_fsid$get(MemorySegment seg, long index) {
        return (long)constants$8.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void f_fsid$set(MemorySegment seg, long index, long x) {
        constants$8.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_flag$VH() {
        return constants$8.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long f_flag;
     * }
     */
    public static long f_flag$get(MemorySegment seg) {
        return (long)constants$8.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long f_flag;
     * }
     */
    public static void f_flag$set(MemorySegment seg, long x) {
        constants$8.const$5.set(seg, x);
    }
    public static long f_flag$get(MemorySegment seg, long index) {
        return (long)constants$8.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void f_flag$set(MemorySegment seg, long index, long x) {
        constants$8.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_namemax$VH() {
        return constants$9.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long f_namemax;
     * }
     */
    public static long f_namemax$get(MemorySegment seg) {
        return (long)constants$9.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long f_namemax;
     * }
     */
    public static void f_namemax$set(MemorySegment seg, long x) {
        constants$9.const$0.set(seg, x);
    }
    public static long f_namemax$get(MemorySegment seg, long index) {
        return (long)constants$9.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void f_namemax$set(MemorySegment seg, long index, long x) {
        constants$9.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


