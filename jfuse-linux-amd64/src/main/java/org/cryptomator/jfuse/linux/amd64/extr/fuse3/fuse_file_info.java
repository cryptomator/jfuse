// Generated by jextract

package org.cryptomator.jfuse.linux.amd64.extr.fuse3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct fuse_file_info {
 *     int flags;
 *      *     unsigned int writepage;
 *     unsigned int direct_io;
 *     unsigned int keep_cache;
 *     unsigned int flush;
 *     unsigned int nonseekable;
 *     unsigned int flock_release;
 *     unsigned int cache_readdir;
 *     unsigned int noflush;
 *     unsigned int padding;
 *     unsigned int padding2;
 *     unsigned long fh;
 *     unsigned long lock_owner;
 *     unsigned int poll_events;
 * };
 * }
 */
public class fuse_file_info {

    public static MemoryLayout $LAYOUT() {
        return constants$1.const$1;
    }
    public static VarHandle flags$VH() {
        return constants$1.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$1.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$1.const$2.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$1.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$1.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fh$VH() {
        return constants$1.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long fh;
     * }
     */
    public static long fh$get(MemorySegment seg) {
        return (long)constants$1.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long fh;
     * }
     */
    public static void fh$set(MemorySegment seg, long x) {
        constants$1.const$3.set(seg, x);
    }
    public static long fh$get(MemorySegment seg, long index) {
        return (long)constants$1.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void fh$set(MemorySegment seg, long index, long x) {
        constants$1.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lock_owner$VH() {
        return constants$1.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long lock_owner;
     * }
     */
    public static long lock_owner$get(MemorySegment seg) {
        return (long)constants$1.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long lock_owner;
     * }
     */
    public static void lock_owner$set(MemorySegment seg, long x) {
        constants$1.const$4.set(seg, x);
    }
    public static long lock_owner$get(MemorySegment seg, long index) {
        return (long)constants$1.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lock_owner$set(MemorySegment seg, long index, long x) {
        constants$1.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle poll_events$VH() {
        return constants$1.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int poll_events;
     * }
     */
    public static int poll_events$get(MemorySegment seg) {
        return (int)constants$1.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int poll_events;
     * }
     */
    public static void poll_events$set(MemorySegment seg, int x) {
        constants$1.const$5.set(seg, x);
    }
    public static int poll_events$get(MemorySegment seg, long index) {
        return (int)constants$1.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void poll_events$set(MemorySegment seg, long index, int x) {
        constants$1.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


