// Generated by jextract

package org.cryptomator.jfuse.linux.amd64.extr.fuse3_lowlevel;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct fuse_cmdline_opts {
 *     int singlethread;
 *     int foreground;
 *     int debug;
 *     int nodefault_subtype;
 *     char* mountpoint;
 *     int show_version;
 *     int show_help;
 *     int clone_fd;
 *     unsigned int max_idle_threads;
 *     unsigned int max_threads;
 * };
 * }
 */
public class fuse_cmdline_opts {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$0;
    }
    public static VarHandle singlethread$VH() {
        return constants$0.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int singlethread;
     * }
     */
    public static int singlethread$get(MemorySegment seg) {
        return (int)constants$0.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int singlethread;
     * }
     */
    public static void singlethread$set(MemorySegment seg, int x) {
        constants$0.const$1.set(seg, x);
    }
    public static int singlethread$get(MemorySegment seg, long index) {
        return (int)constants$0.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void singlethread$set(MemorySegment seg, long index, int x) {
        constants$0.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle foreground$VH() {
        return constants$0.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int foreground;
     * }
     */
    public static int foreground$get(MemorySegment seg) {
        return (int)constants$0.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int foreground;
     * }
     */
    public static void foreground$set(MemorySegment seg, int x) {
        constants$0.const$2.set(seg, x);
    }
    public static int foreground$get(MemorySegment seg, long index) {
        return (int)constants$0.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void foreground$set(MemorySegment seg, long index, int x) {
        constants$0.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle debug$VH() {
        return constants$0.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int debug;
     * }
     */
    public static int debug$get(MemorySegment seg) {
        return (int)constants$0.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int debug;
     * }
     */
    public static void debug$set(MemorySegment seg, int x) {
        constants$0.const$3.set(seg, x);
    }
    public static int debug$get(MemorySegment seg, long index) {
        return (int)constants$0.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void debug$set(MemorySegment seg, long index, int x) {
        constants$0.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nodefault_subtype$VH() {
        return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nodefault_subtype;
     * }
     */
    public static int nodefault_subtype$get(MemorySegment seg) {
        return (int)constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nodefault_subtype;
     * }
     */
    public static void nodefault_subtype$set(MemorySegment seg, int x) {
        constants$0.const$4.set(seg, x);
    }
    public static int nodefault_subtype$get(MemorySegment seg, long index) {
        return (int)constants$0.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void nodefault_subtype$set(MemorySegment seg, long index, int x) {
        constants$0.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mountpoint$VH() {
        return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* mountpoint;
     * }
     */
    public static MemorySegment mountpoint$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* mountpoint;
     * }
     */
    public static void mountpoint$set(MemorySegment seg, MemorySegment x) {
        constants$0.const$5.set(seg, x);
    }
    public static MemorySegment mountpoint$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$0.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void mountpoint$set(MemorySegment seg, long index, MemorySegment x) {
        constants$0.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle show_version$VH() {
        return constants$1.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int show_version;
     * }
     */
    public static int show_version$get(MemorySegment seg) {
        return (int)constants$1.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int show_version;
     * }
     */
    public static void show_version$set(MemorySegment seg, int x) {
        constants$1.const$0.set(seg, x);
    }
    public static int show_version$get(MemorySegment seg, long index) {
        return (int)constants$1.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void show_version$set(MemorySegment seg, long index, int x) {
        constants$1.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle show_help$VH() {
        return constants$1.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int show_help;
     * }
     */
    public static int show_help$get(MemorySegment seg) {
        return (int)constants$1.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int show_help;
     * }
     */
    public static void show_help$set(MemorySegment seg, int x) {
        constants$1.const$1.set(seg, x);
    }
    public static int show_help$get(MemorySegment seg, long index) {
        return (int)constants$1.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void show_help$set(MemorySegment seg, long index, int x) {
        constants$1.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle clone_fd$VH() {
        return constants$1.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int clone_fd;
     * }
     */
    public static int clone_fd$get(MemorySegment seg) {
        return (int)constants$1.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int clone_fd;
     * }
     */
    public static void clone_fd$set(MemorySegment seg, int x) {
        constants$1.const$2.set(seg, x);
    }
    public static int clone_fd$get(MemorySegment seg, long index) {
        return (int)constants$1.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void clone_fd$set(MemorySegment seg, long index, int x) {
        constants$1.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_idle_threads$VH() {
        return constants$1.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_idle_threads;
     * }
     */
    public static int max_idle_threads$get(MemorySegment seg) {
        return (int)constants$1.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_idle_threads;
     * }
     */
    public static void max_idle_threads$set(MemorySegment seg, int x) {
        constants$1.const$3.set(seg, x);
    }
    public static int max_idle_threads$get(MemorySegment seg, long index) {
        return (int)constants$1.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void max_idle_threads$set(MemorySegment seg, long index, int x) {
        constants$1.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_threads$VH() {
        return constants$1.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_threads;
     * }
     */
    public static int max_threads$get(MemorySegment seg) {
        return (int)constants$1.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_threads;
     * }
     */
    public static void max_threads$set(MemorySegment seg, int x) {
        constants$1.const$4.set(seg, x);
    }
    public static int max_threads$get(MemorySegment seg, long index) {
        return (int)constants$1.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void max_threads$set(MemorySegment seg, long index, int x) {
        constants$1.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


