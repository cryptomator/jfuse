// Generated by jextract

package org.cryptomator.jfuse.linux.amd64.extr;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct fuse_cmdline_opts {
 *     int singlethread;
 *     int foreground;
 *     int debug;
 *     int nodefault_subtype;
 *     char* mountpoint;
 *     int show_version;
 *     int show_help;
 *     int clone_fd;
 *     unsigned int max_idle_threads;
 *     unsigned int max_threads;
 * };
 * }
 */
public class fuse_cmdline_opts {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("singlethread"),
        Constants$root.C_INT$LAYOUT.withName("foreground"),
        Constants$root.C_INT$LAYOUT.withName("debug"),
        Constants$root.C_INT$LAYOUT.withName("nodefault_subtype"),
        Constants$root.C_POINTER$LAYOUT.withName("mountpoint"),
        Constants$root.C_INT$LAYOUT.withName("show_version"),
        Constants$root.C_INT$LAYOUT.withName("show_help"),
        Constants$root.C_INT$LAYOUT.withName("clone_fd"),
        Constants$root.C_INT$LAYOUT.withName("max_idle_threads"),
        Constants$root.C_INT$LAYOUT.withName("max_threads"),
        MemoryLayout.paddingLayout(32)
    ).withName("fuse_cmdline_opts");
    public static MemoryLayout $LAYOUT() {
        return fuse_cmdline_opts.$struct$LAYOUT;
    }
    static final VarHandle singlethread$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("singlethread"));
    public static VarHandle singlethread$VH() {
        return fuse_cmdline_opts.singlethread$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int singlethread;
     * }
     */
    public static int singlethread$get(MemorySegment seg) {
        return (int)fuse_cmdline_opts.singlethread$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int singlethread;
     * }
     */
    public static void singlethread$set(MemorySegment seg, int x) {
        fuse_cmdline_opts.singlethread$VH.set(seg, x);
    }
    public static int singlethread$get(MemorySegment seg, long index) {
        return (int)fuse_cmdline_opts.singlethread$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void singlethread$set(MemorySegment seg, long index, int x) {
        fuse_cmdline_opts.singlethread$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle foreground$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("foreground"));
    public static VarHandle foreground$VH() {
        return fuse_cmdline_opts.foreground$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int foreground;
     * }
     */
    public static int foreground$get(MemorySegment seg) {
        return (int)fuse_cmdline_opts.foreground$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int foreground;
     * }
     */
    public static void foreground$set(MemorySegment seg, int x) {
        fuse_cmdline_opts.foreground$VH.set(seg, x);
    }
    public static int foreground$get(MemorySegment seg, long index) {
        return (int)fuse_cmdline_opts.foreground$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void foreground$set(MemorySegment seg, long index, int x) {
        fuse_cmdline_opts.foreground$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle debug$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("debug"));
    public static VarHandle debug$VH() {
        return fuse_cmdline_opts.debug$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int debug;
     * }
     */
    public static int debug$get(MemorySegment seg) {
        return (int)fuse_cmdline_opts.debug$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int debug;
     * }
     */
    public static void debug$set(MemorySegment seg, int x) {
        fuse_cmdline_opts.debug$VH.set(seg, x);
    }
    public static int debug$get(MemorySegment seg, long index) {
        return (int)fuse_cmdline_opts.debug$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void debug$set(MemorySegment seg, long index, int x) {
        fuse_cmdline_opts.debug$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nodefault_subtype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nodefault_subtype"));
    public static VarHandle nodefault_subtype$VH() {
        return fuse_cmdline_opts.nodefault_subtype$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nodefault_subtype;
     * }
     */
    public static int nodefault_subtype$get(MemorySegment seg) {
        return (int)fuse_cmdline_opts.nodefault_subtype$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nodefault_subtype;
     * }
     */
    public static void nodefault_subtype$set(MemorySegment seg, int x) {
        fuse_cmdline_opts.nodefault_subtype$VH.set(seg, x);
    }
    public static int nodefault_subtype$get(MemorySegment seg, long index) {
        return (int)fuse_cmdline_opts.nodefault_subtype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nodefault_subtype$set(MemorySegment seg, long index, int x) {
        fuse_cmdline_opts.nodefault_subtype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mountpoint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mountpoint"));
    public static VarHandle mountpoint$VH() {
        return fuse_cmdline_opts.mountpoint$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* mountpoint;
     * }
     */
    public static MemorySegment mountpoint$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)fuse_cmdline_opts.mountpoint$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* mountpoint;
     * }
     */
    public static void mountpoint$set(MemorySegment seg, MemorySegment x) {
        fuse_cmdline_opts.mountpoint$VH.set(seg, x);
    }
    public static MemorySegment mountpoint$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)fuse_cmdline_opts.mountpoint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mountpoint$set(MemorySegment seg, long index, MemorySegment x) {
        fuse_cmdline_opts.mountpoint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle show_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("show_version"));
    public static VarHandle show_version$VH() {
        return fuse_cmdline_opts.show_version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int show_version;
     * }
     */
    public static int show_version$get(MemorySegment seg) {
        return (int)fuse_cmdline_opts.show_version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int show_version;
     * }
     */
    public static void show_version$set(MemorySegment seg, int x) {
        fuse_cmdline_opts.show_version$VH.set(seg, x);
    }
    public static int show_version$get(MemorySegment seg, long index) {
        return (int)fuse_cmdline_opts.show_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void show_version$set(MemorySegment seg, long index, int x) {
        fuse_cmdline_opts.show_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle show_help$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("show_help"));
    public static VarHandle show_help$VH() {
        return fuse_cmdline_opts.show_help$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int show_help;
     * }
     */
    public static int show_help$get(MemorySegment seg) {
        return (int)fuse_cmdline_opts.show_help$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int show_help;
     * }
     */
    public static void show_help$set(MemorySegment seg, int x) {
        fuse_cmdline_opts.show_help$VH.set(seg, x);
    }
    public static int show_help$get(MemorySegment seg, long index) {
        return (int)fuse_cmdline_opts.show_help$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void show_help$set(MemorySegment seg, long index, int x) {
        fuse_cmdline_opts.show_help$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle clone_fd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("clone_fd"));
    public static VarHandle clone_fd$VH() {
        return fuse_cmdline_opts.clone_fd$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int clone_fd;
     * }
     */
    public static int clone_fd$get(MemorySegment seg) {
        return (int)fuse_cmdline_opts.clone_fd$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int clone_fd;
     * }
     */
    public static void clone_fd$set(MemorySegment seg, int x) {
        fuse_cmdline_opts.clone_fd$VH.set(seg, x);
    }
    public static int clone_fd$get(MemorySegment seg, long index) {
        return (int)fuse_cmdline_opts.clone_fd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void clone_fd$set(MemorySegment seg, long index, int x) {
        fuse_cmdline_opts.clone_fd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_idle_threads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_idle_threads"));
    public static VarHandle max_idle_threads$VH() {
        return fuse_cmdline_opts.max_idle_threads$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_idle_threads;
     * }
     */
    public static int max_idle_threads$get(MemorySegment seg) {
        return (int)fuse_cmdline_opts.max_idle_threads$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_idle_threads;
     * }
     */
    public static void max_idle_threads$set(MemorySegment seg, int x) {
        fuse_cmdline_opts.max_idle_threads$VH.set(seg, x);
    }
    public static int max_idle_threads$get(MemorySegment seg, long index) {
        return (int)fuse_cmdline_opts.max_idle_threads$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_idle_threads$set(MemorySegment seg, long index, int x) {
        fuse_cmdline_opts.max_idle_threads$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_threads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_threads"));
    public static VarHandle max_threads$VH() {
        return fuse_cmdline_opts.max_threads$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_threads;
     * }
     */
    public static int max_threads$get(MemorySegment seg) {
        return (int)fuse_cmdline_opts.max_threads$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_threads;
     * }
     */
    public static void max_threads$set(MemorySegment seg, int x) {
        fuse_cmdline_opts.max_threads$VH.set(seg, x);
    }
    public static int max_threads$get(MemorySegment seg, long index) {
        return (int)fuse_cmdline_opts.max_threads$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_threads$set(MemorySegment seg, long index, int x) {
        fuse_cmdline_opts.max_threads$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


